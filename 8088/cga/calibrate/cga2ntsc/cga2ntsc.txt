CGA2NTSC is a program with two main functions:

1. Normal mode - given an image that could be displayed on an RGBI monitor
   connected to a CGA card, show what a composite monitor connected to the same
   card would look like.
2. Match mode - given a 24-bit colour image, find try to find a set of data
   which, when loaded into the CGA's video memory, will best reproduce that
   image on the composite output.

To start the program, run CGA2NTSC with the name of a .png file on the command
line. For full-screen CGA, the input image should be 640x400. Larger or smaller
files can be used. A screenshot file generated by DOSBox with machine=cga will
work fine.

CGA2NTSC will, on startup, attempt to detect whether the input picture uses only
RGBI colours or not. If it does, CGA2NTSC starts up in normal mode, otherwise it
starts up in match mode. To switch modes, press the "Match" button.

The display in the bottom left of CGA2NTSC's window is the colour gamut. This
shows exactly which colours are present in the output image. The cube represents
sRGB colour space. If any colours protrude outside this cube, they will be
clipped, changing colours relative to each other and possibly causing the
resulting image to not accurately represent what would be seen on a composite
monitor. This is not necessarily a bad thing - avoiding clipping altogether is
likely to result in an image that lacks either saturation or contrast or both.
Drag the gamut around with the left mouse button to rotate it, or with the
right mouse button to zoom in and out.

The brightness, saturation, contrast and hue sliders in the upper right of the
window are the same as the corresponding sliders on a composite monitor or
television set (hue is sometimes called "tint"). In match mode, when CGA2NTSC
matches the image it tries to match the input image to how the output image
looks *with the current slider settings*. So if you want to make your output
image brighter (without any net adjustment to the brightness) you can turn the
brightness control down, press the "Match mode" button a couple of times to
redo the matching and then return the brightness control to its normal
position. Similarly with saturation, contrast and hue adjustments.

There are some buttons for setting the position of the brightness, saturation
and contrast controls automatically:
* Auto brightness makes the mid-grey point (half-way between output black and
  output white) the same as the sRGB mid-grey, centering the output so it is
  neither too light nor too dark.
* Auto saturation fixes the saturation so that the distance between mid grey
  and the most saturated colour is the same as half of the distance between
  black and white (so that if the output image gamut was a cube with the right
  orientation, it would be undistorted).

There are two ways of doing auto contrast:
* "No clipping" makes adjusts the contrast so that none of the colours are
  clipped against the edges of the sRGB cube (but so that at least one is just
  touching).
* "Fix black and white" causes output black to be the same as sRGB black and
  so that output white is the same as sRGB white. This is how most emulators
  that can handle composite output are calibrated by default (and gives nice
  high-contast images), but it does generally cause clipping for CGA signals,
  unless the saturation is turned way down.

Proceeding downwards, there are two buttons affecting the simulator and
NTSC decoder. "New CGA" simulates a new-style CGA card instead of an old-style
CGA card if pressed. "Fix Primaries" uses Rec.709 primaries for decoding
instead of Rec.601.

CGA2NTSC shows some information about the sRGB levels of output black and
output white, how far the most saturated colour is from mid-grey and how many
colours are currently being clipped.

Underneath the "Match" button are some controls tell CGA2NTSC what kind of CGA
mode you want to use for your picture. There are four basic modes on the left
dropdown:
* 1bpp graphics (i.e. 2 colours, 640x200) - the mode used for composite output
  in most CGA games that have special support for composite monitors.
* 2bpp graphics (i.e. 4 colours, 320x200).
* 40-column text (what is normally used for 40x25).
* 80-column text (what is normally used for 80x25).
* Auto: try all except 80-column text and pick the best one for each scanline
  (not currently useful as it does not take into account scanlines within rows
  properly).

The second dropdown specifies the RGBI colour used for colour 0 (2bpp mode),
colour 1 (1bpp mode) or the border colour (text mode). It directly corresponds
to the low four bits of the IO port at address 0x3d9 on CGA cards. Most CGA
composite games use 15 here, and this has the broadest selection of colours.
there is also an "auto" setting which tries all possible values on each
scanline and picks the one that fits best (to display the resulting image you
would generally need a routine that can change the palette register on every
scanline). In 2bpp mode this is four times slower than in 1bpp mode as there
are 64 effective palette register values (including the foreground palette
bits) to search through.

The third dropdown specifies the high 2 bits of the palette register for 2bpp
modes, allowing you to choose between the two basic palettes (cyan/magenta/grey
and green/red/brown) and bright versions of these. It has another function in
text modes, limiting the set of characters that will be considered:
* 2/4/6: Use only character 0xDD (left half, as used in 160x100x16 tweak mode).
* 10/12/14: Use characters 0x13 and 0x55 (as used in 80x100x512 colour mode).
* 3/5/7: Use characters 0x13, 0x55, 0xb0 and 0xb1 (as used in the 80x100x1K
  colour mode exhibited in "8088 MPH").
* 11/13/5: Use all characters (as used in the faces picture towards the end of
  "8088 MPH"). Gives the pictures that most closely match the input image
  (especially in 80-column mode) but the resulting images have a certain amount
  of "noise", unlike the pure rectangular pixels with the other subsets.

The final dropdown specifies the number of scanlines per character row. This is
not useful for graphics modes but is an essential ingredient for tweaked text
modes. CRTC tricks (updating CRTC registers at particular places on the screen
are necessary to use "1" and "1 doubled"). The 1K colour mode uses "1 doubled".
The combination of "1" and 80-column text uses video RAM so quickly that there
not enough to fit a full screen's worth into the CGA's 16kB. This gives the
most impressive images, though, and is what we used for the faces picture in
"8088 MPH".

The final two sliders control how errors are diffused to create the impression
of smooth gradients with a limited set of colours. Normal behavior (default) is
to set both to 1. Set both to 0 for "nearest colour" matching (no error
diffusion at all.) To diffuse only horizontally, set horizontal=2 and
vertical=0 (useful for images which may be stretched and squashed vertically).
To diffuse only vertically set horizontal=0 and vertical=2. If the two sliders
add up to more than 2 then strange things might happen. Adjust to artistic
taste.

On exit, the program generates a number of output files alongside the input
file:
* <file>_out.png - the decoded output shown in the top-left.
* <file>_out.dat - the CGA video RAM data (non-interlaced) required to make the
  CGA display the output image.
* <file>_out.rgbi - the image as it would be shown on an RGBI monitor (one byte
  per pixel, range 0..15).
* <file>_out.palettes - the palette register values for each scanline (for
  "palette=auto" mode).

The current source code for cga2ntsc can be found at
https://github.com/reenigne/reenigne/tree/master/8088/cga/calibrate/cga2ntsc .
