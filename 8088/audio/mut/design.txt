SoundObject            - something that can be assigned to a variable in a mut program
  Entry                  - something that can be put into a VoiceSet, Table or Sequence
    Scalar                 - a (possibly complex) Number, Time or Frequency
      Rational               - int/unsigned
      Double                 - double
    Sample             - a (possibly complex) Sample, Waveform or Filter (a continuous, Number-valued function indexed by Number, Time or Frequency respectively)
      ImplicitSample     - definied implicitly
        SineSample
        TriangleSample
        SquareSample
        SawtoothSample
        NoiseSample
      ExplicitSample     - defined explicitly
  Table
    VoiceSet
    Sequence
ParseTreeObject
  StatementSequence
  Statement
    AssignmentStatement
    ExpressionStatement
  LValue

Items in a Function:
  Extent (unit and time scale factor)
  Domain offset (time shift)
  Range scale (volume)

convolve(x,y) = ((x@i)*(y@i))@(-i)
shift(x,t) = convolve(x, sineWave@(i*t)) = ((x@i)*(sineWave@t))@(-i)


Types:
  * Number
  * Potential
  * Frequency
    * Hz
  * Time
    * s
  * Sample == function from Number (0..1) to Voltage, conceptually. May be stored as a frequency-domain function.
    * sine
    * square
    * triangle
    * sawtooth
    * whiteNoise
  * Waveform (a Sample at a particular frequency)
    * % == output from previous voice
  * Sequence<Number>
  * Sequence<Frequency>
  * Sequence<Sample>
  * Sequence<Waveform>
  * VoiceSet<Number>
  * VoiceSet<Frequency>
  * VoiceSet<Sample>
  * VoiceSet<Waveform>
  * Table<Number>
  * Table<Frequency>
  * Table<Sample>
  * Table<Waveform>

Operators:
  () parentheses
  {} embedded statement
  ^ convolution, power (RTL)
  - unary negative
  + unary positive
  @ time-scale
  * multiplication
  / division
  + addition
  - subtraction
  & voice
  | sequence
  = assignment

~`!$%\:'/?>,<


+-*/^@
  .SVT

. .SVT
S SSTT
V VTVT
T TTTT


| .SVT

. SSTT
S SSTT
V TTTT
T TTTT


& .SVT

. VTVT
S TTTT
V VTVT
T TTTT


+-         Number     Frequency  Time    Sample   Waveform
Number     Number     !          !       !        !
Frequency  !          Frequency  !       !        !
Time       !          !          Time    !        !
Sample     !          !          !       Sample   !
Waveform   !          !          !       !        Waveform


*          Number     Frequency  Time    Sample   Waveform
Number     Number     Frequency  Time    Sample   Waveform
Frequency  Frequency  !          Number  !        !
Time       Time       Number     !       !        !
Sample     Sample     !          !       Sample   !
Waveform   Waveform   !          !       !        Waveform

/          Number     Frequency  Time    Sample   Waveform
Number     Number     Frequency  Time    Sample   Waveform
Frequency  Time       Number     !       !        !
Time       Frequency  !          Number  !        !
Sample     Sample     !          !       Sample   !
Waveform   Waveform   !          !       !        Waveform

^          Number     Frequency  Time    Sample   Waveform
Number     Number     ?          ?       Sample   Waveform
Frequency  !          !          !       !        !
Time       !          !          !       !        !
Sample     Sample     !          !       Sample   !
Waveform   Waveform   !          !       !        Waveform

@          Number     Frequency  Time    Sample   Waveform
Number     !          !          !       Sample   Waveform
Frequency  !          !          !       Waveform !
Time       !          !          !       !        Sample
Sample     !          !          !       !        !
Waveform   !          !          !       !        !

|          Number     Frequency  Time    Sample   Waveform
Number     SNumber    !          !       !        !
Frequency  !          SFrequency !       !        !
Time       !          !          STime   !        !
Sample     !          !          !       SSample  !
Waveform   !          !          !       !        SWaveform

&          Number     Frequency  Time    Sample   Waveform
Number     VNumber    !          !       !        !
Frequency  !          VFrequency !       !        !
Time       !          !          VTime   !        !
Sample     !          !          !       VSample  !
Waveform   !          !          !       !        VWaveform





  * Envelope == function from Number to Number
Envelope adsr(Time t) { if (t < at) { return t*ar; } if (t < dt + at) { return t*at- ... } ... }
  Actually implement as a Waveform which is point-multiplied by the Waveform you want to envelope
    We would like to be able to have an instrument consisting of a function for the pure sound and a function for the envelope
      Time-scaling would stretch the pure sound function but not the envelope
        This could be done by having * (and @, + etc.) stay in unevaluated form if the domain units differ
        1) Time scaling would only affect the left component of such a construct
        2) Time scaling does not affect an object if doing so would take its domain unit outside {-1, 0, 1}.
            Is there a use for any other domain units? - possibly (though could always remove the units and do the same operations on dimensionless quantities).
        3) Time scaling a compound object only affects the lowest dimensioned component (when increasing the dimension) or the highest (when decreasing)
      Same thing can work for frequency adjustments like vibrato

  (sample + waveform)*(sample + waveform) = sample + waveform*sample + sample*waveform + waveform
    @frequency = waveform

Can find derivative of a function by multiplying by linear and taking the FT

Waveform @ Number yields Waveform
Sample @ Number yields Sample
Sample @ Frequency yields Waveform
Waveform @ Time yields Sample

All Numbers kept as Rational internally until they get too big, at which point we switch to double.

Have a way of defining variables in a particular voice,

We need @ as well as * because given a Waveform we want to be able to adjust its pitch and amplitude
  Waveform w;
  w*2  // double volume
  w@2  // double frequency
Similarly with a Sample:
  Sample s;
  s*2  // double volume
  s@2  // double frequency

Given "Sample s" and "Frequency f" should s*f be synonymous to s@f?

% is the current output from the previous voice (a Waveform)
  Make this a reserved word instead to avoid confusion with the sequence outer operator?

. is just a variable (conventially per voice) which is pronounced "default" and is generally used as the sample for that voice.

It would be nice to be able to redefine variables right in the grid:
  {.=sine;} .@C2

Inside {} you can have statements inside an expression (no value, just side effects)

Make Sample*Sample do pointwise multiplication (ring modulation)
Make Waveform*Waveform do pointwise multiplication
Make Sample^Sample do convolution
  Or not, pointwise power would be more regular -

(a^b)(z) == integral(x=-inf..inf, a(x)*b(z-x))
  So we can convolve a waveform with another waveform

It would be nice to be able to create filters (e.g. low-pass, high-pass, bandpass)
  We could generate filter waveforms directly, but it would be nice to be able to express them in the frequency domain
  If we consider a Sample==Number->Number and Waveform==Time->Number then Filter==Frequency->Number
  So we can make filters by using (e.g.) Sample

Have an FFT operator ~
  Sample and Waveform are conceptually continuous valued and repeating
   Therefore the output of ~ on one of these gives a discrete function of infinite extent
  Since the time-reversal operator is @-1, we could make the Fourier Transform operator @((-1)^(1/2))
   Can also make chirps this way
   Does @2 have a different meaning in the LCT sense than the meaning we're giving it?
     No - time-scaling is a perfectly good LCT
   How can we efficiently do fractional fourier transformations?
     http://www.chronowake.com/frft.pdf suggests we can do it by multiplying by a chirp before and after the FFT (see section 6.5)
     Also see (20) on page 36 of the same PDF? (Or is that a different definition?)
   Should we also use @ instead of ^ for convolution?

Need a shift operator shift(x) which is a delta function at offset x.
  Convolve this with a Sample (or @Hz version for Waveform) to apply a time shift
  Need a data type for a distribution
  Can actually generate this by doing an FFT of a sine

Do all computations internally with complex numbers, just take the real part when outputting
  sine is actually exp(i*x). What are the imaginary parts of square, triangle, sawtooth and whiteNoise?

Syntax for functions:
  major(x) = x + x@5/4 + x@3/2;
  minor(x) = x + x@6/5 + x@3/2;
  If we allow recursion, our language becomes Turing complete
    How do we terminate recursion?
      Have conditional operator ?:
      Boolean-valued operators ==, !=, <, >, <=, >=
      Boolean-valued functions

Also want to leave space for a stereo operator, maybe %%
  Sample%%Number or Waveform%%Number puts it on the left channel (-1), right channel (+1), center (0) or somewhere else along the real line
    No - just have a separate output for each channel. Doesn't use up an operator, is more flexible and generalizes to any number of channels.

Suppose we have

a = sine;
{ a = square; } &;
output =
  a &;  // The a here means the one in voice 0, i.e. square

a = sine;
{ & { a = triangle; } } &;
output =
  { c = d & { b = a; } ; } c &;  // The a here means the one in voice 0`1, i.e. triangle? Or a new voice, meaning only one level is transferred over {}? - the latter seems hard to understand

Generalized Samples can be finite (repeating) or infinite
  Therefore instead of indexing by 0..1 we should index by 0..extent (where extent may be infinite)

A distribution is a (multiple) derivative of a continuous function
  I think the number of discontinuities in the first derivative must be countable, since if you can't isolate them then the original function won't be continuous
    We should probably be able to get away with enumerated discontinuities
      So it's a continuous function plus a sum of delta functions, each one of which may be differentiated any number of times and scaled. So a discontinuity is:
        int order;  // 1 for delta, N for derivative of N-1
        Complex scale;  // scale factor
        Scalar position;

We want to evaluate waveforms, samples and filters lazily so that we can work out what resolution we need them at
However, we also have functions and | requires knowing the current value of division
  division must be a scalar - we currently don't have any way of getting a number from a waveform so we can evaluate numbers strictly

1: Parse everything into an AST
2: Evaluate numbers and annotate | with extents
3: Lazily evaluate samples and tables

Is division dynamically scoped or lexically scoped? Other variables?
  I think this might want to be dynamically scoped language

Output can be number (dimensionless) - DC, Waveform, Table<DC, s> or Table<Waveform, s> - i.e. something indexed by time

Rename Sample as Function
  The individual points within an ExplicitFunction are Samples

When used in a VoiceSet, a Sequence or Table should decay to a Function
  A one-element VoiceSet is equivalent to a function everywhere.
  To decay a VoiceSet of more than one element to a function, put it into a sequence (with "division=infinity;" if necessary) and then put the sequence into a one-element VoiceSet.

To avoid clicks and pops, we really want each oscillator to have the same Sample value (or at least the same phase) when sequenced
  That's not possible for general Functions though, so probably shouldn't bother unless it's really annoying, in which case find some more specific way of solving that problem
    Suppose we do Function@Function. The @ should be applied pointwise, and only the frequency should change at each point, not the phase. So .@(f1 | f2 | f3) would do what we want.
  Does a time-dependent @ allow us to write x@major and get (x + x@5/4 + x@3/2)? If so, how can major be defined?
    Almost certainly not - that would mean having the exponential inside the integral evaluate to a (weighted) sum of delta functions, which implies finding the log of a delta function, which
     is defining a whole new object. If we're defining a whole new object we may as well write:
    major = 1 & 5/4 & 3/2;
    chord = sine@C@major;
    decay as necessary

A sequence is really an "outer" function along with a vector of inner functions. The outer function maps the domain onto an index into the vector.
  The inner functions must all have the same domain and value units.
  The outer function has dimensionless value
  The outer function can have a different domain unit to the inner functions, but will only decay to a function if the inner domain unit and outer domain unit are the same.
  | only creates outer functions with integral value.
  Can access the outer function with the unary % operator and modify it to have non-integral values.
  If the outer function evaluates to a+b where a is integral and b is fractional, sequence evaluates to vector[a]*(1-b) + vector[a+1]*b.
    So can glissando just by doing "sequence% = convolve(sequence%, pulse)".
      To define "pulse" we need a way of doing functions of unlimited extent. "division = infinity"?
  Negative indexes or indexes greater than the last wrap around (just as sequences and other functions repeat)
  If the outer function's value has an imaginary part it is ignored, just as with output Functions

A Number is a special case of a Function (one that is constant over the entire domain)
  Except the domain unit is whatever you need it to be.

The [] operator evaluates a function at a value, or composes functions. So sine[0] = 0. x[y][z] = x[y[z]] (associativity of function composition).
  Because all functions have real range, any imaginary part is ignored.
  Because functions repeat, indexing outside the domain wraps around until inside.

Can use a sequence as an LValue:
  a | b = c;
    assigns a to the part of c from 0 to division and
    assigns b to the part of c from division to division*2
  By using | on the left and the right can extract arbitrary sections of a function

Can use a VoiceSet as an LValue:
  a & b = c;
    assigns a to the first voice in c and
    assigns b to the rest
  This is useful for moving several values around at once.

"a | b" repeats after 2*division.
  "a | b" means the same thing as "a | b |". The final "|" can be elided and will be inserted during parsing. A "|" with an empty RHS on the end is ignored.
  Hence we can use "a |" to take the beginning "division" of "a" and repeat it.
  If "a" is a sequence then "a | b" means sequence concatenation rather than slicing.

Implementation of @:
  Don't use http://www.cisl.ucar.edu/css/staff/pauls/papers/FFFT/mscpt.pdf - it's about a different Fractional Fourier Transform
  q:\info\The Fractional Fourier Transform and Its Applications.ppt

Unless the domain unit of a function is 0, the only LCTs we can do are pure real or pure imaginary






