How do we deal with the problem that {} can delimit either a compound statement
 or a compound expression?
  If we just try both then we have O(2^N) behavior in the case of N nested {}s.
  Have a "CompoundStatementOrExpression" that can be converted to either 
   CompoundStatement or CompoundExpression depending on how it turns out, so
   its contents don't need to be re-parsed when it is converted.

Make String a pointer/length combination?
  Or at least avoid having so many indirections - instead of a separate buffer
  class have two versions of SimpleStringImplementation - one that owns its 
  buffer and one that doesn't. The non-owning will also need a String member to
  the owning to increase the reference count.
  Instead of a Buffer class, have some way to access the raw data in the owning
  StringImplementation
  The parsing, CharacterSource stuff should probably be totally separate from
  String. When we create a CharacterSource we can give a String for data and an
  optional File.
  String works on bytes, CharacterSource works on Unicode characters.

Bitmap:
  A Bitmap may own its own bits or just be a pointer into some other Bitmap's
  bits.
  Preserve that information with a flag or with 

Convert _perceptualInput, _perceptualOutput, _perceptualError, _digitalOutput,
and _compositeOutput to Bitmaps. (Also _dataOutput and _compositeData?)

Want to be able to write "offset = (outputSize - inputSize)/2;" in config files

  We can pass it a ConversionSource for templates. The TypeConverter passes
   instantiation information (List<TypeConstructor>) to the ConversionSource
   and receives back a Conversion. The ConversionSource may call back into the
   TypeConverter (e.g. to retrieve Conversions for argument Types).
  We want the TypeConverter to be able to create its own Conversions by
   combining the Conversions passed to it. This way, programmers don't have to
   write a Conversion for every possible pair of types that we might want to
   convert between. We can do this with dynamic programming.
  Creating a new type might change the Conversion for a pair of types - that's
   ok. Allowing the instantiation of a template to do the same seems
   potentially error prone (but might be more logical).
  We need to be careful not to try unbounded conversion paths.
   e.g. if we can convert F<T> to F<F<T>>.
 

Allow array types in config files
  Allow "size={200,150};" syntax for structures and arrays
    Type of {x,y} is Tuple<X,Y>.
    Give structures constructors taking a tuple of their member types
      When assigning a=b; can't just check if the types are the same, need to
       check if TypeOf(b) is convertable to TypeOf(a).
         Write a typeConvertable function

Don't like having to define atoms in each program that uses Symbol
  Define atoms for all programs in Symbol?
  Use C++ classes instead of Symbols?

Array::allocate() doesn't construct which is error prone. Figure out a better
  interface. Why doesn't it construct?

See if we can get rid of some Array::allocate() calls with the new constructor

ConfigFile
  Allow elements of structured values as values
  Make boolean a built-in enumeration
  Operators are unwieldy - keep a list of allowed overloads?
    Add toString methods
    Allow function calls?

Fix up coloured border
  Always make output 640x200 centered

Get RGB version working again, and see what the output looks like on composite
  Try with both sRGB and perceptual

Use linear space for error diffusion but perceptual space for choosing the
  smallest error.
    Diffuse error across entire next block?

Handle PNG formats other than 24-bit sRGB:
  1, 2, 4, 16 bits per channel?
  Monochrome
  Gamma

Try all 6 possibilites for overscanColour in AttributeClashImage constructor.
  Try black as well for monochrome images
    Also for monochrome try +BW, which is not the same
Make brightness, contrast, saturation and tint user-settable
  Knobs?
Have multiple windows: RGB output, NTSC output
Refactor CalcThread with CalcThread in fractal.h as EndableThread?
  Make a BackgroundCalculationImage base class?
Output image scaling
  Scanlines
    DirectX?
Use libpng for input and output
Test for repeated iterations
Fix RGB output for -HRES
Add a Vector size for Windows::Params constructor