; x,y pixel coordinates to screen memory location
; BX = x
; SI = y

  mov ah,[mTable + bx]  ; 4 1 20 17
  shl si,1              ; 2 0  8  2
  shl bx,1              ; 2 0  8  2
  mov di,[xTable + bx]  ; 4 2 24 21
  add di,[yTable + si]  ; 4 2 24 22

; DI = location
; AH = mask

; TODO: generate these programmatically - it'll be smaller

xTable:
  dw 000, 000, 000, 000, 001, 001, 001, 001
  dw 002, 002, 002, 002, 003, 003, 003, 003
  dw 004, 004, 004, 004, 005, 005, 005, 005
  dw 006, 006, 006, 006, 007, 007, 007, 007
  dw 008, 008, 008, 008, 009, 009, 009, 009
  dw 00a, 00a, 00a, 00a, 00b, 00b, 00b, 00b
  dw 00c, 00c, 00c, 00c, 00d, 00d, 00d, 00d
  dw 00e, 00e, 00e, 00e, 00f, 00f, 00f, 00f
  dw 010, 010, 010, 010, 011, 011, 011, 011
  dw 012, 012, 012, 012, 013, 013, 013, 013
  dw 014, 014, 014, 014, 015, 015, 015, 015
  dw 016, 016, 016, 016, 017, 017, 017, 017
  dw 018, 018, 018, 018, 019, 019, 019, 019
  dw 01a, 01a, 01a, 01a, 01b, 01b, 01b, 01b
  dw 01c, 01c, 01c, 01c, 01d, 01d, 01d, 01d
  dw 01e, 01e, 01e, 01e, 01f, 01f, 01f, 01f
  dw 020, 020, 020, 020, 021, 021, 021, 021
  dw 022, 022, 022, 022, 023, 023, 023, 023
  dw 024, 024, 024, 024, 025, 025, 025, 025
  dw 026, 026, 026, 026, 027, 027, 027, 027
  dw 028, 028, 028, 028, 029, 029, 029, 029
  dw 02a, 02a, 02a, 02a, 02b, 02b, 02b, 02b
  dw 02c, 02c, 02c, 02c, 02d, 02d, 02d, 02d
  dw 02e, 02e, 02e, 02e, 02f, 02f, 02f, 02f
  dw 030, 030, 030, 030, 031, 031, 031, 031
  dw 032, 032, 032, 032, 033, 033, 033, 033
  dw 034, 034, 034, 034, 035, 035, 035, 035
  dw 036, 036, 036, 036, 037, 037, 037, 037
  dw 038, 038, 038, 038, 039, 039, 039, 039
  dw 03a, 03a, 03a, 03a, 03b, 03b, 03b, 03b
  dw 03c, 03c, 03c, 03c, 03d, 03d, 03d, 03d
  dw 03e, 03e, 03e, 03e, 03f, 03f, 03f, 03f
  dw 040, 040, 040, 040, 041, 041, 041, 041
  dw 042, 042, 042, 042, 043, 043, 043, 043
  dw 044, 044, 044, 044, 045, 045, 045, 045
  dw 046, 046, 046, 046, 047, 047, 047, 047
  dw 048, 048, 048, 048, 049, 049, 049, 049
  dw 04a, 04a, 04a, 04a, 04b, 04b, 04b, 04b
  dw 04c, 04c, 04c, 04c, 04d, 04d, 04d, 04d
  dw 04e, 04e, 04e, 04e, 04f, 04f, 04f, 04f

yTable:
  dw 00000, 02000, 00050, 02050, 000a0, 020a0, 000f0, 020f0
  dw 00140, 02140, 00190, 02190, 001e0, 021e0, 00230, 02230
  dw 00280, 02280, 002d0, 022d0, 00320, 02320, 00370, 02370
  dw 003c0, 023c0, 00410, 02410, 00460, 02460, 004b0, 024b0
  dw 00500, 02500, 00550, 02550, 005a0, 025a0, 005f0, 025f0
  dw 00640, 02640, 00690, 02690, 006e0, 026e0, 00730, 02730
  dw 00780, 02780, 007d0, 027d0, 00820, 02820, 00870, 02870
  dw 008c0, 028c0, 00910, 02910, 00960, 02960, 009b0, 029b0
  dw 00a00, 02a00, 00a50, 02a50, 00aa0, 02aa0, 00af0, 02af0
  dw 00b40, 02b40, 00b90, 02b90, 00be0, 02be0, 00c30, 02c30
  dw 00c80, 02c80, 00cd0, 02cd0, 00d20, 02d20, 00d70, 02d70
  dw 00dc0, 02dc0, 00e10, 02e10, 00e60, 02e60, 00eb0, 02eb0
  dw 00f00, 02f00, 00f50, 02f50, 00fa0, 02fa0, 00ff0, 02ff0
  dw 01040, 03040, 01090, 03090, 010e0, 030e0, 01130, 03130
  dw 01180, 03180, 011d0, 031d0, 01220, 03220, 01270, 03270
  dw 012c0, 032c0, 01310, 03310, 01360, 03360, 013b0, 033b0
  dw 01400, 03400, 01450, 03450, 014a0, 034a0, 014f0, 034f0
  dw 01540, 03540, 01590, 03590, 015e0, 035e0, 01630, 03630
  dw 01680, 03680, 016d0, 036d0, 01720, 03720, 01770, 03770
  dw 017c0, 037c0, 01810, 03810, 01860, 03860, 018b0, 038b0
  dw 01900, 03900, 01950, 03950, 019a0, 039a0, 019f0, 039f0
  dw 01a40, 03a40, 01a90, 03a90, 01ae0, 03ae0, 01b30, 03b30
  dw 01b80, 03b80, 01bd0, 03bd0, 01c20, 03c20, 01c70, 03c70
  dw 01cc0, 03cc0, 01d10, 03d10, 01d60, 03d60, 01db0, 03db0
  dw 01e00, 03e00, 01e50, 03e50, 01ea0, 03ea0, 01ef0, 03ef0

cTable:
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003
  db 0c0, 030, 00c, 003, 0c0, 030, 00c, 003

rTable:
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc
  db 03f, 0cf, 0f3, 0fc, 03f, 0cf, 0f3, 0fc

; Plot pixel at x,y, colour c
; BX = x
; SI = y
; CL = c
; ES = 0b800
  mov ah,[rTable + bx]  ; 4 1 20 17
  shl si,1              ; 2 0  8  2
  shl bx,1              ; 2 0  8  2
  mov di,[xTable + bx]  ; 4 2 24 21
  add di,[yTable + si]  ; 4 2 24 22
  es: mov al,[di]       ; 3 1 16 15
  and al,ah             ; 2 0  8  3
  not ah                ; 2 0  8  3
  and ah,cl             ; 2 0  8  3
  or al,ah              ; 2 0  8  3
  stosb                 ; 1 1  8 11


; XOR Plot pixel at x,y, colour c
; BX = x
; SI = y
; CL = c
; ES = 0b800
  mov al,[cTable + bx]  ; 4 1 20 17
  shl si,1              ; 2 0  8  2
  shl bx,1              ; 2 0  8  2
  mov di,[xTable + bx]  ; 4 2 24 21
  add di,[yTable + si]  ; 4 2 24 22
  and al,cl             ; 2 0  8  3
  es: xor [di], al      ; 3 2 20 23


; Clear pixel at x,y
; BX = x
; SI = y
; ES = 0b800
  mov al,[rTable + bx]  ; 4 1 20 17
  shl si,1              ; 2 0  8  2
  shl bx,1              ; 2 0  8  2
  mov di,[xTable + bx]  ; 4 2 24 21
  add di,[yTable + si]  ; 4 2 24 22
  es: and [di], al      ; 3 2 20 23


; Horizontal line
; DI = xLeft
; BX = xRight
; SI = y
; AH = c
; ES = 0b800

  shl si,1                ; 2 0  8  2
  mov si,[yTable + si]    ; 4 2 24 21

  mov dl,[leftData + di]  ; 4 1 20 17
  shl di,1                ; 2 0  8  2
  mov di,[xTable + di]    ; 4 2 24 21
  add di,si               ; 2 0  8  3

  mov dh,[rightData + bx] ; 4 1 20 17
  shl bx,1                ; 2 0  8  2
  mov cx,[xTable + bx]    ; 4 2 24 21
  add cx,si               ; 2 0  8  3

  es: mov al,[di]         ; 3 1 16 15
  cmp di,cx               ; 2 0  8  3
  je oneByte              ; 2 0  8  4
  and al,dl               ; 2 0  8  3
  not dl                  ; 2 0  8  3
  and dl,ah               ; 2 0  8  3
  or al,dl                ; 2 0  8  3
  stosb                   ; 1 1  8 15
  mov al,ah               ; 2 0  8  2
  sub cx,di               ; 2 0  8  3
  jcxz noStos             ; 2 0  8  6
  rep stosb               ; 2
noStos:
  es: mov al,[di]         ; 3 1 16 15
done:
  and al,dh               ; 2 0  8  3
  not dh                  ; 2 0  8  3
  and dh,ah               ; 2 0  8  3
  or al,dh                ; 2 0  8  3
  stosb                   ; 1 1  8 15
  ret  ; or jmp

oneByte:
  or dh,dl                ; 2 0  8  3
  jmp done                ; 2 2 16 16

leftData:
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc
  db 000, 0c0, 0f0, 0fc, 000, 0c0, 0f0, 0fc

rightData:
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000
  db 03f, 00f, 003, 000, 03f, 00f, 003, 000

; Store with byte boundaries
  jcxz skip
  rep stosb
skip:

; Using stosw:
  shr cx,1
  jcxz skip
  rep stosw
skip:
  jz noByte
  stosb
noByte:


; Shift timings
  shr si,1              ; 2 0  8  2         8 16 24 32

  mov cl,1              ; 2 0  8  4
  shr si,cl             ; 2 0  8  8+4n     16 20 24 28

  mov bl,[stable + si]  ; 4 1 20 17


; XOR plot horizontal line
; DI = xLeft
; BX = xRight
; SI = y
; AH = c
; ES = 0b800

  shl si,1                ; 2 0  8  2
  mov si,[yTable + si]    ; 4 2 24 21

  mov dl,[leftData + di]  ; 4 1 20 17
  shl di,1                ; 2 0  8  2
  mov di,[xTable + di]    ; 4 2 24 21
  add di,si               ; 2 0  8  3

  mov dh,[rightData + bx] ; 4 1 20 17
  shl bx,1                ; 2 0  8  2
  mov cx,[xTable + bx]    ; 4 2 24 21
  add cx,si               ; 2 0  8  3

  mov ax,es               ; 2 0  8  2
  mov ds,ax               ; 2 0  8  2

  cmp di,cx               ; 2 0  8  3
  je oneByte              ; 2 0  8  4
  mov al,ah               ; 2 0  8  3
  and al,dl               ; 2 0  8  3
  xor [di],al             ; 2 2 16 21
  sub cx,di               ; 2 0  8  3
  jcxz done               ; 2 0  8  6
loopTop:
  xor [di],al             ; 2 2 16 21
  loop loopTop
done:
  and ah,dh               ; 2 0  8  3
  xor [di],al             ; 2 2 16 21
  ret  ; or jmp

oneByte:
  and dh,dl               ; 2 0  8  3
  jmp done                ; 2 2 16 16

leftData:
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003
  db 0ff, 03f, 00f, 003, 0ff, 03f, 00f, 003

rightData:
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff
  db 0c0, 0f0, 0fc, 0ff, 0c0, 0f0, 0fc, 0ff



; Clear screen to black
; ES = 0b800

  xor di,di            ; 2    0     8     3
  mov cx,0fa0          ; 3    0    12     4
  xor ax,ax            ; 2    0     8     3
  rep stosw            ; 2 8000 32008 56009
  mov di,02000         ; 3    0    12     4
  mov cx,0fa0          ; 3    0    12     4
  rep stosw            ; 2 8000 32008 56009


; Move down (location in DI)
  add di,02000         ; 4 0 16  4
  cmp di,04000         ; 4 0 16  4
  jl done              ; 2 0  8  4/16
  sub di,03fb0         ; 4 0 16  4

; Move down (location in BX)
  add bh,020           ; 3 0 12  4
  cmp bh,040           ; 3 0 12  4
  jl done              ; 2 0  8  4/16
  sub bx,03fb0         ; 4 0 16  4

; Move up (location in DI)
  sub di,02000         ; 4 0 16  4
  jge done             ; 2 0  8  4/16
  add di,03fb0         ; 4 0 16  4

; Move up (location in BX)
  sub bh,020           ; 3 0 12  4
  jge done             ; 2 0  8  4/16
  add bx,03fb0         ; 4 0 16  4

; Move left (location in DI, positive mask in AH)
  shl ah,1             ; 2 0  8  2
  shl ah,1             ; 2 0  8  2
  jnc done             ; 2 0  8  4/16
  mov ah,3             ; 2 0  8  4
  dec di               ; 1 0  4  2
done:

; Move right (location in DI, positive mask in AH)
  shr ah,1             ; 2 0  8  2
  shr ah,1             ; 2 0  8  2
  jnc done             ; 2 0  8  4/16
  mov ah,0c0           ; 2 0  8  4
  inc di               ; 1 0  4  2
done:

; Plot DH at DI/AH/BL preserving position
  mov al,[di]          ; 2 1 12 13
  and al,ah            ; 2 0  8  3
  mov dl,dh            ; 2 0  8  4
  and dl,bl            ; 2 0  8  3
  or al,dl             ; 2 0  8  3
  stosb                ; 1 1  8 11
  dec di               ; 1 0  4  2

; XOR Plot DH at DI/AH preserving position
  mov al,dh            ; 2 0  8  4
  and al,ah            ; 2 0  8  3
  xor [di], al         ; 2 2 16 21

; Clear DI/AH preserving position
  and [di], ah         ; 2 2 16 21

; Set DI/AH preserving position
  or [di], ah          ; 2 2 16 21

; XOR plot DI/AH with colour 3
  xor [di], ah         ; 2 2 16 21

; Clear one bit and set another
  and [di], ah         ; 2 2 16 21
  or [di], bl          ; 2 2 16 21

  mov al,[di]          ; 2 1 12 13 <- may actually be faster due to wait states?
  and al,ah            ; 2 0  8  3
  or al,bl             ; 2 0  8  3
  stosb                ; 1 1  8 11
  dec di               ; 1 0  4  2


; Vertical line
vLine0:
  xor [bx], ah         ; 2 2 16 21
  add bx,si            ; 2 0  8  3
  loop vLine1          ; 2 3 20 17
  jmp done
vLine1:
  xor [bx], ah         ; 2 2 16 21
  add bx,di            ; 2 0  8  3
  loop vLine0          ; 2 3 20 17
done:

; Vertical line (ending on an odd line)
vLine:
  xor [bx], ah         ; 2 2 16 21
  xor [bx+02000], ah   ; 4 2 24 25
  add bx,di            ; 2 0  8  3
  loop vLine           ; 2 3 20 17

; Vertical line (unrolled) - 6 IOs per pixel
vLine:
  xor [bx], ah         ; 2 2 16 21
  xor [bx+0x2000], ah  ; 4 2 24 25
  xor [bx+0x50], ah    ; 4 2 24 25
  xor [bx+0x2050], ah  ; 4 2 24 25
  xor [bx+0xa0], ah    ; 4 2 24 25
  xor [bx+0x20a0], ah  ; 4 2 24 25
  ...

; Vertical line MOV (unrolled) - 10 IOs per pixel
  and [bx], al         ; 2 2 16 21
  or [bx], ah          ; 2 2 16 21
  add bx, cx           ; 2 0  8  3
  and [si], al         ; 2 2 16 21
  or [si], ah          ; 2 2 16 21
  add si, cx           ; 2 0  8  3
; 12 IOs per pixel but 2 fewer wait states
  mov al,[bx]          ; 2 1 12 13
  or al,dl             ; 2 0  8  3
  and al,dh            ; 2 0  8  3
  mov [bx],al          ; 2 1 12
  add bx,cx            ; 2 0  8  3


; Wait for horizontal retrace
loop:
  in al,dx             ; 1 1  8  8
  test al,8            ; 1 1  8  4
  jz loop              ; 2 0  8 16
  in al,dx             ; 1 1  8  8
  test al,8            ; 1 1  8  4
  jz loop              ; 2 0  8  4



; Kefrens bars effect
loopTop:
  stosb                ; 1 1  8 11
  lodsb                ; 1 1  8 12
  mov di,ax            ; 2 0  8  2
  mov al,01e           ; 2 0  8  4
  loop loopTop         ; 2 1 12 17

; Kefrens + copper + audio:
; DX = 03d9
; CX = audio position
; BP = audio velocity
; BX = audio waveform
; AH = video paragraph (0)
; SI = Kefrens position buffer
  add cx,bp            ; 2 0  8  3
  mov bl,ch            ; 2 0  8  2
  xlatb                ; 1 1  8 11
  out 042,al           ; 2 1 12 10
  lodsb                ; 1 1  8 12
  mov di,ax            ; 2 0  8  2
  mov al,01e           ; 2 0  8  4
  stosb                ; 1 1  8 11
  mov al,03f           ; 2 0  8  4
  out dx,al            ; 1 1  8  8

; total: 84 cycles - need to save >8 (possibly more, depending on CGA and DRAM refresh wait states)
;  Leave out xlatb? Fix a sawtooth wave?
;  Combine two or more of:
;    Audio data (0-76)
;    Kefrens data (0-255)
;    Kefrens position (0-80ish)
;    Copper data (0-63)
;  Don't try to change everything on every scanline (need to save audio sample if we're going to leave it unchanged)

; Don't change copper: 68 cycles
  add cx,bp            ; 2 0  8  3
  mov al,ch            ; 2 0  8  2
  xlatb                ; 1 1  8 11
  out 042,al           ; 2 1 12 10
  lodsb                ; 1 1  8 12
  mov di,ax            ; 2 0  8  2
  mov al,01e           ; 2 0  8  4
  stosb                ; 1 1  8 11

; Don't change Kefrens: 52 cycles
  add cx,bp            ; 2 0  8  3
  mov al,ch            ; 2 0  8  2
  xlatb                ; 1 1  8 11
  out 042,al           ; 2 1 12 10
  mov al,03f           ; 2 0  8  4
  out dx,al            ; 1 1  8  8

; Audio only every other scanline: 76 cycles
  add cx,bp            ; 2 0  8  3
  mov al,ch            ; 2 0  8  2
  xlatb                ; 1 1  8 11
  out 042,al           ; 2 1 12 10
  xchg sp,ax           ; 1 0  4  3
  lodsb                ; 1 1  8 12
  mov di,ax            ; 2 0  8  2
  mov al,01e           ; 2 0  8  4
  stosb                ; 1 1  8 11
  mov al,03f           ; 2 0  8  4
  out dx,al            ; 1 1  8  8
  xchg sp,ax           ; 1 0  4  3
  out 042,al           ; 2 1 12 10
  lodsb                ; 1 1  8 12
  mov di,ax            ; 2 0  8  2
  mov al,01e           ; 2 0  8  4
  stosb                ; 1 1  8 11
  mov al,03f           ; 2 0  8  4
  out dx,al            ; 1 1  8  8

; Load Kefrens position from IP instead of SI: 80 cycles
  add cx,bp            ; 2 0  8  3
  mov al,ch            ; 2 0  8  2
  xlatb                ; 1 1  8 11
  out 042,al           ; 2 1 12 10
  mov di,9999          ; 3 0 12  4
  mov al,01e           ; 2 0  8  4
  stosb                ; 1 1  8 11
  mov al,03f           ; 2 0  8  4
  out dx,al            ; 1 1  8  8

; Fixed frequency audio: 64 cycles
  lodsb                ; 1 1  8 12
  out 042,al           ; 2 1 12 10
  mov di,9999          ; 3 0 12  4
  mov al,01e           ; 2 0  8  4
  stosb                ; 1 1  8 11
  mov al,03f           ; 2 0  8  4
  out dx,al            ; 1 1  8  8

; Use mov instead of stosb: 76 cycles
  add cx,bp            ; 2 0  8  3
  mov al,ch            ; 2 0  8  2
  xlatb                ; 1 1  8 11
  out 042,al           ; 2 1 12 10
  es: mov [di+39], 01e ; 5 1 24 21
  mov al,03f           ; 2 0  8  4
  out dx,al            ; 1 1  8  8


; TODO: Outline and filled ellipses
; Get some source vector video for a test demo


; Modify palette (DX = 03d9)
  mov al,03f           ; 3 0 12  4
  out dx,al            ; 1 1  8  8




; Trixter's rotozoomer inner loop: 100 cycles
  add cx,si    ; 2 0  8  3
  add dx,bp    ; 2 0  8  3
  mov bl,ch    ; 2 0  8  2
  mov bh,dh    ; 2 0  8  2
  mov al,[bx]  ; 2 1 12 13
  add cx,si    ; 2 0  8  3
  add dx,bp    ; 2 0  8  3
  mov bl,ch    ; 2 0  8  2
  mov bh,dh    ; 2 0  8  2
  mov ah,[bx]  ; 2 1 12 13
  stosw        ; 1 2 12 15

; BL = 0
  add cx,si    ; 2 0  8  3
  add dx,bp    ; 2 0  8  3
  mov al,ch    ; 2 0  8  2
  mov bh,dh    ; 2 0  8  2
  xlatb        ; 1 1  8 11
  stosb        ; 1 1  8 11

