Write my own SID simulator that takes this data as input
  Change pipe finish to samplesSinceFinished
  Write non-periodic file source
    Read from file only on demand - don't keep the entire file in memory
  Write main
  Check that we don't use any frequencies too low for our player
  Write it as a Source and plug it into the audio Sink
    Just use nearest neighbour interpolation like sidplay currently does for now
    Once that's working try band-limited interpolation from the 1MHz SID output and see how that sounds
      If it sounds odd, try resampling some known-good 1MHz data (from a simple upsampling?)
    See what resampling from 1-bit PWM 1.193MHz sounds like to get an idea of whine in demo
    Try generating 256-element waveforms and change lists instead of sound
      We'll have too many waveforms to begin with - write code to combine them
mp3 player
  Use a genetic algorithm to evolve a solution for a given piece of music
    Can use breeding genomes method
    Fitness function:
      1) Sum of squared samplewise differences
      2) Transform to frequency domain and discard phase information
      3) Weight frequencies psycho-acoustically
      4) Reduce weighting of masked out sounds
    Initially try at 44100Hz, 16-bit
      44100Hz : steps of .67Hz
      Change every 256 samples gives 172 changes per second
        3 channels gives 57 changes per second
        1 change = 3 bytes:
          1 byte: waveform
          2 bytes: frequency
        517 bytes per second == 4Kbits/sec == 121Kb for a 4 minute song

      For compression purposes, try some different parameters:
        Number of waveforms
        Number of samples per waveform
        Number of changes per second
        Huffman coding of change

