  Moire:
    Take an image, duplicate it, move the two copies around the screen independently, XOR them together


  lodsw        1 2
  xor ax,[bx]  2 2
  inc bx       1 0
  inc bx       1 0
  stosw        1 2    12

  lodsw        1 2
  xor ax,9999  4 0
  stosw        1 2    10 for 2 bytes    80x50-ish  Use CRTC start address to move one of the images, change initial SI for the other.
                                                    ~24000 bytes of code unrolled
                                                    Double the code so we can scroll to half-word offsets

  lodsb        1 1
  xor al,99    3 0
  stosb        1 1   1.5
  inc di       1 0    9.45 for 2 pixels

  lodsw        1 2
  xor ax,9999  3 0
  stosb        1 1
  inc di       1 0
  mov al,ah    2 0
  stosb        1 1                           Actual to system RAM = 15.5
  inc di       1 0    14+WS for 4 pixels     Actual = 18+2/3.  WS = 3+1/6 = 38 hdots = 19 hdots per byte
                          Min WS = 9 hdots, Mean WS = 17.4375 hdots, Max WS = 24 hdots

Moire2:

  lodsw        1 2
  inc di       1 0
  xor ax,9999  3 0
  stosb        1 1
  inc di       1 0
  mov al,ah    2 0
  stosb        1 1   Actual = 17+2/3 WS = 1+5/6 = 22 hdots = 11 hdots per byte


Screen-based unroll:

  lodsw        1 2
  pop dx       1 2
  xor ax,dx    2 0
  stosb        1 1
  inc di       1 0
  mov al,ah    2 0
  stosb        1 1
  inc di       1 0   IOs = 16, noWS = 17.5, Actual = 20


  lodsw          1 2
  xor ax,[bx+12] 3 2
  stosb          1 1
  inc di         1 0
  mov al,ah      2 0
  stosb          1 1
  inc di         1 0   IOs = 16, Actual = 20


  pop ax          1 2
  xor ax,[bp+12]  3 2
  mov [di+2],al   3 1
  mov [di+4],ah   3 1  IOs = 16, Actual = 20


  mov [dl+2],al  is 18 cycles to system, 24 cycles to CPU. WS = 6 cycles = 18 hdots per byte


  pop ax          1 2
  xor ax,[bp+12]  3 2
  stosb           1 1
  inc di          1 0
  mov al,ah       2 0
  stosb           1 1
  inc di          1 0  IOs = 16, noWS = 16, Actual = 18+2/3. WS = 2+2/3 = 32 hdots = 16 hdots per byte



    47 scanlines => 4 scanlines per row
      Possible modes:
        * Text -HRES: 80*47 (1880 pixels, many colours with strange interactions - stick to 00 and b1, 5:3 PAR)
        * Text -HRES: 80*58 half-width (3 scanlines, 4640 pixels with 16 colours, 10:9 PAR)                          <= 2*40*58*8 = 37120 bytes code, 2*40*58*2 = 9280 bytes data
            lodsb       1 1
            xor al,99   3 0
            stosb       1 1
            inc di      1 0  8 per 2 pixels
        * 2bpp: 40*94 (15040 pixels, 4 colours, 5:6 PAR)
        * 2bpp with doubled scanlines: 56*70 (~15000 pixels, 4 colours, 5:12 PAR - tall)                             <= 8*28*70*10 = 156800 bytes code, 8*28*70*2 = 31360 bytes data
        * 2bpp with quadrupled scanlines: 80*47 (~15000 pixels, 4 colours, 5:24 PAR - rather tall)
        * 1bpp: 40*94 (30080 pixels, 2 colours - tall)                                                                  16*40*94*10 = 601600 bytes code, 16*40*94*2 = 120320 bytes data
        * 1bpp with doubled scanlines: 56*70 (~30000 pixels, 4 colours, 5:24 PAR - rather tall)
        * 1bpp with quadrupled scanlines: 80*47 (~30000 pixels, 4 colours, 5:24 PAR - very tall)
        * Text +HRES: 160*29 half-width (6 scanlines, 4640 pixels with 16 colours, 5:18 PAR - rather tall, snow)






Suppose we have a picture that is 124 pixels wide. 80 displayed, 22 border on each side. Then we need 94 vertically

raw picture = 5828 bytes
unroll = 32054 bytes
2 of each = 75764 bytes


80x94:

raw picture = 3760 bytes
unroll = 20680 bytes
2 of each = 48880 bytes


Plan:
  80x94 picture
  80x50 viewport
  Maximum radius 22
  For each frame, _motion has:
    Initial SI (including which copy of the picture)
    Initial DI (0 or 3fff)
    Call location (including unroll copy) - end is placed here plus 11000 bytes
  Wait for vertical refresh
  Inject ret and restore
  Decompress picture into two copies of raw picture and two unrolled loops
  Decompress motion

Extensions:
  Disable DRAM refresh
    Check how much time we'll be idle
  Integrate with music
  Allow using two different images
  Allow images wider than 80 pixels
    Inject rets
      Per scanline:
        mov [bx+12],99  ; 4 1  times 2
        ret             ; 1 2
        add si,bp       ; 2 0
        call bx         ; 2 1   total 18
      ~700 IOs
    Inject "add si, bp" and jmp
        mov [bx+12], 9999  ; 5 2  times 4
        add si, bp         ; 2 0
        jmp 12             ; 2 1  total 33  - doesn't fit except without DRAM refresh



PSP: 256
Code: ?
Motion: 3352
Picture: 5129*2 bytes
Unroll: 5129*10

If picture ends up as 8kB or more, need to rethink the flags




  Screen edge (*50):
    add si,dx  ; 2 0        Any
    jmp $+X    ; 2 1        Up to 128 bytes => 44 pixels





   9A cp          CALL cp                 36                                    36
   E8 cw          CALL cw                 32                                    20    (measured, Zen has EU=23 - 8 will be loading the next instruction)
   FF /2          CALL rmw              12+8 13+EA+8+8
   FF /3          CALL mp                 53+EA




0192:01cb





0x3D18 == 15640
Initial position should be





With wide pictures, what do we do if the unroll-plane byte offset is 1?
  Have two more unroll sections?




CGA RAM

Moire                074 +080  +081  +081  +080  +081
Moire2               074 +080  +080  +080  +081  +081
MoireA               080 +001  +000  +001  079 +119  080 +000
MoireA2              079 +119  080 +000  +001  +000  +001

System RAM

Moire                062 +000  +000  +000  +000  +000
Moire2               062 +000  +000  +000  +000  +000
MoireA               070 +000  +000  +000  +000  +000
MoireA2              070 +000  +000  +000  +000  +000





To minimize the wait state time, we want the number of hdots between successive CGA accesses to be <=8+16*n, i.e.:
hdots  cycles   IOs
   8    2+2/3     2/3
  24    8       2
  40   13+1/3   3+1/3
  56   18+2/3   4+2/3
  72   24       6
  88   29+1/3   7+1/3
 104   34+2/3   8+2/3
 120   40      10
 136   45+1/3  11+1/3
 152   50+2/3  12+2/3
 168   56      14
 184   61+1/3  15+1/3
 200   66+2/3  16+2/3
 216   72      18
 232   77+1/3  19+1/3
 248   82+2/3  20+2/3
The time without the wait states would be:
  0    0
 16    5+1/3
 32   10+2/3
 48   16
 64   21+1/3
 80   26+2/3
 96   32
112   37+1/3
128   42+2/3
144   48
160   53+1/3
176   58+2/3
192   64
208   69+1/3
224   74+2/3
240   80

Natural       Actual 0    WS 0         Actual 1    WS 1         Actual 2    WS 2
dot cy IOs    dot cy IOs  dot cy IOs   dot cy IOs  dot cy IOs   dot cy IOs  dot cy IOs
 12  4 1       24  8 2     12  4 1      24  8 2     12  4 1      24  8 2     12  4 1
 15  5 1+1/4   24  8 2      9  3   3/4  24  8 2      9  3   3/4  40
 18  6 1+1/2
 21  7 1+3/4
 24  8 2
 27  9 2+1/4
 30 10 2+1/2
 33 11 2+3/4
 36 12 3
 39 13 3+1/4
 42 14 3+1/2
 45 15 3+3/4
 48 16 4
 51 17 4+1/4
 54 18 4+1/2





mov ax,1234  stosw     4 2
mov [di+2],1234        5 2
movsw                  1 4






Picture size: 5327 bytes = ~88 x 120

Pictures: 5327*2
Motion: 3352
Code: 569
Unroll: 10000 + 1 + 50*6
= 24876



0192:38f6
0192:6114




896 298+2/3 74+2/3 56
912 304     76     57
928 309+1/3 77+1/3 58
944 314+2/3 78+2/3 59
960 320     80     60
976 325+1/3 81+1/2 61


With sound:

Moire16              325 +040  +040  +040  +040  +040
Moire16Sys           280 +000  +000  +000  +000  +000  WS = 41+1/3 cycles = 5+1/6 per write

Without sound:

Moire16              298 +080  +083  +080  +081  +083
Moire16Sys           256 +000  +000  +000  +000  +000  WS = 42+2/3 cycles = 5+1/3 per write

To get it to 304 cycles, need WS = 20 cycles = 2.5 per write



28 pixels plus audio in 581+1/3 cycles = 2 scanlines - 26+2/3 cycles

1048 IOs for 262 samples = just under 14 scanlines.






                     4116  4164 41256
Cell decay time (ms) 1.93  3.86  7.72
IOs for decay        2304  4608  9126
IOs for rep lodsw     272   544  1088

IOs for t1 refresh =

8 scanlines = 608 IOs
