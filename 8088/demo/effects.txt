Video:
  CRTC restarts
  Split screen graphics and 40-column text mode
  Particle system
    Position field
    Velocity field
  Static
  Unmoving snow
  Lines
  Filled polygons
    Flat-shaded 3D
    Glenz
  Video
  Wikipedia list:
    Old skool:
      Raster bars
      Kefrens bars - this one's fairly easy: combine with raster bars and/or 1-channel PWM synthesizer
      Scrollers
      Sprites
      Starfield
      Smooth horizontal waving of graphics images in a per-scanline basis
      Shadebobs
      Infinite bobs
      Plasma
      Moire
      Zoomers
      Simple rotating 3D objects rendered in dots, lines or filled polygons.
      Spline
      Glenz
      Blenk
      Rubber
    Chunky pixel:
      Effects based on static screen-to-texture lookup tables
        Texture-mapped tunnels and other objects rotating around their axis of symmetry
        Wobblers, rotators and other similar effects for 2D images
        Objects that reflect or refract underlying bitmap images
      Texture-mapped tunnel with freely moving camera, typically based on realtime raytracing
      Rotozoomer
      Mandelbrot zoomer
      Fire effect and other effects based on 2D filters and feedback
      Heightfield landscape (often called "voxel landscape")
      2D bump mapping
      Metaballs
    Display hacks:
      Munching squares
      Smoking clover
  oldskool.org list: http://www.oldskool.org/demos/explained/demo_graphics.html
  Pouet list: http://www.pouet.net/topic.php?which=7523


Sound:
  Simple t2 beeps
  Arpeggios
  Digger-style music
  PWM audio
  4-channel player
    1/2-channel player
  Effects
    Liquid


+HRES -GRPH 1-scanline precalculated image
  Only have 100 scanlines worth - use duplicated lines
    Reflected image in bottom half of screen? Water effects?

-HRES -GRPH 1-scanline precalculated image
  160x200x16 mode with attribute clash

Move something around the screen by using CRTC position registers


Per-pixel effects:
  Rotozoomer
  Moire:
    Take an image, duplicate it, move the two copies around the screen independently, XOR them together


  lodsw        1 2
  xor ax,[bx]  2 2
  inc bx       1 0
  inc bx       1 0
  stosw        1 2    12

  lodsw        1 2
  xor ax,9999  4 0
  stosw        1 2    10 for 2 bytes    80x50-ish  Use CRTC start address to move one of the images, change initial SI for the other.
                                                    ~24000 bytes of code unrolled
                                                    Double the code so we can scroll to half-word offsets

    47 scanlines => 4 scanlines per row
      Possible modes:
        * Text -HRES: 80*47 (1880 pixels, many colours with strange interactions - stick to 00 and b1, 5:3 PAR)
        * Text -HRES: 80*58 half-width (3 scanlines, 4640 pixels with 16 colours, 10:9 PAR)                          <= 2*40*58*8 = 37120 bytes code, 2*40*58*2 = 9280 bytes data
            lodsb       1 1
            xor al,99   3 0
            stosb       1 1
            inc di      1 0  8 per 2 pixels
        * 2bpp: 40*94 (15040 pixels, 4 colours, 5:6 PAR)
        * 2bpp with doubled scanlines: 56*70 (~15000 pixels, 4 colours, 5:12 PAR - tall)                             <= 8*28*70*10 = 156800 bytes code, 8*28*70*2 = 31360 bytes data
        * 2bpp with quadrupled scanlines: 80*47 (~15000 pixels, 4 colours, 5:24 PAR - rather tall)
        * 1bpp: 40*94 (30080 pixels, 2 colours - tall)                                                                  16*40*94*10 = 601600 bytes code, 16*40*94*2 = 120320 bytes data
        * 1bpp with doubled scanlines: 56*70 (~30000 pixels, 4 colours, 5:24 PAR - rather tall)
        * 1bpp with quadrupled scanlines: 80*47 (~30000 pixels, 4 colours, 5:24 PAR - very tall)
        * Text +HRES: 160*29 half-width (6 scanlines, 4640 pixels with 16 colours, 5:18 PAR - rather tall, snow)





  Static screen-to-texture lookup tables:

  mov ax,[9999]   3 2
  stosw           1 2  8 for 2 pixels   80x66  Modify DS to change source texture position

    * Text -HRES: 40*58 full-width (3 scanlines, 2320 pixels with ~232 colours, 20:9 PAR)  <=
    * 2bpp: 40*58 (3 scanlines repeated, 2320 pixels with 4 colours, 20:9 PAR)

  mov al,[9999]   3 1
  stosb           1 1  6 per pixel

    * 2bpp: 80*39 (5 scanlines repeated, 3120 pixels with 4 colours + h. stippling, 2:3 PAR)              <=?

  mov al,[9999]   3 1
  stosb           1 1
  inc di          1 0  7 per pixel

    * Text -HRES: 40*67 full-width (3 scanlines, 2680 pixels with ~120 colours, 20:9 PAR)  <=
    * Text +HRES: 80*33 full-width (6 scanlines, 2680 pixels with ~120 colours, snow, 5:9 PAR)


  mov ax,[9999+bx]  4 2
  stosw             1 2  9 for 2 pixels

  mov al,[9999+bx]  4 1
  stosb             1 1  7 per pixel   40x80

