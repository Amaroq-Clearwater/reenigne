; Tricks used in this player:
;   Pre-computed offsets table
;   8.8 waveform addressing
;   64Kb sideways sample table
;   Automatically interspersed outputs
;   Entire frame unrolled
;   No timer interrupt - data stored below SP
;   16 bytes per frame used, segment increments for large data
;   No volume table - waveforms are volume-dependent
;   Time-major mixing (as opposed to voice-major) to allow accumulation in a register

; Low 8 bits of SI (BP/CX/DX/DI) = waveform number
; High 8 bits of SI (BP/CX/DX/DI) = sample within waveform (high 8 bits of count)
; High 8 bits of BX (stack data) = offset sample within waveform
; Low 8 bits of BX (stack data) = 0
; Each frame, get 16 bytes of tune/screen data from ES: and increment ES

; SS data:
;   Voice 0 sample 0 position      2 <- BP-129 in per-frame update    ==0
;   Voice 1 sample 0 position      2
;   Voice 2 sample 0 position      2
;   Voice 3 sample 0 position      2
;   Voice 0 sample 1 position      2
;   Voice 1 sample 1 position      2
;   Voice 2 sample 1 position      2
;   Voice 3 sample 1 position      2
;   ...
;   Voice 0 sample s-1 position    2
;   Voice 1 sample s-1 position    2
;   Voice 2 sample s-1 position    2
;   Voice 3 sample s-1 position    2
;   Saved BP for per-block update  2 s*8-129 -12
;   Voice 0 s*velocity             2 s*8-127 -10
;   Voice 1 s*velocity             2 s*8-125  -8
;   Voice 2 s*velocity             2 s*8-123  -6
;   Voice 3 s*velocity             2 s*8-121  -4
;   Saved BP                       2 s*8-119  -2
;   Voice 0 position low           1 s*8-117   0 <- BP in per-block update
;   Voice 1 position low           1 s*8-116   1
;   Voice 2 position low           1 s*8-115   2
;   Saved DI                       2 s*8-114   3
;   Voice 3 position low           1 s*8-112   5

; ES (song) data:
;   Voice 0 velocity               2 0000
;   Voice 0 waveform               1 0002
;   Voice 1 velocity               2 0003
;   Voice 1 waveform               1 0005
;   Voice 2 velocity               2 0006
;   Voice 2 waveform               1 0008
;   Voice 3 velocity               2 0009
;   Voice 3 waveform               1 000b
;   Screen update position         2 000c
;   Screen update value            2 000e

; DS (waveform) data:
;   Buffer position 0              1 0000
;   Waveform 1 sample 0            1 0001
;   Waveform 2 sample 0            1 0002
;   ...
;   Waveform 0xff sample 0         1 00ff
;   Buffer position 1              1 0100
;   Waveform 1 sample 1            1 0101
;   Waveform 2 sample 1            1 0102
;   ...
;   Waveform 0xff sample 1         1 01ff
;   .....
;   Buffer position 0xff           1 ff00
;   Waveform 1 sample 0xff         1 ff01
;   Waveform 2 sample 0xff         1 ff02
;   ...
;   Waveform 0xff sample 0xff      1 ffff


; Per sample mixing
  mov si,bp           2 0
  pop bx              1 2
  mov ah,[si+bx]      2 1
  mov si,cx           2 0
  pop bx              1 2
  add ah,[si+bx]      2 1
  mov si,dx           2 0
  pop bx              1 2
  add ah,[si+bx]      2 1
  mov si,di           2 0
  pop bx              1 2
  add ah,[si+bx]      2 1
  mov [0000],ah       4 1  37 cycles


; Per sample output
  mov al,[0000]       3 1
  out 042,al          2 1  7 cycles


; Per block update
  pop bp              1 2
  pop bx              1 2
  add [bp],bl         2 2
  adc [bp-1],bh       3 2
  pop bx              1 2
  add [bp+1],bl       3 2
  adc ch,bh           2 0
  pop bx              1 2
  add [bp+2],bl       3 2
  adc dh,bh           2 0
  pop bx              1 2
  add [bp+5],bl       3 2
  adc [bp+4],bh       3 2
    ; Per frame update occurs here - BX, BP and DI are available
  mov di,[bp+3]       3 2
  mov bp,[bp-2]       3 2  58 cycles


; Per frame update - voice 0
  mov bp,129          3 0
  mov bx,[bp+s*8-118] 3 2    ; Works as long as s < 30
  xchg bh,bl          2 0
  mov di,bx           2 0
  es: mov si,[0000]   5 2
    mov [bp-128+0*8],bh 3 1
    add bx,si           2 0
    mov [bp-128+1*8],bh 3 1
    add bx,si           2 0
    ...
    mov [bp-136+s*8],bh 3 1
    add bx,si           2 0
  xchg bh,bl          2 0
  mov [bp+s*8-118],bx 3 2
  xchg bh,bl          2 0
  sub bx,di           2 0
  mov [bp+s*8-127],bx 3 2
  es: mov bl,[0002]   5 1
  mov [bp+s*8-119],bl 3 1  45+6*s cycles

; Per frame update - voice 1
  mov bl,[bp+s*8-116] 3 1
  mov bh,ch           2 0
  mov di,bx           2 0
  es: mov si,[0003]   5 2
    mov [bp-126+0*8],bh 3 1
    add bx,si           2 0
    mov [bp-126+1*8],bh 3 1
    add bx,si           2 0
    ...
    mov [bp-134+s*8],bh 3 1
    add bx,si           2 0
  mov [bp+s*8-116],bl 3 1
  mov ch,bh           2 0
  sub bx,di           2 0
  mov [bp+s*8-125],bx 3 2
  es: mov cl,[0005]   5 1  34+6*s cycles

; Per frame update - voice 2
  mov bl,[bp+s*8-115] 3 1
  mov bh,dh           2 0
  mov di,bx           2 0
  es: mov si,[0006]   5 2
    mov [bp-124+0*8],bh 3 1
    add bx,si           2 0
    mov [bp-124+1*8],bh 3 1
    add bx,si           2 0
    ...
    mov [bp-132+s*8],bh 3 1
    add bx,si           2 0
  mov [bp+s*8-115],bh 3 1
  mov dh,bh           2 0
  sub bx,di           2 0
  mov [bp+s*8-123],bx 3 2
  es: mov dl,[0008]   5 1  34+6*s cycles

; Per frame update - voice 3
  mov bx,[bp+s*8-113] 3 2
  xchg bh,bl          2 0
  mov di,bx           2 0
  es: mov si,[0009]   5 2
    mov [bp-122+0*8],bh 3 1
    add bx,si           2 0
    mov [bp-122+1*8],bh 3 1
    add bx,si           2 0
    ...
    mov [bp-130+s*8],bh 3 1
    add bx,si           2 0
  xchg bh,bl          2 0
  mov [bp+s*8-113],bx 3 2
  xchg bh,bl          2 0
  sub bx,di           2 0
  mov [bp+s*8-121],bx 3 2
  es: mov bl,[000b]   5 1
  mov [bp+s*8-114],bl 3 1  42+6*s cycles

; Per frame update - screen and loop
  es: mov di,[000c]   5 2
  es: mov bx,[000e]   5 2
  mov bp,es           2 0
  mov si,0b800        3 0
  mov es,si           2 0
  es: mov [di],bx     3 2
  inc bp              1 0
  cmp bp,9999         4 0
  je end              2 0
  mov es,bp           2 0
  jmp looptop         2 2  39 cycles
end:





(22538 cycles - 480)/786 = 28 iterations = 560 samples in 20ms = 28KHz

Output: 5 cycles per sample = 2800 cycles

(22538 cycles - 480 - 2800)/786 = 24 iterations = 480 samples in 20ms = 24KHz



Cycles:
  Mixing and output: 44*s*b (minus some buffering optimizations)
  Per block update: 58*b
  Recomputing table: 24*s
  Per frame: 194

Total cycles = 22538 = t

  t = 44*s*b + 58*b + 24*s + 194

(t - 24*s - 194) = 44*s*b + 58*b = (44*s + 58)*b

b = (t - 24*s - 194)/(44*s + 58)

s   b   r
23  20  23.0KHz
22  21  23.1KHz  44*22*21+58*21+24*22+194 = 22268 = 50.6Hz  c'=52  total = 22689  spare = 421 cycles  c = 49.1      49.67Hz      buffer needed = 24-25 samples   22.9KHz
21  22  23.1KHz  44*21*22+58*22+25*21+194 = 22323 = 50.5Hz  c'=52  total = 22689  spare = 366 cycles  c = 49.1      49.67Hz      buffer needed = 22-23 samples   22.9KHz
20  23  23.0KHz
19  24  22.8KHz

54 cycles per sample (51 with refresh) is 22.096KHz


c




Need an assembler that can piece all this together:
  Inputs:
    Samples per block = s
    Blocks per frame = b
    Cycles per sample = c
    Precise sample timing flag
    Refresh position
  Algorithm:
    Emit lines of code one-by-one
    After each line, determine if we need to do an output
      Determine if a refresh occurred
      Insert NOPs if necessary for precise sample timing



  mov si,di           2 0
  mov [0000],ah       4 1
  mov al,[0000]       3 1
  out 042,al          2 1   14 cycles

  mov di,[0000]       3 2
  mov [si+2],ah       3 1
  lodsb               1 1
  out 042,al          2 1   14 cycles


Optimization: Save DX during frame update (10 cycles), set DX to 042 (3 cycles) and use "out dx,al" instead of "out 042,al" during frame update (~-23 cycles)
Optimization: Instead of having 300-400 NOPs, compute a few more samples
  Need to find the unmultiplied velocity from the old ES (or save it)
Optimization: Skip the buffer if we have few enough samples pending
Optimization: If the "jmp" turns out to stall the CPU for a non-integer number of PIT cycles (3.75?) then use CGA wait states re-align CPU and PIT? Or multiple JMPs?
  Check we're not stalling the BIU elsewhere too
