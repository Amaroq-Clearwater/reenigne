Cycles per ccycle            4/3    =   1.3333
Frames per buffer            1      =   1
Pixels per cycle             4      =   4
Fields per buffer            1      =   1
Pixels per ccycle            3      =   3
Cycles per line            228      = 228
CCycles per line           304      = 304
Pixels per line            912      = 912
Lines per second       3281250/209  =  15.6998 K
Cycles per second     39375000/11   =   3.5795 M
CCycles per second    52500000/11   =   4.7727 M
Pixels per second    157500000/11   =  14.3182 M



TCycles per second    13125000/11   =   1.1932 M
CCycles per tCycle           4      =   4
Pixels per tCycle           12      =  12
TCycles per line            76      =  76
Samples per block          256      = 256
Blocks per segment       16384      =  16.384  K


TCycles per sample  Samples per second         CCycles per sample  blocks per second             Seconds per segment
        1           13125000/11  =   1.1932 M          4           1640625/352    =   4.6609 K   5750784/1640625 =   3.5052
        2            6562500/11  = 596.5909 K          8           1640625/704    =   2.3304 K  11501748/1640625 =   7.0106
        4            3281250/11  = 298.2955 K         16           1640625/1408   =   1.1652 K  23003496/1640625 =  14.0212
        8            1640625/11  = 149.1477 K         32           1640625/2816   = 582.6083    46006992/1640625 =  28.0424
       16            1640625/22  =  74.5739 K         64           1640625/5632   = 291.3042    92013984/1640625 =  56.0847
       18            2187500/33  =  66.2879 K         72           1640625/6336   = 258.9370   103514112/1640625 =  63.0943  (1m 3s)
       32            1640625/44  =  37.2869 K        128           1640625/11264  = 145.6521   184027968/1640625 = 112.1694  (1m 52s)
       36            1093750/33  =  33.1439 K        144           1640625/12672  = 129.4685   207028224/1640625 = 126.1886  (2m 6s)   <= 1 voice   505.7364 mHz - 16.5720 KHz
       54            2187500/99  =  22.0960 K        216                                                                               <= 2 voices  337.1576 mHz - 11.0480 KHz
       64            1640625/88  =  18.6435 K        256           1640625/22528  =  72.8260   368055936/1640625 = 224.3389  (3m 44s)
       72             546875/33  =  16.5720 K        288           1640625/25344  =  64.7343   414056448/1640625 = 252.3773  (4m 12s)  <= 3 voices  252.8682 mHz -  8.2860 KHz
       76            3281250/209 =  15.6998 K        304           1640625/26752  =  61.3272   438304768/1640625 = 267.1572  (4m 27s)
       90             437500/33  =  13.2576 K        360           1640625/31680  =  51.7874   517570560/1640625 = 315.4716  (5m 15s)  <= 4 voices
      108            1093750/99  =  11.0480 K        432                                                                               <= 5 voices
      126             312500/33  =   9.4697 K        504                                                                               <= 6 voices
      128            1640625/176 =   9.3217 K        512           1640625/45056  =  36.4130   736111872/1640625 = 448.6777  (7m 28s)
      256            1640625/352 =   4.6609 K       1024           1640625/90112  =  18.2065  1472223744/1640625 = 897.3554 (14m 57s)


Data block:
  0 = counter1 low
  1 = counter1 high
  2 = counter2 low
  3 = counter2 high
  4 = counter3 low
  5 = counter3 high
  6 = counter4 low
  7 = counter4 high

Implementation 1:
  Positions at [0]
  add w[si], imm
  68 cycles per channel sample

CX = sample counter
DX = speaker port
BX = waveform table pointer (BL = 0)
AX = (AH = sample accumulator), (AL = temporary)
SI = data block pointer (data block is at address DS:0)
DI = command address
BP = command data
SP = song pointer
CS = code segment
DS = data segment - same as code address
SS = song
ES = screen segment



Instruction                  Bytes  IO-bytes  BIU-cycles  EU-cycles

looptop:
  mov [di],bp                  2       2          16          18
  es: mov [di],bp              3       2          20          20
  nop                          1       0           4           3
  nop                          1       0           4           3
tempo:
  sub cx,9999                  4       0          16           4

waveform1:
  mov bh,99                    2       0           8           4
velocity1:
  add w[si],9999               4       4          32          30
  inc si                       1       0           4           2
  lodsb                        1       1           8          12
  xlatb                        1       1           8          11
  out dx,al                    1       1           8           8

waveform2:
  mov bh,99                    2       0           8           4
velocity2:
  add w[si],9999               4       4          32          30
  inc si                       1       0           4           2
  lodsb                        1       1           8          12
  xlatb                        1       1           8          11
  out dx,al                    1       1           8           8

waveform3:
  mov bh,99                    2       0           8           4
velocity3:
  add w[si],9999               4       4          32          30
  inc si                       1       0           4           2
  lodsb                        1       1           8          12
  xlatb                        1       1           8          11
  out dx,al                    1       1           8           8

waveform4:
  mov bh,99                    2       0           8           4
velocity4:
  add w[si],9999               4       4          32          30
  inc si                       1       0           4           2
  lodsb                        1       1           8          12
  xlatb                        1       1           8          11
  out dx,al                    1       1           8           8

  xor si,si                    2       0           8           3
  loop looptop                 2       2          16/8        17/5 (2 IOs to repopulate prefetch queue)

  pop di                       1       2          12          12
  pop bp                       1       2          12          12
;  stosw                        1       2          12          15

end:
  jmp waveform1                2       2          16          15  (2 IOs to repopulate prefetch queue)

; total 60 bytes

; TODO:
;   Can we get better cx behaviour by using jcxz instead of loop and moving nextCommand immediately before waveform1?
;   Put in an "and cl,???" as well?
;   Determine the number of possible tempos
;   Can we get screen writes as well?
;     Problem: wait states. What are they? Present even in 80-column text mode?


; 1 byte at a time
screenWrite:
  mov ax,ac00                  3       0          12           4
  mov es,ax                    2       0           8           2
  mov al,99                    2       0           8           4
  mov b[di],al                 2       1          12          14
  mov ax,cs                    2       0           8           2
  mov es,ax                    2       0           8           2
  nop                          1       0           4           3
  nop                          1       0           4           3
  nop                          1       0           4           3

; 2 bytes at a time
screenWrite:
  mov ax,ac00                  3       0          12           4
  mov es,ax                    2       0           8           2
  mov ax,9999                  3       0          12           4
  mov w[di],ax                 2       2          16          18
  mov ax,cs                    2       0           8           2
  mov es,ax                    2       0           8           2
  nop                          1       0           4           3

Screen memory is b8000 to bbfff
If we use page ac00 then screen memory will be c000-ffff



  mov si,9999                  3       2          20           4
  lodsb                        1       1           8          12
  mov [cccc],si                4       2          24          19
  nop                          1       0           4           3
  nop                          1       0           4           3
  nop                          1       0           4           3
  nop                          1       0           4           3



Commands:
  tempo+2     xx xx  - change how often new song doublewords are read
  waveform1   xx B7  - change volume and timbre of voice 1
  velocity1+2 xx xx  - change pitch of voice 1
  waveform2   xx B7  - change volume and timbre of voice 2
              88 F8  - use ring modulation
  velocity2+2 xx xx  - change pitch of voice 2
  waveform3   xx B7  - change volume and timbre of voice 3
  velocity3+2 xx xx  - change pitch of voice 3
  waveform4   xx B7  - change volume and timbre of voice 4
  velocity4+2 xx xx  - change pitch of voice 4
  end         EB xx  - end of song


Waveform patterns - we can fit in 255
  Waveforms 1, 2 and 3:
    Silence (9)
    18 volume levels for each of:
      Square
      Sine
      Sawtooth
      Triangle
      Noise
      Major
      Minor
  Waveform 4:
    36 volume levels for each of:


Implementation 2:
  Positions at [0]
  lodsw / add ax,imm / stosw
  68 cycles per channel sample

CX = sample counter
DX = speaker port
BX = waveform table pointer
AX = (AH = sample accumulator), (AL = temporary)
SI = data block pointer (data block is at address DS:0)
DI = data block pointer (data block is at address DS:0)
SP = song pointer
BP =

looptop:
  lodsw                        1       2          12          16
velocity1:
  add ax,9999                  3       0          12           4
  stosw                        1       2          12          15
  mov bl,ah                    2       0           8           2
waveform1:
  mov bh,99                    2       0           8           4
  xlatb                        1       1           8          11
  out dx,al                    1       1           8           8

  lodsw                        1       2          12          16
velocity2:
  add ax,9999                  3       0          12           4
  stosw                        1       2          12          15
  mov bl,ah                    2       0           8           2
waveform2:
  mov bh,99                    2       0           8           4
  xlatb                        1       1           8          11
  out dx,al                    1       1           8           8

  lodsw                        1       2          12          16
velocity3:
  add ax,9999                  3       0          12           4
  stosw                        1       2          12          15
  mov bl,ah                    2       0           8           2
waveform3:
  mov bh,99                    2       0           8           4
  xlatb                        1       1           8          11
  out dx,al                    1       1           8           8

  lodsw                        1       2          12          16
velocity4:
  add ax,9999                  3       0          12           4
  stosw                        1       2          12          15
  mov bl,ah                    2       0           8           2
waveform4:
  mov bh,99                    2       0           8           4
  xlatb                        1       1           8          11
  out dx,al                    1       1           8           8

  xor si,si                    2       0           8           3
  xor di,di                    2       0           8           3
  loop looptop                 2       2          12/8        17/5 (1 IO to repopulate prefetch queue)

  sub ch,ch                    2       0           8           3
  loop looptop                 2       1          12          17  (1 IO to repopualte prefetch queue)

total:                        57                 308









Implementation 3:
  Positions in cx, si, di and bp
  add r,imm
  56 cycles per channel sample

AX = various
BX = table pointer (BL = 0)
CX = channel 1 velocity
DX = speaker port (0x0042)
SI = channel 2 velocity
DI = channel 3 velocity
BP = channel 4 velocity

velocity1:
  add cx,9999                  4       0          16           4
  mov al,ch                    2       0           8           2
waveform1:
  mov bh,99                    2       0           8           4
  xlatb                        1       1           8          11
  out dx,al                    1       1           8           8
  nop                          1       0           4           3
  nop                          1       0           4           3
  nop                          1       0           4           3

velocity2:
  add si,9999                  4       0          16           4
  mov ax,si                    2       0           8           2
  mov al,ah                    2       0           8           2
waveform2:
  mov bh,99                    2       0           8           4
  xlatb                        1       1           8          11
  out dx,al                    1       1           8           8
  nop                          1       0           4           3
  nop                          1       0           4           3
  nop                          1       0           4           3

velocity3:
  add di,9999                  4       0          16           4
  mov ax,di                    2       0           8           2
  mov al,ah                    2       0           8           2
waveform3:
  mov bh,99                    2       0           8           4
  xlatb                        1       1           8          11
  out dx,al                    1       1           8           8
  nop                          1       0           4           3
  nop                          1       0           4           3
  nop                          1       0           4           3

velocity4:
  add bp,9999                  4       0          16           4
  mov ax,bp                    2       0           8           2
  mov al,ah                    2       0           8           2
waveform4:
  mov bh,99                    2       0           8           4
  xlatb                        1       1           8          11
  out dx,al                    1       1           8           8

;  nop                          1       0           4           3
;  nop                          1       0           4           3
;  nop                          1       0           4           3
;  nop                          1       0           4           3
;  nop                          1       0           4           3
  dec w[counter]               4       4          32          29
  jnz looptop                  2       0                       4/16




  out dx,al                    1       1           8           8
  out 042,al                   2       1          12          10


  xlatb                        1       1           8          11
  mov al,b[bx]                 2       1          12          13






Implementation 4:
  Positions in CS
  Separate high and low bytes
  72 cycles per channel sample
  No registers


                      +---- position high
                      |  +- waveform
                      v  v
  mov al,[9988]  ; A0 88 99


  add b[di+1], 99              4       2          24          23
  adc b[di+9], 99              4       2          24          23
  mov al,b[sample]             3       1          16          10
  out dx,al                    1       1           8           8





Implementation 5:
  Positions in bl, bh, cl, ch, ah
  Separate high and low bytes
  60 cycles per channel sample


  add ah,99                    3       0          12           4
  adc b[di+9], 99              4       2          24          23
  mov al,b[sample]             3       1          16          10
  out dx,al                    1       1           8           8




Implementation 6:
  Positions in cl, ch, ah
  Separate high and low bytes
  Double lookup for volume tables
  80 cycles per channel sample


  add ah,99                    3       0          12           4
  adc b[di+9], 99              4       2          24          23
  mov bl,b[sample]             4       1          20          14
  mov bh,99                    2       0           8           4
  xlatb                        1       1           8          11
  out dx,al                    1       1           8           8



4mat-menu11.mod








22KHz is ~217 CPU cycles per sample or ~54 cycles per voice sample or about 14 IOs (~13 with DRAM refresh)

With volume-dependent samples, 12 IOs:
  add bl,bh
  adc si,bp
  lodsb
  es: add [di], al
  inc di

With frequency-dependent samples, 10 IOs:
  lodsb
  xlatb
  es: add [di], al
  inc di

For first voice, 7 IOs (3 :
  add bl,bh
  adc si,bp
  movsb

Total, 43 IOs out of 54 - 80%

Optimizations needed:
  Pre-adjusting samples for volume
  Computing in advance how many iterations needed, taking into account:
    buffer length
    sample length
    length to change of frequency/volume
  Unrolling loop bodies to maximum length, and starting loop by jumping into appropriate location.
  Using separate loop body for first voice



With original samples and volume tables in DS, 14 IOs:
  add cl,ch
  adc si,bp
  lodsb
  xlatb
  es: add [di], al
  inc di

For first voice, 10 IOs:
  add cl,ch
  adc si,bp
  lodsb
  xlatb
  stosb

Total 52 IOs, 55.06 with refresh = 21.7KHz @100%




PC speaker versions:

1: 66 cycles = 17.1KHz
  mov bh,99       2 0
  add w[si],9999  4 2
  inc si          1 0
  lodsb           1 1
  xlatb           1 1
  out dx,al       1 1
  mov bh,99       2 0
  add w[si],9999  4 2
  inc si          1 0
  lodsb           1 1
  xlatb           1 1
  out dx,al       1 1
  mov bh,99       2 0
  add w[si],9999  4 2
  inc si          1 0
  lodsb           1 1
  xlatb           1 1
  out dx,al       1 1
  mov bh,99       2 0
  add w[si],9999  4 2
  inc si          1 0
  lodsb           1 1
  xlatb           1 1
  out dx,al       1 1
  xor si,si       2 0
  loop loopTop    2 2

2: 72 cycles
  lodsw           1 1
  add ax,9999     4 0
  stosw           1 1
  mov bl,ah       2 0
  mov bh,99       2 0
  xlatb           1 1
  out dx,al       1 1
  lodsw           1 1
  add ax,9999     4 0
  stosw           1 1
  mov bl,ah       2 0
  mov bh,99       2 0
  xlatb           1 1
  out dx,al       1 1
  lodsw           1 1
  add ax,9999     4 0
  stosw           1 1
  mov bl,ah       2 0
  mov bh,99       2 0
  xlatb           1 1
  out dx,al       1 1
  lodsw           1 1
  add ax,9999     4 0
  stosw           1 1
  mov bl,ah       2 0
  mov bh,99       2 0
  xlatb           1 1
  out dx,al       1 1
  xor si,si       2 0
  xor di,di       2 0
  loop looptop    2 2

3: 59 cycles
  add cx,9999     4 0
  mov al,ch       2 0
  mov bh,99       2 0
  xlatb           1 1
  out dx,al       1 1
  add si,9999     4 0
  mov ax,si       2 0
  mov al,ah       2 0
  mov bh,99       2 0
  xlatb           1 1
  out dx,al       1 1
  add di,9999     4 0
  mov ax,di       2 0
  mov al,ah       2 0
  mov bh,99       2 0
  xlatb           1 1
  out dx,al       1 1
  add sp,9999     4 0
  mov ax,sp       2 0
  mov al,ah       2 0
  mov bh,99       2 0
  xlatb           1 1
  out dx,al       1 1
  dec bp          1 0
  jnz looptop     2 2

4: 61 cycles = 18.5KHz (might need to permute this a bit)
  add ah,99       3 0
  adc [di],99     3 2
  mov al,[9988]   3 1
  add bl,99       3 0
  adc [di+11],99  4 2
  add al,[9988]   4 1
  add bh,99       3 0
  adc [di+22],99  4 2
  add al,[9988]   4 1
  add dl,99       3 0
  adc [di+33],99  4 2
  add al,[9988]   4 1
  out 042,al      2 1
  loop loopTop    2 2

5: 57 cycles
  add cx,9999     4 0
  mov bl,ch       2 0
  mov bh,99       2 0
  mov al,[bx]     2 1
  add si,9999     4 0
  mov bx,si       2 0
  xchg bl,bh      2 0
  mov bh,99       2 0
  add al,[bx]     2 1
  add di,9999     4 0
  mov bx,di       2 0
  xchg bl,bh      2 0
  mov bh,99       2 0
  add al,[bx]     2 1
  add sp,9999     4 0
  mov bx,sp       2 0
  xchg bl,bh      2 0
  mov bh,99       2 0
  add al,[bx]     2 1
  out dx,al       1 1
  dec bp          1 0
  jnz looptop     2 2

6: 53 cycles = 21.3KHz
  add cx,9999     4 0
  mov bh,ch       2 0
  mov al,[bx+49]  3 1
  add si,9999     4 0
  mov dx,si       2 0
  mov bh,dh       2 0
  add al,[bx+49]  3 1
  add di,9999     4 0
  mov dx,di       2 0
  mov bh,dh       2 0
  add al,[bx+49]  3 1
  add sp,9999     4 0
  mov dx,sp       2 0
  mov bh,dh       2 0
  add al,[bx+49]  3 1
  out dx,al       1 1
  dec bp          1 0
  jnz looptop     2 2

7: 50 cycles = 22.5KHz
  add cx,9999     4 0
  mov bh,ch       2 0
  mov al,[bx+49]  3 1
  add si,9999     4 0
  mov bx,si       2 0
  mov bl,99       2 0
  add al,[bx]     2 1
  add di,9999     4 0
  mov bx,di       2 0
  mov bl,99       2 0
  add al,[bx]     2 1
  add sp,9999     4 0
  mov bx,sp       2 0
  mov bl,99       2 0
  add al,[bx]     2 1
  out dx,al       1 1
  dec bp          1 0
  jnz looptop     2 2

7a: 50 cycles = 22.5KHz
  add bp,9999     4 0
  mov bx,bp       2 0
  mov bl,99       2 0
  mov al,[bx]     2 1
  add si,9999     4 0
  mov bx,si       2 0
  mov bl,99       2 0
  add al,[bx]     2 1
  add di,9999     4 0
  mov bx,di       2 0
  mov bl,99       2 0
  add al,[bx]     2 1
  add sp,9999     4 0
  mov bx,sp       2 0
  mov bl,99       2 0
  add al,[bx]     2 1
  out dx,al       1 1
  loop looptop    2 2

8: 48 cycles = 23.5KHz - unrolled, 35 bytes = 1872 iterations = 12.5Hz minimum update speed - can't easily update waveforms though
  add cx,[bp]     2 2
  mov bh,ch       2 0
  mov al,[bx+49]  3 1
  add si,[bp+2]   3 2
  mov bx,si       2 0
  mov bl,99       2 0
  add al,[bx]     2 1
  add di,[bp+4]   3 2
  mov bx,di       2 0
  mov bl,99       2 0
  add al,[bx]     2 1
  add sp,[bp+6]   3 2
  mov bx,sp       2 0
  mov bl,99       2 0
  add al,[bx]     2 1
  out dx,al       1 1

9: 52 cycles = 21.6KHz - unrolled, 38 bytes = 1724 iterations = 12.6Hz minimum update speed
  add cx,[bp]     2 2
  mov bx,cx       2 0
  mov bl,[bp+8]   3 1
  mov al,[bx]     2 1
  add si,[bp+2]   3 2
  mov bx,si       2 0
  mov bl,dl       2 0
  add al,[bx]     2 1
  add di,[bp+4]   3 2
  mov bx,di       2 0
  mov bl,dh       2 0
  add al,[bx]     2 1
  add sp,[bp+6]   3 2
  mov bx,sp       2 0
  mov bl,ah       2 0
  add al,[bx]     2 1
  out 042,al      2 1


X: volume table version of 7a: 70 cycles = 16.1KHz
  add bp,9999     4 0
  mov bx,bp       2 0
  mov bl,99       2 0
  mov bh,[bx]     2 1
  mov bl,98       2 0
  mov al,[bx]     2 1
  add si,9999     4 0
  mov bx,si       2 0
  mov bl,99       2 0
  mov bh,[bx]     2 1
  mov bl,98       2 0
  add al,[bx]     2 1
  add di,9999     4 0
  mov bx,di       2 0
  mov bl,99       2 0
  mov bh,[bx]     2 1
  mov bl,98       2 0
  add al,[bx]     2 1
  add sp,9999     4 0
  mov bx,sp       2 0
  mov bl,99       2 0
  mov bh,[bx]     2 1
  mov bl,98       2 0
  add al,[bx]     2 1
  out dx,al       1 1
  loop looptop    2 2

Y: 70 cycles
  add bp,9999     4 0
  mov bx,bp       2 0
  mov bl,0        2 0
  mov bh,[bx+49]  3 1
  mov al,[bx+48]  3 1
  add si,9999     4 0
  mov bx,si       2 0
  mov bl,0        2 0
  mov bh,[bx+49]  3 1
  add al,[bx+48]  3 1
  add di,9999     4 0
  mov bx,di       2 0
  mov bl,0        2 0
  mov bh,[bx+49]  3 1
  add al,[bx+48]  4 1
  add sp,9999     4 0
  mov bx,sp       2 0
  mov bl,0        2 0
  mov bh,[bx+49]  3 1
  add al,[bx+48]  3 1
  out dx,al       1 1
  loop looptop    2 2


Unrollable with volume tables: 77 cycles (theoretical maximum 14.1KHz)
  add cx,[bp]     2 2  ; velocity
  mov bx,cx       2 0
  mov bl,[bp+8]   3 1  ; waveform
  mov bh,[bx]     2 1
  mov bl,[bp+9]   3 1  ; volume
  mov al,[bx]     2 1

  add si,[bp+2]   3 2
  mov bx,si       2 0
  mov bl,dl       2 0
  mov bh,[bx]     2 1
  mov bl,[bp+10]  3 1
  add al,[bx]     2 1

  add di,[bp+4]   3 2
  mov bx,di       2 0
  mov bl,dh       2 0
  mov bh,[bx]     2 1
  mov bl,[bp+11]  3 1
  add al,[bx]     2 1

  add sp,[bp+6]   3 2
  mov bx,sp       2 0
  mov bl,ah       2 0
  mov bx,[bx]     2 1
  mov bl,[bp+12]  3 1
  add al,[bx]     2 1





; MOD player:
; DS = sample pointer
; BP = 0
; SI = temp position
; DI = channel 0 position bits 8..15
; BX = temp sample (BH = 0)
; AL = sample accumulator
; AH = channel 3 position bits 0..7
; CX = channel 1 position bits 8..15
; DX = channel 2 position bits 8..15
; SP = data pointer
; SS = data pointer:
;   0 = channel 0 position bits 0..7
;   1 = channel 1 position bits 0..7
;   2 = channel 2 position bits 0..7
;
;   4 = channel 0 sample
;   6 = channel 0 volume
;   8 = channel 1 sample
;  10 = channel 1 volume
;  12 = channel 2 sample
;  14 = channel 2 volume
;  16 = channel 3 position bits 8..15
;  18 = channel 3 sample
;  20 = channel 3 volume
;  22 = count

loopTop:
  add b[bp],99     3 2
  adc di,9999      4 0
  jnc noOverflow   2 3
  mov di,9999
noOverflow0:
  pop ds           1 2
  mov bl,[di]      2 1
  pop ds           1 2
  mov al,[bx]      2 1        26

  add b[bp+1],99   4 2
  adc cx,9999      4 0
  jnc noOverflow   2 3
  mov cx,9999
noOverflow1:
  mov si,cx        2 0
  pop ds           1 2
  mov bl,[si]      2 1
  pop ds           1 2
  add al,[bx]      2 1        29

  add b[bp+2],99   4 2
  adc dx,9999      4 0
  jnc noOverflow   2 3
  mov dx,9999
noOverflow2:
  mov si,dx        2 0
  pop ds           1 2
  mov bl,[si]      2 1
  pop ds           1 2
  add al,[bx]      2 1        29

  add ah,99        3 0
  pop si           1 2
  adc si,9999      4 0
  jnc noOverflow   2 3
  mov si,9999
noOverflow3:
  mov [bp+16],si   3 2
  pop ds           1 2
  mov bl,[si]      2 1
  pop ds           1 2
  add al,[bx]      2 1        32

  sub sp,18        3 0

  out 042,al       2 1
  dec b[bp+22]     3 2
  jnz loopTop      2 3        16


; total = 132 cycles = 8.5KHz



; Without volume tables:

loopTop:
  add b[bp],99     3 2
  adc di,9999      4 0
  jnc noOverflow   2 3
  mov di,9999
noOverflow0:
  pop ds           1 2
  mov al,[di]      2 1        20

  add b[bp+1],99   4 2
  adc cx,9999      4 0
  jnc noOverflow   2 3
  mov cx,9999
noOverflow1:
  mov si,cx        2 0
  pop ds           1 2
  add al,[si]      2 1        23

  add b[bp+2],99   4 2
  adc dx,9999      4 0
  jnc noOverflow   2 3
  mov dx,9999
noOverflow2:
  mov si,dx        2 0
  pop ds           1 2
  add al,[si]      2 1        23

  add ah,99        3 0
  pop ds           1 2
  pop si           1 2
  adc si,9999      4 0
  jnc noOverflow   2 3
  mov si,9999
noOverflow3:
  push si          1 2
  add al,[si]      2 1        24

  sub sp,8         3 0

  out 042,al       2 1
  dec b[bp+12]     3 2
  jnz loopTop      2 3        16

; total = 106 cycles = 10.6KHz





loopTop:
  process ax       0 3 2 1
  xchg ax,tempA
  process ax       1 0 3 2
  xchg ax,tempB
  process ax       2 1 0 3
  xchg ax,tempC
  process ax       3 2 1 0
  loop loopTop


; CL = position bits 0..7
; CH = velocity bits 0..7
; SI = position bits 8..15
; DI = velocity bits 8..15
; AL = sample accumulator
; DX = sample segment
; SP = sample start (-length)
; BX = volume table pointer
; BP = temporaries pointer

loopTop:
  add cl,ch         2 0
  adc si,di         2 0
  jnc noOverflow0   2 2
  mov si,sp
noOverflow0:
  mov ds,dx         2 0
  lodsb             1 1
  ss: xlatb         2 1      15

  xchg cx,[bp]      2 4
  xchg si,[bp+2]    3 4
  xchg di,[bp+4]    3 4
  xchg dx,[bp+6]    3 4
  xchg sp,[bp+8]    3 4
  xchg bx,[bp+10]   3 4      41

loopTop:
  add cl,ch         2 0
  adc si,di         2 0
  jnc noOverflow0   2 2
  mov si,sp
noOverflow0:
  mov ds,dx         2 0
  lodsb             1 1
  ss: xlatb         2 1      15

  xchg cx,[bp+12]   3 4
  xchg si,[bp+14]   3 4
  xchg di,[bp+16]   3 4
  xchg dx,[bp+18]   3 4
  xchg sp,[bp+20]   3 4
  xchg bx,[bp+22]   3 4      42

loopTop:
  add cl,ch         2 0
  adc si,di         2 0
  jnc noOverflow0   2 2
  mov si,sp
noOverflow0:
  mov ds,dx         2 0
  lodsb             1 1
  ss: xlatb         2 1      15

  xchg cx,[bp+24]   3 4
  xchg si,[bp+26]   3 4
  xchg di,[bp+28]   3 4
  xchg dx,[bp+30]   3 4
  xchg sp,[bp+32]   3 4
  xchg bx,[bp+34]   3 4      42

loopTop:
  add cl,ch         2 0
  adc si,di         2 0
  jnc noOverflow0   2 2
  mov si,sp
noOverflow0:
  mov ds,dx         2 0
  lodsb             1 1
  ss: xlatb         2 1      15

  dec b[bp+36]      3 2
  jnz loopTop       2 2       9

; total = 194 cycles



7a with song data: 12.7KHz
looptop:
  db 39 dup 0x90
realLooptop:
  add bp,9999     4 0
  mov bx,bp       2 0
  mov bl,99       2 0
  mov al,[bx]     2 1
  add si,9999     4 0
  mov bx,si       2 0
  mov bl,99       2 0
  add al,[bx]     2 1
  add di,9999     4 0
  mov bx,di       2 0
  mov bl,99       2 0
  add al,[bx]     2 1
  add sp,9999     4 0
  mov bx,sp       2 0
  mov bl,99       2 0
  add al,[bx]     2 1
  out dx,al       1 1
  loop looptop    2 1

songPointer:
  mov bx,9999                 3 0
  add bx,4                    3 0
  cs: mov [songPointer+1],bx  5 2

  ss: mov ax,[bx]             3 2
  ss: mov bx,[bx+2]           4 2
  cs: mov [bx],ax             3 2
  es: mov [bx],ax             3 2
  mov cx,9999                 3 0
  jmp realLooptop             2 0

; Can we fill up a buffer and empty it while we're updating to avoid slack time?
;   Only with loop unrolling
;   Let's say 5 sample lookups per output




CX = voice 0 position
SI = voice 1 position
DI = voice 2 position
SP = voice 3 position
BX = temporary sample pointer
AL = buffered sample
AH = sample accumulator
DL = voice 1 waveform
DH = voice 2 waveform
SS:BP = data:
  0 = voice 0 velocity
  2 = voice 1 velocity
  4 = voice 2 velocity
  6 = voice 3 velocity
  8 = voice 0 waveform
  9 = voice 1 waveform
  10 = 0b800
  12 = song segment
  14 = waveform segment
CS = code segment
DS = waveforms segment
ES = song segment

fakeLooptop:
  ~11 nops

  mov bx,[bp-xx]     3 2 <- arrange for bp-xx to point at doUpdate+5
  mov ds,[bp+12]     3 2
  mov dx,[bx]        2 2
  mov bx,[bx+2]      3 2
  mov ds,[bp+10]     3 2
  mov [bx],dx        2 2
  mov ds,[bp+14]     3 2
  mov dx,[bp-xx]     3 2 <- arrange for bp-xx to point at waveforms12+1

loopTop:                 -3
  out 042,al      2 1     0
  add cx,[bp]     2 2     4
  mov bx,cx       2 0     6
  mov bl,[bp+8]   3 1    10
  mov al,[bx]     2 1    14
  add si,[bp+2]   3 2    19
  mov bx,si       2 0    21
  mov bl,dl       2 0    23
  add al,[bx]     2 1    26
  add di,[bp+4]   3 2    31
  mov bx,di       2 0    33
  mov bl,dh       2 0    35
  add al,[bx]     2 1    38
  add sp,[bp+6]   3 2    43
  mov bx,sp       2 0    45
  mov bl,[bp+9]   3 1    49
  add al,[bx]     2 1    52

  add cx,[bp]     2 2    56
  mov bx,cx       2 0    58
  mov bl,[bp+8]   3 1    62
  mov ah,[bx]     2 1    65
  out 042,al      2 1    68
  add si,[bp+2]   3 2    73
  mov bx,si       2 0    75
  mov bl,dl       2 0    77
  add ah,[bx]     2 1    80
  add di,[bp+4]   3 2    85
  mov bx,di       2 0    87
  mov bl,dh       2 0    89
  add ah,[bx]     2 1    92
  add sp,[bp+6]   3 2    97
  mov bx,sp       2 0    99
  mov bl,[bp+9]   3 1   103
  add ah,[bx]     2 1   106
  mov al,ah       2 0   108

  add cx,[bp]     2 2   112
  mov bx,cx       2 0   114
  mov bl,[bp+8]   3 1   118
  mov ah,[bx]     2 1   121
  add si,[bp+2]   3 2   126
  mov bx,si       2 0   128
  mov bl,dl       2 0   130
  add ah,[bx]     2 1   133
  out 042,al      2 1   136
  add di,[bp+4]   3 2   141
  mov bx,di       2 0   143
  mov bl,dh       2 0   145
  add ah,[bx]     2 1   148
  add sp,[bp+6]   3 2   153
  mov bx,sp       2 0   155
  mov bl,[bp+9]   3 1   159
  add ah,[bx]     2 1   162
  mov al,ah       2 0   164

  add cx,[bp]     2 2   168
  mov bx,cx       2 0   170
  mov bl,[bp+8]   3 1   174
  mov ah,[bx]     2 1   177
  add si,[bp+2]   3 2   182
  mov bx,si       2 0   184
  mov bl,dl       2 0   186
  add ah,[bx]     2 1   189
  add di,[bp+4]   3 2   194
  mov bx,di       2 0   196
  mov bl,dh       2 0   198
  add ah,[bx]     2 1   201
  out 042,al      2 1   204
  add sp,[bp+6]   3 2   209
  mov bx,sp       2 0   211
  mov bl,[bp+9]   3 1   215
  add ah,[bx]     2 1   218
  mov al,ah       2 0   220

  add cx,[bp]     2 2   224
  mov bx,cx       2 0   226
  mov bl,[bp+8]   3 1   230
  mov ah,[bx]     2 1   233
  add si,[bp+2]   3 2   238
  mov bx,si       2 0   240
  mov bl,dl       2 0   242
  add ah,[bx]     2 1   245
  add di,[bp+4]   3 2   250
  mov bx,di       2 0   252
  mov bl,dh       2 0   254
  add ah,[bx]     2 1   257
  add sp,[bp+6]   3 2   262
  mov bx,sp       2 0   264
  mov bl,[bp+9]   3 1   268
  add ah,[bx]     2 1   271
  out 042,al      2 1   274 (2 too late)
  mov al,ah       2 0   276

counter:
  mov bx,0099        3 0
  dec bx             1 0
  jnc doUpdate       2 1
  mov [bp-xx],bl           3 1 <- arrange for bp-xx to point at counter+1
  jmp fakeLooptop          2 1
doUpdate:
  mov [bp-xx],99     4 1 <- arrange for bp-xx to point at counter+1 - 99 = new counter value
  mov bx,9999        3 2
  add bx,4           3 0
  mov [bp-xx],bx     3 2 <- arrange for bp-xx to point at doUpdate+5
  mov es,[bp+12]     3 2
  es: mov dx,[bx]    3 2
  es: mov bx,[bx+2]  4 2
  ss: mov [bx],dx    3 2
waveforms12:
  mov dx,9999        3 0
  ~12 nops
  jmp loopTop        2 1

; Locate SS:BP data here.



We output to 8253 every 68 cycles = 16.6KHz
The outer loop takes 68*5 = 340 cycles (360 with refresh) giving a tempo resolution of 3.3KHz (300us)
Each time through the outer loop we burn 4 bytes of song
640Kb lasts between 49.4s and 3.5 hours
If we want to update all velocities and waveforms (6 words) 50 times per second (count = 66/6 = 11) that gives us 9 minutes of music
  If the waveform/velocity changes being staggered are annoying, we can unroll:

  mov bx,[bp-xx]     3 2 <- arrange for bp-xx to point at doUpdate+5
  mov ds,[bp+12]     3 2
  mov dx,[bx]        2 2
  mov [bp],dx        2 2
  mov dx,[bp+2]      3 2
  mov [bp+2],dx      3 2
  mov dx,[bx+4]      3 2
  mov [bp+4],dx      3 2
  mov dx,[bx+6]      3 2
  mov [bp+6],dx      3 2
  mov dx,[bx+8]      3 2
  mov [bp-xx],dx     3 2 <- arrange for bp-xx to point at waveforms12+1
  mov ds,[bp+14]     3 2

and update [bp+8] (or others) in the normal way. We can also change the tempo before and after every change, but that's more wasteful of song space.

Unrolled:
  count = 33 (50.2 changes per second)  14 bytes per change = 932 seconds = 15.5 minutes (12.4 with 2x64Kb for OS/player/samples)

With tempo changes: extra 8 bytes after every 24 = 6.8 minutes (5.4 in 512Kb)



  lodsw            ; 1 2  ax = position
  xchg ax,bx       ; 1 0  bx = position
  lodsw            ; 1 2  ax = velocity
  add ax,bx        ; 2 0  ax = position + velocity
  mov [si-4],ax    ; 3 2  position += velocity
  lodsb            ; 1 1  ax = (position & 0xff00) | waveform
  xchg bx,ax       ; 1 0  bx = (position & 0xff00) | waveform
  es: mov ah,[bx]  ; 3 1  ah = sample
  lodsb            ; 1 1  ax = (sample << 8) | volume
  xchg bx,ax       ; 1 0  si = (sample << 8) | volume; ax = dataPointer
  es: mov cl,[bx]  ; 3 1  si = volumeTable[sample];
; 28 cycles

  pop bx           ; 1 2  bx = position
  pop ax           ; 1 2  ax = velocity
  add ax,bx        ; 2 0  ax = position + velocity
  mov [bp-4],ax    ; 2 2  position += velocity
  lodsb            ; 1 1  ax = (position & 0xff00) | waveform



50Hz = 22538 cycles

Theoretical maximum of current routine with 55 cycles is 20.1KHz



; Pre-compute offsets for ~20 samples per channel
; Use 8.8 addressing and a 64Kb sideways sample table
; Store these offsets at SS:SP
; Samples in ES:
; Low 8 bits of SI = waveform number
; High 8 bits of SI = sample within waveform
; High 8 bits of BP = offset sample within waveform
; Low 8 bits of BP = 0
; High 8 bits of BX = volume
; Low 8 bits of BX = volume from sample
; Volume table in DS (not sideways)
; With volume table: 10 cycles (theoretical maximum 28.2KHz)

  pop bp              1 2
  es: mov bl,[si+bp]  3 1
  mov al,[bx]         2 1

; Without volume table: 7 cycles (theoretical maximum 40.2KHz)

  pop bp              1 2
  es: mov al,[si+bp]  3 1


; Do the samples in time-major order or voice-major order?
;   Time-major order means we have to keep switching SI
;   Voice-major order means we have to mix into a buffer

; Voice-major, no volume table: 41 cycles excluding output
  pop bp              1 2
  es: mov al,[si+bp]  3 1
  pop bp              1 2
  es: mov ah,[si+bp]  3 1
  mov [di+2],ax       3 2

  pop bp              1 2
  es: mov al,[si+bp]  3 1
  pop bp              1 2
  es: mov ah,[si+bp]  3 1
  add [di+2],ax       3 4

  pop bp              1 2
  es: mov al,[si+bp]  3 1
  pop bp              1 2
  es: mov ah,[si+bp]  3 1
  add [di+2],ax       3 4

  pop bp              1 2
  es: mov al,[si+bp]  3 1
  pop bp              1 2
  es: mov ah,[si+bp]  3 1
  add [di+2],ax       3 4

; With buffer in ES and samples in DS: 39 cycles

  pop bx              1 2
  mov al,[si+bx]      2 1
  pop bx              1 2
  mov ah,[si+bx]      2 1
  es: mov [di+2],ax   4 2

; With



; Time-major, no volume table: 36 cycles excluding output
  mov si,bp           2 0
  pop bx              1 2
  mov al,[si+bx]      2 1
  mov si,cx           2 0
  pop bx              1 2
  add al,[si+bx]      2 1
  mov si,dx           2 0
  pop bp              1 2
  add al,[si+bx]      2 1
  mov si,di           2 0
  pop bp              1 2
  add al,[si+bx]      2 1  36 x 20 = 720 cycles

  pop bp              1 2
  pop si              1 2
  add [bp],si         2 4
  pop si              1 2
  adc bx,si           2 0
  pop si              1 2
  add [bp+2],si       3 4
  pop si              1 2
  adc cx,si           2 0
  pop si              1 2
  add [bp+4],si       3 4
  pop si              1 2
  adc dx,si           2 0
  pop si              1 2
  add [bp+6],si       3 4
  pop si              1 2
  adc di,si           2 0
  sub sp,178          4 0    66 cycles


  add bx,si       ; 2 0
  mov [bp+9],bh   ; 3 1  6 x 20 = 120 cycles    x 4 = 480 cycles


(22538 cycles - 480)/786 = 28 iterations = 560 samples in 20ms = 28KHz

Output: 5 cycles per sample = 2800 cycles

(22538 cycles - 480 - 2800)/786 = 24 iterations = 480 samples in 20ms = 24KHz



Need to run some experiments generating code for various run lengths and sample rates

50 times a second, change:
  Voice 0 velocity        2
  Voice 0 waveform        1
  Voice 1 velocity        2
  Voice 1 waveform        1
  Voice 2 velocity        2
  Voice 2 waveform        1
  Voice 3 velocity        2
  Voice 3 waveform        1
  Screen update position  2
  Screen update value     1  total 15  750 bytes/sec  11.6 minutes in 512Kb.
