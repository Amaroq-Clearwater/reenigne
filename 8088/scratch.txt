IsaBus8Bit
  UInt32 _address;
  UInt8 _data;
  bool _aen;
  bool _memw;
  bool _memr;
  bool _iow;
  bool _ior;
  bool _dack[4];
  bool _drq[4];
  bool _tc;
  bool _irq[8];
  bool _ale;

Read:
  T1: Address put on bus
  T4: Data read from bus
Write:
  T1: Address put on bus
  T2: Data put on bus

How are bytes removed from the prefetch queue?
  Model 1: Bytes are removed as they are decoded
    Cycle 1: Opcode byte removed from prefetch queue
    Cycle 2: ModRM byte removed from prefetch queue
  Model 2: All instruction bytes are removed when execution starts. If the instruction is longer than 4 bytes, further bytes are removed immediately after loading.

PUSHF:
  Model 1: 10 cycles on 8086 and 14 on 8088
  Model 2: 10 cycles when aligned and 14 otherwise

PUSH rmw:
  Model 1: 16+EA cycles on 8086 and 24+EA on 8088
  Model 2: 16+EA cycles when aligned and 24+EA otherwise

PUSH r:
  Model 1: 11 cycles on 8086 and 15 on 8088
  Model 2: 11 cycles when aligned and 15 otherwise

How long does SALC take?

When doing an OUT to CGA, is there a wait state?

When doing CGA memory operations, under what condition do we get a wait state?
  What about other peripherals?

Is the "RETF iw" timing correct? (Surely it shouldn't be less than RETF)

Is the "TEST rmw,iw" timing correct? (Surely it shouldn't be the same as "TEST rmb,ib")

Is the AF ever set after an OR operation?

Sanity check the BCD instructions
  Make sure they do the same thing as documented
  Make sure they are useful for their purpose
  Test them against real hardware
  Try to figure out how the flags are defined

Determine behavior of invalid opcodes:
  6x

Check timings of "alu rmw,imm" with ADD/ADC/AND - HELPPC says 23+EA which seems wrong. Zen says 25+EA which seems right.

When setting IP, need to abandon currently pending fetch
  Reset abandon flag

Find out what hardware does with "MOV rmw<->segreg" when modRMReg >= 4

Make sure that "ES: POP [BX]" doesn't ???

Check that LDS and LES take the same time (HELPPC says LDS is 16+EA which can't be right. Zen says 24+EA which seems right.)

Implement LOCK (make instruction atomic with respect to bus state)

Determine semantics of:
  WAIT (HELPPC says 4 cycles, Zen says 3).
  HLT
  escape
  Invalid opcodes 6x
  Invalid opcodes c0/c1/c8/c9
  Invalid opcode f1
  Figure out what "CALL mp" and "JMP mp" do with a register argument
  Figure out what opcode FE does with modRMReg() > 1
  Figure out what opcodes FE and FF do with modRMReg() == 7
  Find out what hardware does with LES/LDS/LEA when mod == 3

Check that "POP AX" etc are 12 cycles as Zen says, and not 8 as HELPPC says

The RET timings seem suspect

Timings for "AAD 0"

Check timings for "JMP cp" - Zen says 15, HELPPC has no opinion.

Check timings for "TEST rmw,iw" - HELPPC says 11+EA (probably incorrectly), Zen says 15+EA.

Check timings for MUL
  Memory shouldn't be faster than registers, surely?
  Determine if additional cycles are given by 1 bits or 0 bits in source or destination
  Are there 8 or 9 possible cycle counts for byte multiplication? If 8, is *0 the same length as *1 or *0xff the same as *0x7f?
    Similarly with word multiplication
  Timings for IMUL: Penalties for negative inputs? Negative output?

8-bit MUL:
    00 01 C0 07 F0 1F FC 7F FF

00  74 75 76 77 78 79 80 81 82
01  74 75 76 77 78 79 80 81 82
C0  74 75 75 76 77 78 79 80 81
07  74 75 75 77 77 79 79 80 81
F0  74 75 75 76 77 78 79 80 81
1F  74 75 75 77 77 78 79 80 81
FC  74 75 75 76 77 78 79 80 81
7F  74 75 75 76 77 78 79 80 81
FF  74 75 75 76 77 78 79 80 81


Check that the semantics of x86 remainder is (destination - product)*(negative ? -1 : 1) always

Check that AAA/AAS is 4 cycles (as Zen says) instead of 8 (as HELPPC says)

Check that "INC/DEC rw" is 2 cycles (as Zen says) instead of 3 (as HELPPC says) and that it is 3 cycles when using opcode FF.
Check the timings for "DEC mw" - HELPPC says 15+EA but I think 23+EA (same as "INC mw") is more likely - so does Zen.

Check timings of "POP rmw" (opcode 8F)
  With register arguments, does it still take 12 cycles as with opcodes 58+r?
  HELPPC says 17+EA which seems wrong. Zen says 25+EA which seems right.

Check timings of "CALL cp" - HELPPC says 28, Zen says 36.
Check timings of "CALL cw" - HELPPC says 19, Zen says 23.
Check timings of "CALL rmw" - HELPPC says 16 21+EA, Zen says 20 29+EA.
Check timings of "CALL mp" - HELPPC says 37+EA, Zen says 53+EA.
Check timings of "JMP mw" - HELPPC says 18+EA, Zen says 22+EA.
Check timings of "JMP mp" - HELPPC says 24+EA, Zen says 32+EA.

Check "REP" timings - Zen says 9, HELPPC says 2.

Check timings of LOOPE - HELPPC says 5/18, Zen says 6/18.
Check timings of LOOP - HELPPC says 5/18, Zen says 5/17.

Check timings of "MUL rmw" - HELPPC says 118-113 (sic) (124-139)+EA, Zen says 118-133 (128-143)+EA
Check timings of "IMUL rmw" - HELPPC says 128-154 (134-160)+EA, Zen says 128-154 (138-164)+EA
Check timings of "DIV rmw" - HELPPC says 144-162 (150-168)+EA, Zen says 144-162 (154-172)+EA

Check timings of "REP MOVSB" - HELPPC says 18 per, Zen says 17 per - Zen is right
Check timings of "REP MOVSW" - HELPPC says 26 per, Zen says 25 per - Zen is right
Check timings of "REP STOSB" - HELPPC says 11 per, Zen says 10 per
Check timings of "REP STOSW" - HELPPC says 15 per, Zen says 14 per
Check timings of "REP LODSB" - HELPPC says 12 per, Zen says 13 per
Check timings of "REP LODSW" - HELPPC says 16 per, Zen says 17 per

Check behavior of REP* with override prefix (hardware bugs)

Investigate trap flag

Run Zeus testsuite

Test programs:
  Audio:
    Digger
    Digger Remastered
    Styx
    Pianola
    Cool Dude
    PCSS view
    Telltime
    Fire
    Magic mushroom demo?
    Music Construction Set, programmed by Will Harvey, came out for the PC in 1984 from Electronic Arts
    Turbo Outrun
    Titus Crazy Cars
    Titus Offshore Warrior
    Loriciels Mach 3
    Loriciels Space Racer
    Dinamic Aspar GP Master
    Access Mean Streets
    Access Crime Wave
    Access Countdown
    Access Links
    Exxos Purple Saturn Day
    Spellcasting 101
    Mindscape Wizball
  Video:
    Digger palette effect
    California Games palette effect
