Two similar ways of creating objects:

Structure { ... }
Class { ... }

Structure is the equivalent of a C++ struct or class
  Inherit from Object, which has no members
  Passed by value
  Can be allocated on stack, heap or inside another object

Class is the equivalent of a Java or C# class
  Inherit from Reference, which is a pointer
  Implementation is heap allocated and reference counted
  Any Class can also be written as a Structure.
    T = Class : Base { ... } is equivalent to:
      T = Structure : Base
      {
          ...
          operator=<@U>(U other) { _implementation = other._implementation; if (!valid()) throw; }
          constructor<@U>(U other) { *this = other; }
      private:
          Implementation = Structure : Base::Structure { ... };
          Implementation* implementation() { return dynamic_cast<Implementation*>(_implementation); }
      };
  Compiler generates a Structure method for each Implementation method
  Casting from one Class type to another does the appropriate Implementation dynamic cast
  Excess dynamic casting is optimized away


Also have Immutable which inherits from ConstReference?







Foo<@T> = Class { ... };

Foo<@T> where T : Bar = Class { ... };

Foo<@T, @U> where T : U = Class { ... };




Inner classes:

It would be nice to be able to access outer class members from an inner class

A = Structure {
  Int a;
  B = Structure {
    Int b;
    Int foo()
    {
      return a+b;
    }
  };
};

Which instance of the inner class is used? There needs to be an implicit "A* outer" pointer in B which is dereferenced to find outer class members
  Only added if B methods reference outer class members
  Any B created by an A method is automatically given an outer_chain pointer equal to this.
    It then must be illegal to create a B from outside an A context, because there's no valid
  Should "outer" be reference counted?
    Maybe only if A inherits from Reference

