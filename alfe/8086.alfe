MachineDescription machine8086;

{
    Auto m = &machine8086;

    for (Auto r in {
        // name
        //        binary encoding
        //           width
        {"sp",    4, 2},
        {"bp",    5, 2},
        {"si",    6, 2},
        {"di",    7, 2},

        {"es",    0, 2},
        {"cs",    1, 2},
        {"ss",    2, 2},
        {"ds",    3, 2},

        {"al",    0, 1},
        {"cl",    1, 1},
        {"dl",    2, 1},
        {"bl",    3, 1},
        {"ah",    4, 1},
        {"ch",    5, 1},
        {"dh",    6, 1},
        {"bh",    7, 1},

        {"ip",    0, 2},
        {"flags", 0, 2}})
        m->addRegister(r);

    m->addCompountRegister("ax", "al", "ah", 0);
    m->addCompountRegister("cx", "cl", "ch", 1);
    m->addCompountRegister("dx", "dl", "dh", 2);
    m->addCompountRegister("bx", "bl", "bh", 3);

    for (Auto c in {
        // name         registers in class
        {"generalWord", "ax, cx, dx, bx, sp, bp, si, di"},
        {"generalByte", "al, cl, dl, bl, ah, ch, dh, bh"},
        {"segment",     "es, cs, ss, ds"}})
        m->addRegisterClass(c);

    Auto aluOperations = {
        {"add", 0},
        {"or",  1},
        {"adc", 2},
        {"sbb", 3},
        {"and", 4},
        {"sub", 5},
        {"xor", 6},
        {"cmp", 7}};

    void addRegisterOrMemoryRegisterBytePattern<T>(T operation)
    {
        m->addInstructionPattern(
    }

    void addRegisterOrMemoryRegisterWordPattern<T>(T operation)
    {

    }

    void addRegisterRegisterOrMemoryBytePattern<T>(T operation)
    {

    }

    void addRegisterRegisterOrMemoryWordPattern<T>(T operation)
    {

    }

    void addRegisterMemoryBytePattern<T>(T operation)
    {
        addRegisterOrMemoryRegisterBytePattern(operation);
        addRegisterRegisterOrMemoryBytePattern(operation);
    }

    void addRegisterMemoryWordPattern<T>(T operation)
    {
        addRegisterOrMemoryRegisterWordPattern(operation);
        addRegisterRegisterOrMemoryWordPattern(operation);
    }

    void addRegisterMemoryPattern<T>(T operation)
    {
        addRegisterMemoryBytePattern(operation);
        addRegisterMemoryWordPattern(operation);
    }

    for (Auto o in aluOperations)
        addRegisterMemoryPattern(o, m);

}
