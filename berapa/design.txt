Component Type classes need to have Simulator pointers because they're used to construct Component objects.

Connector classes are not reference counted because Connector objects are expected to be members of Component objects (and hence owned by them).

How are Component objects owned? ROM::Type just creates a ROM* with new
  Owned by Simulator


Input/Output/Bidirectional connectors:
  It would be nice to be able to have components choose whether data is pushed or pulled depending on whether reads or writes happen more often
  Connectors can negotiate what protocol they will use to talk to each other
    The push protocol is the default and must always be available
    Periodic protocol will also be useful - that way for PC speaker emulation a virtual function call will only be needed when a port is written


What does speculative execution actually mean
  "Unless some other signal comes in, my outputs won't change until time T"
  A component supporting speculative execution has two time values:
    _tick: All component state has been computed to this point. Outputs that have changed may be in the process of being set.
    _speculativeTick: The outputs won't change before this point unless the inputs change

    Allow discontiguous ranges without separate tree entries?
      This would be useful for using 8-bit ROM chips on a 16-bit bus (one ROM for even addresses, one for odd addresses)
        But on the other hand we might prefer a single 16-bit ROM with two files for that
          Let's not implement this unless we need it

