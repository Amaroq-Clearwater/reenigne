Time ms = second/1000;
Time hdot = 44*ms/630000;  // 14.318MHz

Intel8088CPU cpu;
cpu.frequency = 1/(3*hdot);  // 4.77MHz

ISA8BitBus bus; bus.cpu = cpu;

Integer kB = 2^10;

ISA8BitRAM ram;
ram.ram.rowBits = 8;  // 7 for 4116 RAM chips, 8 for 4164 or 9 for 41256
ram.ram.bytes = 640*kB;  // should be enough for anyone.
// Real hardware can work with a decay time as short as just above
// hdot*12*18<<ram.ram.rowBits
ram.ram.decayTime = (4*ms / 256) << ram.ram.rowBits;
bus.slot = ram.bus;

Intel8237DMAC dmac;                bus.chip0 = dmac.bus;
Intel8259PIC pic;                  bus.chip1 = pic.bus;
Intel8253PIT pit;                  bus.chip2 = pit.bus;
Intel8255PPI ppi;                  bus.chip3 = ppi.bus;
DMAPageRegisters dmaPageRegisters; bus.chip4 = dmaPageRegisters.bus;
NMISwitch nmiSwitch;               bus.chip5 = nmiSwitch.bus;

bus.dmaPageRegisters = dmaPageRegisters;

Frequency pitFrequency = cpu.frequency/4;  // 1.193MHz
pit.timer0.frequency = pitFrequency;
pit.timer1.frequency = pitFrequency;
pit.timer2.frequency = pitFrequency;
pit.timer0.output = pic.irq0;
pit.timer2.gate = ppi.b0;
pit.timer2.output = ppi.c5;

OneBitSpeaker speaker;
speaker = pit.timer2.output & ppi.b1;

SRLatch refreshLatch;
refreshLatch.set = pit.timer1.output & dmac.dack0;
refreshLatch.reset = ~dmac.dack0;
refreshLatch.lastSet = dmac.dreq0;

dmac.clock.frequency = cpu.frequency;

PCXTKeyboardPort keyboardPort;
ppi.a = keyboardPort.data;
ppi.b7 = keyboardPort.clear;
ppi.b6 = keyboardPort.clock;
pic.irq1 = keyboardPort.irq;

PCXTKeyboard keyboard; keyboardPort = keyboard;

IBMCGA cga; bus.slot = cga.bus;
cga.clock.frequency = 1/hdot;
cga.rom = "../../external/8088/roms/5788005.u33";
cga.ram.rowBits = 7;
cga.ram.bytes = 16*kB;
cga.ram.decayTime = 2*ms;

RGBIMonitor monitor;
cga.rgbiOutput = monitor;

SRLatch cardParityError;
ppi.c6 = cardParityError.lastSet;
cardParityError.set = bus.parityError;
cardParityError.reset = ppi.b5;

SRLatch boardParityError;
ppi.c7 = ~boardParityError.lastReset;
boardParityError.set = ram.ram.parityError;
boardParityError.reset = ppi.b4;

cpu.nmi = nmiSwitch & (/*(n_p_npi & n_p_instlsw) |*/
    ~boardParityError.lastReset | ~cardParityError.lastReset);

cpu.irq = pic.int;
