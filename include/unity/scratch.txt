Conversion of Tuple<Tuple<Integer,String,Integer,Integer>,Tuple<Integer,String,Integer,Integer>> to Array<RomImage>:
  ConfigFile asks TypeConverter if it can convert Tuple<Tuple<Integer,String,Integer,Integer>,Tuple<Integer,String,Integer,Integer>> to Array<RomImage>
    TypeConverter searches for type pair, doesn't find it.
    TypeConverter asks Tuple<Tuple<Integer,String,Integer,Integer>,Tuple<Integer,String,Integer,Integer>> if it is a template instantiation. It says yes and returns parent Tuple<Tuple<Integer,String,Integer,Integer>>
    TypeConverter looks up Tuple<Tuple<Integer,String,Integer,Integer>> in its ConversionSource table, doesn't find it.
    TypeConverter asks Tuple<Tuple<Integer,String,Integer,Integer>> if it is a template instantiation. It says yes and returns parent Tuple.
    TypeConverter looks up Tuple in its ConversionSource table, doesn't find it.
    TypeConverter asks Tuple if it is a template instantiation. It says no.
    TypeConverter asks Array<RomImage> if it is a template. It says yes and returns Array.



String::subString() takes start and length, CodePointSource::subString() takes start and end.

See http://docs.racket-lang.org/reference/windowspaths.html for details on paths starting with \\?\

If use \\?\ to avoid MAX_PATH limit, we need to know the current drive - this is the first character of CurrentDirectory().windowsPath() .

When parsing paths, should we use:
  getCodePoint() so that Unix paths can contain 0x0a and 0x0d bytes? or
  get() so that error messages contain the correct line and column number?
    Or make getCodePoint() increase _line/_column appropriately?

CharacterSource currently only returns sensible _line/_column if it is started at the start of file contents
  Really want to get good locations even for substrings - should SimpleString have a _line/_column?

We should be using substitution into templates instead of concatenation for globalization purposes.

