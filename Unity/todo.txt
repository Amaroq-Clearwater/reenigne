Write very simple interpreter
  Initial source program is just a string
    Start off with arbitrary characters delimited by double quotes
    Add escaped characters
  Add ability to concatenate strings
  Add integers
  Add built-in print function
  Add variables
  Add multi-line strings

Initial test program:

"Pass.\n"

Initial grammar:

:= DoubleQuotedString;

DoubleQuotedString = '"' ( !(NonStringCharacter | '"') | EscapedCharacter)* '"' {[Space]};

Character = '\n' | '\r' | ' '..'\U+10FFFF';

NonStringCharacter = NewLineCharacter | '\\';

NewLineCharacter = {'\n' | '\r'};

EscapedCharacter = '\\' ('\\' | '\'' | '\`' | '\"' | 'n' | 'r' | 't' | UnicodeSequence);

UnicodeSequence = 'U+' HexadecimalDigit HexadecimalDigit HexadecimalDigit HexadecimalDigit [HexadecimalDigit [HexadecimalDigit]];

Space = {(' ' | NewLine | Comment)+};

NewLine = {'\n\r' | '\r\n' | NewLineCharacter};

SingleLineComment = '//' NonNewLineCharacter*;

MultipleLineComment = '/*' (Comment | !'*/' Character)* '*/';

Comment = SingleLineComment | MultipleLineComment;

