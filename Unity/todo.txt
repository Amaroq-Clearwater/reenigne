Implement _emit
  It can be used as an operator (lower priority than function call, higher than ^) or a statement

Implement #{} literal array syntax
  Or use []?

How do we define the inner types of Compiler?

What is the relationship between types and atoms?
  An atom can be thought of as a vtable pointer. It has type Atom and if type T
   has a run-time idenitity its atom is T::atom.
  An atom by itself doesn't tell you:
    How many members the type has
    What their types are
    What the methods in the vtable are
   You need a separate type definition to find those.
  Given an atom, all you can do with it is compare it to other Atom values for
   equality.

Symbol is a completely dynamic type (with no vtable) in the C++ implementation
 due to the limitations of C++. In Unity, each Symbol atom should correspond to
 a real type, and we should still be able to do all the pattern-matching stuff
 we need to.

Implement construction expressions

Make compiler look for functions to resolve missing overloads
Allow implicit type conversions
  Need to know about all the overloads, the types of the arguments, the available conversion functions and their costs
Algorithm for resolving names in the presence of overloading
  Make a list of all the targets with matching names and potential number of arguments
  Choose the one which fits best.
  Use dynamic programming to figure out a "cost" associated with converting any type to any other type
    Allow conversion operators to specify a cost?

Add classes
  Implement resolveSize
  Call resolveSize
  Class contents:
    public/private/protected
    friend declaration
    member variable
    method definition
    include
      Or have a 'Class X from y' form instead?

Implement switch:
  compileStatement: atomSwitchStatement
  More detail in switch type mismatch error
  Allow overloads over operator== for switch comparison

Implement closures/inner functions/lambdas:
  At least initially, disallow usage of the closure outside of the scope of the variables it uses
    If it turns out to be useful, make scopes heap allocated and reference counted (when necessary) and allow them to persist outside the enclosing scope
  How does static chain pointer work?
    Might return multiple closures referencing the same environment
      => closure is "fat pointer" with pointers to environment object and method
    http://www.hokstad.com/how-to-implement-closures.html
  Allow inner functions to return return, break and continue
    Need unwinding to remove intermediate frames
    Can a function that accepts a closure specify that the closure must not throw?
      Can the function catch these pseudo-exceptions? My intuition says no.

Implement template functions

Add Int32, UInt32 and NInt32 types
Add 8-bit and 16-bit types
Add 64-bit types
Add behaviors for types Bit, Byte, Character, Word, UInt
Add hexadecimal constants
Add character literals
Add array/structure literals #{1,2,3}
Add truncateCast
Add operator  2 .                 LtR
  Argument dependent lookup: need to pass a TypeList to resolveTypes() so that we can figure out which function overload is being called?
Add operator  2 ->                LtR
Add operator  2 []                LtR  LValue
  The return value of [] needs to be dereferenced to obtain an LValue or RValue.
Add operator  4 sizeof            RtL
Add template classes
  Add type Fixed<N,B>
    Add fixed-point decimal and hexadecimal constants (0x0000.0001)
  Add type Complex<R>
  Add type Rational<I>
Add template functions
Compile to executable code
  Implement calling external functions
  Need to evaluate dll expression at compile time
Add statement `assembly` AssemblyStatement
Make include statement work
  compileStatement: atomIncludeStatement
  Problem: the include statement could change the meaning of the expression in its argument, if (for example) it redefined a function that was called to construct the argument.
  Solution: to evaluate the expression, pretend that the included file is empty and evaluate the filename on that assumption.
Add operator  1 ::                LtR
  Or just use . instead?
    Uses:
      At start to escape to global namespace
        Maybe have an "outer" keyword here instead?
          How is an "outer" level determined given that every variable declaration creates a new scope?
            Just walk up scopes until we find another variable of the right name?
      Inner type T::U
      Static value T::u
      Static method T::u()
Add operator  2 typeid            LtR
Add const_cast, dynamic_cast, reinterpret_cast and static_cast (LtR, precedence 2)
Add operator  4 ()(type cast)     RtL
Add operator  5 .*                LtR
Add operator  5 ->*               LtR
Add operator 16 ?:                RtL
Need a better error message when statement isn't recognized as such
For String::throwUnexpected(), print name (or hex) of found character to avoid putting unprintable characters in error messages.
  Need a way to convert any codepoint into an ASCII printable string
    Use U+xxxx
Make sure we have a sensible error message when no memory can be allocated at all
Add 1-bit, 2-bit, 4-bit, 128-bit, 256-bit and 512-bit types
Add "fastest at least n bit" integral and floating-point types
Add half/double/quad Word/Int/UInt types
Implement constructors and destructors
  Add operator  4 new               RtL
  Add operator  4 new[]             RtL
  Add statement `delete` ["[" "]"] Expression ";"
  Implement malloc/free
  Call destructors when leaving scope
    Need to keep track of where scopes end
Implement exceptions
  throw statement
  try/catch/finally statement
  catch block determination
    Want to catch by run-time type, not compile-time type, so need a table for each catch block and each subtype of a thrown type
  unwinding
  return ThrowStatement* from FunctionDeclaration
Floating point:
  Add Float32 and Float64 types
  Add Float16 and Float128 types
  Add type Float
  Add floating-point constants
Add arbitrary precision WordString, Integer, Unsigned and Floating types
  Add compile-time evaluation of arbitrary precision Integers and arbitrary precision constants
Add coroutines
Detect pure functions
Add statement `for` "(" Type ValueIdentifer `in` Expression ")" LoopBody
Add goto and label statements
Optimization: Add a LabelledSymbol class deriving from Symbol so that Symbol doesn't need a _label member
Optimization: Shrink Symbol::_labelled if the second half is all empty to avoid pooling memory.
  To do this, need to remove elements from the list when they're at the end of the array.
Optimization: change SymbolArray to an AVL tree
Change semicolon parsing on increment/decrement/expression statements so that "for (i = 0; i < n; ++i)" is valid.
Add operator ".." which creates a Range value from two integers
  Allow a String to be indexed by a Range to yield a substring
Allow "a < b < c" (same as "a < b && b < c" but b is only evaluated once) and similar expressions

Measure stack size and allocate frames for unbounded recursive functions on heap

Advanced types
  null: "Null" - only one value: "null"
  sequence: "[T]" or "Reference<ISequence<T>>" or "Empty | (T, [T])"
  tuple: "(U, V)" or "Tuple<U, V>"
  union: "U | V" or "Reference<Union<U, V>>" - get U out with "w.U" or "w as U" or "cast<U>(w)", find out if it is U with "w is U"
  option: "Maybe<T>" or "T?" or "T | Null"
  function: "U -> V"

Have a run-time type operator typeOf()?
  And "Type" - the type of the value that it returns
  The Type object of type T is T::type.
  print("Compile-time type is ${TypeOf(x)::type}, run-time type is ${typeOf(x)}\n");
    Type has a toString() method, but the strings are not linked in unless used.

Allow parameters to have type Auto which creates a template function?

Have a Symbol-like type built in - the atoms are Type objects (or pointers to them)

Need to thing about what Type::toString() returns for class types
  keep track of first name assigned to type if it's defined with an alias

Optimization: If g is only ever called by f, we can do the stack correction for g at the same time we do the stack correction for f.

atomExit is not currently used

Value range propagation

The operator*() function call returns a pointer, so we need to actually dereference it to get an LValue or RValue.

adapters.txt: Allow different types for the two operands (particularly the relational ones)?
