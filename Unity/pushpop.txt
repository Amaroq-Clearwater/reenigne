// Adjust before after
//        [sp]   [sp+adj]    contains the last value pushed - the return address
//        [sp+4] [sp+adj+4]  contains the (first word of the) first argument
//        [sp-4] [sp+adj-4]  contains the (first word of the) first variable
// Need an algorithm to compute offsets of parameters and arguments and the stack adjustment
//   Treat parameters as an object, round up to stack alignment (4 bytes for 32-bit)
//     Need an algorithm to compute offsets for an object

// sp increasing ^
//   last incoming argument word
//   ...
//   first incoming argument word     
//   return address                   
//   [optional alignment word]        
//   last variable word               
//   ...                              
//   first variable word              
//   [optional alignment word]
//   last outgoing argument word
//   ...
//   first outgoing argument word
//   [optional alignment word]
//   return address

// => The calling function has the responsibility of aligning the stack.
//   What happens if f doesn't need the stack aligned, but g (called by f) does?
//     f needs to decide in its prologue whether to add the alignment word or not
//     Or, it can specify that its caller needs to align the stack

Should functions be able to use PUSH and POP?
  They might be slower (depending on the CPU) but often take up less space. We
   should allow the compiler the possibility of generating them when they are
   preferred.
  Two styles of code generation:
    1) PUSH/POP
      * put everything on the stack
      * easy compilation
      * don't reserve stack space for outgoing arguments
      * shouldn't have two arguments in a single stack slot
    2) no PUSH/POP
      * may need to create extra variables for temporaries
      * arguments are laid out as in a class
      * probably faster on modern machines
    Can these styles interact in a single function?
      If we PUSH something under the outgoing arguments area (storing a
       temporary variable across a function call), then we need to PUSH the
       arguments too.
    When writing directly in intermediate language, probably want to be able to use push and pop.
Plan:
  First implementation:
    Use PUSH/POP

  Reserve stack space for outgoing arguments
   Use this space if PUSH/POP are not preferred


When using PUSH/POP
  Don't need to save space in frame for arguments
  Can have functions pop their arguments


