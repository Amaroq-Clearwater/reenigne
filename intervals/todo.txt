Debugging helpers:
  Make simulator.cpp output diagrams like timings.txt

Use integers instead of doubles for time
  4MHz +/- 1% in 256 steps:
    measure time in units of cycle/(100*256):
      102.4GHz
    time step = 0.009765625 ns
  if time gets too high, simulate everything up to current t and then rebase so that t=0 again.
    1) avoid having to wait ages for a component that is a long way behind to catch up
    2) avoid incorrect results due to timers wrapping

vary the clock speed according to a normal distribution - gradually increase the standard deviation and see when it breaks
  Are the clock speeds of real PIC12F508s normal or uniform?
    Write code for the programmer code and speed tester (ideal speed should be 1/3 MHz)
  Might need to rearrange simulateCycle() as simulateToTime()

Simulate clock drift, jitter, output settling time

When the hardware doesn't work:
  Check that MOVWL OSCCAL works correctly when it isn't the first (second) instruction executed
  Get something simpler working
  Run timing tests (make sure MOVWF PCL takes one cycle)

