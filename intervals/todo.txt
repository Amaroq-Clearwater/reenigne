randomly add and remove bars as we're running



vary the clock speed according to a normal distribution - gradually increase the standard deviation and see when it breaks
  Are the clock speeds of real PIC12F508s normal or uniform?
    Write code for the programmer code and speed tester (ideal speed should be 1/3 MHz)
  Might need to rearrange simulateCycle() as simulateToTime()

Simulate clock drift, jitter, output settling time

intervals.asm:
  Can save some space (and 4 cycles per word) by combining write and sendSync
    When writing the last byte we don't want to sendSync (or it will be interpreted as another prime) so set AlowBhigh and AhighBlow to IIII first
      Combine "CALL write" and "GOTO reset" in the 4 doA routines
        Then the time from "CALL receiveSync" to "CALL write" won't be consistent - need to call "writeNoDelay" instead (possibly also increase delay on write)
          Need 5 cycles of delay
            GOTO  writeAndReset 2
            MOVLW IIII          1
            MOVWF AlowBhigh     1
            MOVWF AhighBlow     1
  Delaying the data reads by 1 cycle won't affect synchronization, but could affect data transmission reliability - check this
