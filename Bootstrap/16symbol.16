; This is the bootstrapping compiler step 16 (written in step 16 language)
; This file contains the code for symbol tables and structural programming elements


; Format of symbol EBX:
;   D[EBX]      next         Next entry pointer (0 if this is the last)
;   D[EBX+4]    dest         Destination (types 0, 1, 2), Offset from BP (3), Import pointer (4) or subscope symbol table (5)
;   D[EBX+8]    type         0 = normal named or anonymous  1 = case label (name contains value)  2 = default case label  3 = variable relative to BP  4 = indirect  5 = subscope
;   D[EBX+0c]   length       Symbol length (0 for anonymous labels, default labels and subscopes, 4 for case labels)
;   EBX+010     name         Symbol string data

; Format of symbol table BX:
;   D[EBX]      current      Pointer to last symbol returned by add_label
;   D[EBX+4]    parent       Pointer to parent symbol table
;   D[EBX+8]    first        Pointer to first entry
;   D[EBX+0c]   break_dest   Symbol for break or return destination
;   D[EBX+010]  max_stack    Number of bytes to pop off stack at end of function
;   D[EBX+014]  stack        Offset from EBP of next stack variable to allocate (function) or number of bytes to add to function's stack when leaving scope

; Format of dll name structure BX:
;   D[EBX]      next         Next dll name
;   D[EBX+4]    imports      Number of imports from this dll
;   D[EBX+8]    first        First import from this dll
;   D[EBX+0c]   length       Length of dll name
;   EBX+010     name         dll name

; Format of import structure BX:
;   D[EBX]      next         Next import
;   D[EBX+4]    dest         Destination of symbol
;   D[EBX+8]    symbol       Symbol with name of import


global_table: DD 0   ; Pointer to global symbol table
func_table:   DD 0   ; Pointer to current function's symbol table
loop_table:   DD 0   ; Pointer to current loop's symbol table (for breaks)
scope_table:  DD 0   ; Pointer to current scope's symbol table

first_dll_name: DD 0
num_dlls: DD 0
total_imports: DD 0



; This function assembles a block of statements.
; It stops when the next token is not the start of a statement (i.e. '}' or 0)
; statements := |
;               statement statements

function assemble_statements()
{
  while (~parse_statement()) { }
}



; This function assembles a statement and returns false
; If there is no statement, it returns true
; statement := mnemonic <args> |
;              identifier: |
;              identifier(expr) |
;              { statements } |
;              function identifier(arg_list) statement |
;              if (expr) statement |
;              if (expr) statement else statement |
;              while (expr) statement |
;              do statement while (expr) |
;              auto identifier |
;              break |
;              return expr |
;              switch(expr) { case_blocks }

unexpected_identifier_token_msg: DD 34 DB "Unexpected token after identifier",0a

function parse_statement()
{
  PUSH EBX
  MOV AL,[token]
  CBW
  CWDE
  switch (EAX) {
    case 'I' {
      get_next_token()                      ; Slurp the identifier
      MOV AL,[token]
      CBW
      CWDE
      switch (EAX) {
        case ':' parse_label()
        case '(' parse_fncall()
        default  error_exit(unexpected_identifier_token_msg)
      }
    }
    case 'M' parse_mnemonic()
    case '{' parse_scope()
    case 'K' {
      MOV AL,[token_arg]
      CBW
      CWDE
      switch (EAX) {
        case 'F' parse_function()
        case 'I' parse_if()
        case 'W' parse_while()
        case 'O' parse_do()
        case 'A' parse_auto()
        case 'B' parse_break()
        case 'R' parse_return()
        case 'S' parse_switch()
        default { MOV EAX,true JMP end }
      }
    }
    default { MOV EAX,true JMP end }
  }
  XOR EAX,EAX
  end:
  POP EBX
}



; This function parses a function call statement
;             identifier(expr)

function parse_fncall()
{
  PUSH EBX
  PUSH ESI
  MOV EBX,expr_from_symbol(symbol_from_identifier())
  parse_expr0p()
  MOV ESI,simplify(EBX)
  gen_eax(ESI)
  free_ast(ESI)
  POP ESI
  POP EBX
}



; This function parses a label statement
;             identifier:

function parse_label()
{
  add_named_label()
  get_next_token()                          ; Slurp the :
}



; This function parses a scope statement (block)
;             { statements }

unmatched_curly_msg: DD 12 DB "Unmatched }",0a

function parse_scope()
{
  get_next_token()                          ; Slurp the {
  enter_scope()
  assemble_statements()
  leave_scope()
  if (B[token] != '}')
    error_exit(unmatched_curly_msg)
  get_next_token()                          ; Slurp the }
}



; Parse (and ignore) a '(' - error if it isn't there.

expected_paren_msg: DD 11 DB "Expected (",0a

function parse_open()
{
  if (B[token] != '(')
    error_exit(expected_paren_msg)
  get_next_token()                          ; Slurp the (
}



; Parse (and ignore) a ')' - error if it isn't there.

function parse_close()
{
  if (B[token] != ')')
    error_exit(unmatched_paren_msg)
  get_next_token()                          ; Slurp the )
}



; This function parses a function definition statement
;             function identifier(arg_list) statement
; arg_list := |
;             args
; args := identifier |
;         identifier,args

expected_function_name_msg: DD 25 DB "Expected a function name",0a
argument_expected_msg: DD 18 DB "Argument expected",0a
dllname_expected_msg: DD 29 DB "Expected a string (DLL name)",0a

function parse_function()
{
  PUSH EBX
  PUSH EDI
  PUSH ESI
  auto outer_func
  auto arg_offset

  get_next_token()                          ; Slurp the function
  if (B[token] != 'I')
    error_exit(expected_function_name_msg)
  MOV ESI,add_named_label()

  MOV D[outer_func],[func_table]
  enter_scope()
  MOV D[func_table],[scope_table]


  MOV D[arg_offset],8
  get_next_token()                          ; Slurp the identifier
  parse_open()

  if (B[token] != ')')
    do {
      if (B[token] != 'I')
        error_exit(argument_expected_msg)
      add_auto([arg_offset])
      ADD D[arg_offset],4
      if (B[token] != ',')
        break
      get_next_token()                      ; Slurp the comma
    } while(true)

  parse_close()

  if (B[token]=='K' & B[token_arg]=='M') {
    get_next_token()                        ; Slurp the from
    if ([first_phase]) {
      MOV B[ESI+8],4

      if (B[token]!='"')
        error_exit(dllname_expected_msg)

      auto dll_name
      MOV EBX,string_create([token_arg_high],[token_arg],0c)
      MOV [dll_name],EBX
      MOV D[EBX],0
      MOV D[EBX+4],0
      MOV D[EBX+8],0

      MOV EDI,first_dll_name                        ; current = &first_dll_name
      while ([EDI]) {                               ; while (*current) {
        if (string_equals([dll_name]+0c,[EDI]+0c)) {  ;   if (string_equals(&dll_name->length,&current->length) {
          free([dll_name])
          break
        }
        MOV EDI,[EDI]                               ;   current=current->next
      }
      done {
        MOV D[EDI],[dll_name]                       ;   *current=dll_name
        INC D[num_dlls]
      }
      auto current_dll
      MOV EDI,[EDI]                                 ; current=*current
      MOV [current_dll],EDI                         ; current_dll=current

      ADD EDI,8                                     ; current=current.first
      while ([EDI]) {                               ; while (*current) {
        if (string_equals(ESI+0c,[[EDI]+8]+0c)) {   ;   if (string_equals(&func->length,&current->symbol->length) {
          ; We already have this import!
          MOV EDI,[EDI]                             ;     current=*current
          break
        }
        MOV EDI,[EDI]                                 ;   current=current->next
      }
      done {
        MOV D[EDI],malloc(0c)                       ;   *current=malloc(0c)
        MOV EDI,[EDI]                               ;   current=*current
        MOV D[EDI],0                                ;   current.next=0
        MOV [EDI+8],ESI                             ;   current.symbol=func
        INC D[total_imports]
        INC D[[current_dll]+4]                      ;   ++current_dll.imports
      }

      MOV [ESI+4],EDI                               ; func->dest=current
    }
    get_next_token()                        ; Slurp the dll name
  }
  else {
    if ([first_phase])
      MOV D[[func_table]+010],0      ; func_table->max_stack = 0
    MOV D[[func_table]+014],-4     ; func_table->stack = -4

    if ([[func_table]+010]!=0 | [arg_offset]!=8) {
      asm_byte(055)                  ; assemble "PUSH EBP"
      asm_byte(089)
      asm_byte(0e5)                  ; assemble "MOV EBP,ESP"
    }

    MOV ECX,[[func_table]+010]       ; func_table->max_stack
    if (ECX) {
      MOV EAX,ECX
      CBW
      CWDE
      if (EAX == ECX) {
        PUSH ECX
        asm_byte(083)
        asm_byte(0ec)
        asm_byte(@)                  ; assemble "SUB ESP,func_table->max_stack"
      }
      else {
        PUSH ECX
        asm_byte(081)
        asm_byte(0ec)
        POP ECX
        asm_dword(ECX,0)             ; assemble "SUB ESP,func_table->max_stack"
      }
    }

    parse_statement()

    MOV ECX,[[func_table]+0c]        ; func_table->break_dest
    if (ECX)
      set_label(ECX)

    if (D[[func_table]+010]) {       ; func_table->max_stack
      asm_byte(089)
      asm_byte(0ec)                  ; assemble "MOV ESP,EBP"
    }
    if (D[arg_offset]!=8 | D[[func_table]+010])
      asm_byte(05d)                  ; assemble "POP EBP"

    if (D[arg_offset]==8)
      asm_byte(0c3)
    else {
      asm_byte(0c2)
      asm_word([arg_offset]-8)       ; assemble "RET [arg_offset]-8"
    }
  }
  leave_scope()
  MOV D[func_table],[outer_func]
  POP ESI
  POP EDI
  POP EBX
}



; This function parses an "if" statement
;             if (expr) statement
;             if (expr) statement else statement

function parse_if()
{
  PUSH ESI
  PUSH EDI
  get_next_token()                          ; Slurp the if
  parse_open()
  MOV ESI,simplify(parse_expr())
  gen_ea(ESI,08b,0,2,1)          ; generate "MOV EAX,expr"
  free_ast(ESI)
  parse_close()
  asm_byte(085)
  asm_byte(0c0)                  ; assemble "TEST EAX,EAX"

  MOV ESI,add_anon_label()
  gen_jcond(074,ESI)             ; assemble "JZ skip"

  parse_statement()

  if (B[token]=='K' & B[token_arg]=='E') {
    get_next_token()                          ; Slurp the else
    MOV EDI,add_anon_label()
    gen_jmp(EDI)
  }
  else
    MOV EDI,0

  set_label(ESI)

  if (EDI) {
    parse_statement()
    set_label(EDI)
  }
  POP EDI
  POP ESI
}



; This function parses a "while" statement
;             while (expr) statement
;             while (expr) statement done statement

function parse_while()
{
  PUSH ESI
  auto loop_test
  auto outer_loop
  auto loop_top

  get_next_token()                          ; Slurp the while
  parse_open()
  MOV D[loop_test],add_anon_label()
  gen_jmp([loop_test])
  MOV D[outer_loop],[loop_table]
  enter_scope()
  MOV D[loop_table],[scope_table]
  MOV D[loop_top],add_anon_label()
  set_label([loop_top])

  PUSH simplify(parse_expr())
  parse_close()
  parse_statement()
  set_label([loop_test])

  POP ESI
  gen_ea(ESI,08b,0,2,1)           ; generate "MOV EAX,expr"
  free_ast(ESI)
  asm_byte(085)
  asm_byte(0c0)                  ; assemble "TEST EAX,EAX"
  gen_jcond(075,[loop_top])      ; assemble "JNZ loop_top"

  if (B[token]=='K' & B[token_arg]=='N') {
    get_next_token()                          ; Slurp the done
    parse_statement()
  }

  MOV ECX,[[scope_table]+0c]     ; scope_table->break_dest
  if (ECX)
    set_label(ECX)                 ; set_label(scope_table->break_dest)

  leave_scope()
  MOV D[loop_table],[outer_loop]
  POP ESI
}



; This function parses a "do" statement
;             do statement while (expr)

expected_while_msg: DD 15 DB "Expected while",0a

function parse_do()
{
  PUSH ESI
  auto outer_loop
  auto loop_top

  get_next_token()                          ; Slurp the do

  MOV D[outer_loop],[loop_table]
  enter_scope()
  MOV D[loop_table],[scope_table]
  MOV D[loop_top],add_anon_label()
  set_label([loop_top])

  parse_statement()

  if (B[token]!='K' | B[token_arg]!='W')
    error_exit(expected_while_msg)

  get_next_token()                          ; Slurp the while
  parse_open()
  MOV ESI,simplify(parse_expr())
  gen_ea(ESI,08b,0,2,1)          ; generate "MOV EAX,expr"
  free_ast(ESI)
  asm_byte(085)
  asm_byte(0c0)                  ; assemble "TEST EAX,EAX"
  gen_jcond(075,[loop_top])      ; assemble "JNZ loop_top"
  parse_close()

  if (B[token]=='K' & B[token_arg]=='N') {
    get_next_token()                        ; Slurp the done
    parse_statement()
  }

  MOV ECX,[[scope_table]+0c]     ; scope_table->break_dest
  if (ECX)
    set_label(ECX)               ; set_label(scope_table->break_dest)

  leave_scope()
  MOV D[loop_table],[outer_loop]
  POP ESI
}



; This function parses an "auto" statement (stack variable definition)
;             auto identifier

auto_variable_need_func_msg: DD 43 DB "auto variables only possible in a function",0a

function parse_auto()
{
  PUSH EBX
  get_next_token()                          ; Slurp the auto
  MOV EBX,[func_table]
  if (EBX == 0)
    error_exit(auto_variable_need_func_msg)

  MOV EDX,[EBX+014]              ; func_table->stack
  PUSH EDX
  PUSH EBX
  add_auto(EDX)
  POP EBX
  POP EDX
  if (-EDX > [EBX+010]) {        ; if (-func_table->stack > func_table->max_stack) {
    ADD D[EBX+010],4               ; func_table->max_stack += 4
    MOV D[last_phase],false
  }

  SUB D[EBX+014],4               ; func_table->stack -= 4
  if (D[func_table] != D[scope_table])
    ADD D[[scope_table]+014],4     ; scope_table->stack += 4
  POP EBX
}


; This function does the things common to "break" and "return"

function gen_break(table)
{
  PUSH ESI
  MOV ESI,[table]
  if (D[ESI+0c] == 0) {          ; if (table->break_dest == 0) {
    add_anon_label()
    MOV D[ESI+0c],EAX              ; table->break_dest = add_anon_label()
  }
  gen_jmp([ESI+0c])              ; assemble "JMP table->break_dest"
  POP ESI
}



; This function parses a "break" statement
;             break

function parse_break()
{
  get_next_token()                          ; Slurp the break
  gen_break([loop_table])
}



; This function parses a "return" statement
;             return expr

function parse_return()
{
  PUSH ESI
  get_next_token()                          ; Slurp the return
  MOV ESI,simplify(parse_expr())
  gen_ea(ESI,08b,0,2,1)           ; generate "MOV EAX,expr"
  free_ast(ESI)
  gen_break([func_table])
  POP ESI
}



; This function parses a "switch" statement
;             switch(expr) { case_blocks }
; case_blocks := case_block |
;                case_blocks case_block
; case_block := case_labels statement
; case_labels := case_label |
;                case_labels case_label
; case_label := case expr |
;               default

expected_curly_msg: DD 11 DB "Expected {",0a
multiple_defaults_msg: DD 31 DB "Only one default label allowed",0a
expected_number_msg: DD 18 DB "Expected a number",0a
expected_case_msg: DD 25 DB "Expected case or default",0a

function parse_switch()
{
  PUSH EBX
  PUSH ESI
  auto switch_data
  auto switch_end
  auto default_label

  enter_scope()
  get_next_token()                          ; Slurp the switch
  parse_open()
  MOV ESI,simplify(parse_expr())
  gen_ea(ESI,08b,2,2,1)          ; assemble "MOV EDX,expr"
  free_ast(ESI)
  parse_close()

  if (B[token] != '{')
    error_exit(expected_curly_msg)
  get_next_token()                          ; Slurp the {

  auto num_cases
  MOV D[num_cases],0
  auto num_defaults
  MOV D[num_defaults],0
  MOV EBX,[[scope_table]+8]      ; current = scope_table->first

  while (EBX) {                  ; while (current != 0) {
    if (D[EBX+8] == 1)             ; if (current->type == 1)
      INC D[num_cases]
    else if (D[EBX+8] == 2) {      ; else if (current->type == 2) {
      INC D[num_defaults]
      if (D[num_defaults] > 1)
        error_exit(multiple_defaults_msg)
    }
    MOV EBX,[EBX]                  ; current = current->next
  }


  asm_byte(0b9)
  asm_dword(D[num_cases]+1)      ; assemble "MOV ECX,num_cases+1"
  asm_byte(056)                  ; assemble "PUSH ESI"
  MOV D[switch_data],add_anon_label()
  asm_byte(0be)
  destination_from_label([switch_data])
  asm_dword(EAX)                 ; assemble "MOV ESI,switch_data"
  asm_byte(0ad)                  ; assemble "switch_looptop: LODSD"
  asm_byte(089)
  asm_byte(0c3)                  ; assemble "MOV EBX,EAX"
  asm_byte(0ad)                  ; assemble "LODSD"
  asm_byte(039)
  asm_byte(0d0)                  ; assemble "CMP EAX,EDX"
  asm_byte(0e0)
  asm_byte(0f8)                  ; assemble "LOOPNE switch_looptop"
  asm_byte(05e)                  ; assemble "POP ESI"
  asm_byte(0ff)
  asm_byte(0e3)                  ; assemble "JMP EBX"
  set_label([switch_data])
  MOV D[switch_end],add_anon_label()
  MOV D[default_label],[switch_end]

  MOV EBX,[[scope_table]+8]      ; current = scope_table->first
  while (EBX) {
    if ([EBX+8] == 1) {            ; if (current->type == 1) {
      PUSH EBX
      asm_dword([EBX+4])             ; asm_dword(current->dest,current->dest_high)
      POP EBX
      PUSH EBX
      asm_dword([EBX+010])           ; asm_dword(current->value,current->value_high)
      POP EBX
    }
    else if ([EBX+8] == 2)         ; else if (current->type == 2)
      MOV D[default_label],EBX
    MOV EBX,[EBX]                  ; current = current->next
  }

  MOV EBX,[default_label]
  asm_dword([EBX+4])             ; assemble default_label->dest
  asm_dword(0)                   ; assemble 0 ("value" of default case - will be ignored)

  ADD D[num_cases],[num_defaults]

  ; State 1 - need a case or default label

  state1:
  if (B[token] == 'K' & (B[token_arg] == 'C' | B[token_arg] == 'D')) {
    if (B[token_arg] == 'C') {
      get_next_token()                      ; Slurp the case
      if (B[token] != '0')
        error_exit(expected_number_msg)
      set_label(add_case_label(1,[token_arg]))
      get_next_token()                      ; Slurp the number
    }
    else {
      get_next_token()                      ; Slurp the default
      set_label(add_case_label(2,0))
    }
  }
  else
    error_exit(expected_case_msg)

  ; State 2 - need a statement or case or default label

  state2:
  parse_statement()
  TEST EAX,EAX
  JNZ state1

  DEC D[num_cases]
  CMP D[num_cases],0
  JE state3

  gen_jmp([switch_end])

  ; State 3 - need a } or case or default label

  state3:
  CMP B[token],'}'
  JNE state1

  get_next_token()                          ; Slurp the }
  set_label([switch_end])
  leave_scope()

  POP ESI
  POP EBX
}



; This function adds a label to the current scope

function add_symbol(label,type,value)
{
  PUSH EBX
  MOV EBX,[label]
  if ([first_phase]) {
    if (EBX == 0)
      if ([type]==1) {
        MOV EBX,malloc(014)          ; label = malloc(014)
        MOV D[EBX+0c],4              ; label->length = 4
        MOV D[EBX+010],[value]       ; label->value = value
      }
      else {
        MOV EBX,malloc(010)          ; label = malloc(010)
        MOV D[EBX+0c],0              ; label->length = 0
      }
    MOV D[EBX],0                 ; label->next = 0
    MOV D[EBX+8],[type]          ; label->type = type
    MOV ECX,EBX                  ; label
    MOV EBX,[scope_table]
    if (D[EBX+8] == 0)           ; if (scope_table->first == 0)
      MOV D[EBX+8],ECX             ; scope_table->first = label
    else {
      PUSH EBX
      MOV EBX,[EBX]                ; scope_table->current
      MOV [EBX],ECX                ; scope_table->current->next = label
      POP EBX
    }
  }
  else {
    if (EBX)                     ; if (label != 0)
      free(EBX)                    ; free(label)
    MOV EBX,[scope_table]
    if ([EBX] == 0)              ; if (scope_table->current == 0)
      MOV ECX,[EBX+8]              ; label = scope_table->first
    else {
      PUSH EBX
      MOV EBX,[EBX]                ; scope_table->current
      MOV ECX,[EBX]                ; label = scope_table->current->next
      POP EBX
    }
  }
  MOV [EBX],ECX                ; scope_table->current = label
  MOV EAX,ECX                  ; return label
  POP EBX
}



; This function creates a new subscope and makes it the active scope

function enter_scope()
{
  PUSH EBX
  PUSH ESI
  XOR EBX,EBX
  if ([first_phase]) {
    MOV EBX,malloc(018)              ; subscope = malloc(018)
    MOV D[EBX+4],[scope_table]       ; subscope->parent = scope_table
    MOV D[EBX+8],0                   ; subscope->first = 0
    MOV D[EBX+0c],0                  ; subscope->break_dest = 0
  }
  PUSH EBX
  MOV ESI,add_symbol(0,5,0)        ; symbol = add_symbol(0,5,0)
  POP EBX
  if ([first_phase])
    MOV [ESI+4],EBX                  ; symbol->dest = subscope
  else
    MOV EBX,[ESI+4]                  ; subscope = symbol->dest
  MOV [scope_table],EBX            ; scope_table = subscope
  MOV D[EBX],0                     ; scope_table->current = 0
  MOV D[EBX+014],0                 ; scope_table->stack = 0
  POP ESI
  POP EBX
}



; This function leaves the current outermost scope and returns to its parent

function leave_scope()
{
  PUSH EBX
  MOV ECX,[[scope_table]+014]
  ADD [[func_table]+014],ECX            ; func_table->stack += scope_table->stack
  MOV D[scope_table],[[scope_table]+4]  ; scope_table = scope_table->parent
  POP EBX
}



; This function adds an anonymous label to the current scope

function add_anon_label()
{
  add_symbol(0,0,0)
}



; This function adds a named label to the current scope

function add_named_label()
{
  add_symbol([identifier],0,0)
  PUSH EAX
  set_label(EAX)                  ; set_label(label)
  POP EAX                         ; return label
}



; This function adds a stack variable (auto or function argument) to the current scope

function add_auto(offset)
{
  MOV EBX,add_symbol([identifier],3,0)
  MOV D[EBX+4],[offset]           ; symbol->dest = offset
  get_next_token()                          ; Slurp the variable name
}



; This function adds a case label to the current scope

function add_case_label(type,value)
{
  add_symbol(0,[type],[value])
}



; This function sets the destination of a label to be the current destination

function set_label(label)
{
  PUSH EBX
  MOV EBX,[label]
  if ([EBX+8]!=4 & [EBX+4]!=[ip]) {
    MOV D[EBX+4],[ip]
    MOV D[last_phase],false
  }
  POP EBX
}



; This function returns the destination of a label as an expr

function expr_from_symbol(symbol)
{
  PUSH EBX
  PUSH ESI

  MOV EBX,malloc(8)               ; expr = malloc(8)
  MOV B[EBX],'N'                  ; B[expr] = 'N'
  MOV B[EBX+1],1                  ; B[expr+1] = 1
  MOV ESI,[symbol]
  if (ESI) {
    MOV D[EBX+4],[ESI+4]            ; D[expr+4] = symbol->dest
    if (D[ESI+8] == 3) {            ; if (symbol->type == 3)  ; BP-relative
      MOV B[EBX+1],0                  ; B[expr+1] = 0
      PUSH EBX
      MOV EBX,malloc(2)               ; reg_bp = malloc(2)
      MOV B[EBX],'R'                  ; B[reg_bp] = 'R'
      MOV B[EBX+1],5                  ; B[reg_bp+1] = 5 (BP)
      PUSH EBX
      MOV EBX,malloc(0c)              ; sum = malloc(0c)
      MOV B[EBX],'+'                  ; B[sum] = '+'
      POP D[EBX+4]                    ; D[sum+4] = reg_bp
      POP D[EBX+8]                    ; D[sum+8] = expr
    }                                 ; expr = sum
    else if (D[ESI+8] == 4) {      ; else if (symbol->type == 4)  ; import table pointer
      MOV ESI,[ESI+4]
      MOV D[EBX+4],[ESI+4]            ; D[expr+4] = symbol->dest->dest

      PUSH EBX
      MOV EBX,malloc(8)               ; outer = malloc(8)
      MOV B[EBX],'['                  ; B[outer] = '['
      MOV B[EBX+1],0                  ; B[outer+1] = 0
      POP EAX
      MOV [EBX+4],EAX                 ; D[outer+4] = expr
    }                                 ; expr = outer
  }
  else {
    MOV D[EBX+4],0                  ; D[expr+4] = 0
  }
  MOV EAX,EBX                     ; return expr
  POP ESI
  POP EBX
}



; This function finds a symbol in the current scope and parent scopes, and returns it

label_not_found_msg: DD 7 DB "Label '"
label_not_found_msg2: DD 12 DB "' not found",0a

function symbol_from_identifier()
{
  PUSH ESI
  PUSH EDI

  MOV ESI,[scope_table]           ; table = scope_table
  do {
    MOV EDI,[ESI+8]                 ; current = table->first
    while (EDI) {
      if (string_equals([identifier]+0c,EDI+0c))
        JMP end
      MOV EDI,[EDI]                   ; current = current->next
    }
    MOV ESI,[ESI+4]                 ; table = table->parent
  } while (ESI)                   ; while (table != 0)
  if (~[first_phase]) {
    print_source_context()
    print_str(label_not_found_msg)
    print_str([identifier]+0c)
    print_str(label_not_found_msg2)
    exit()
  }
  else {
    MOV D[last_phase],false
    XOR EDI,EDI                     ; current = 0
  }
  end:
  free([identifier])
  MOV EAX,EDI                     ; return current
  POP EDI
  POP ESI
}



; This function verifies that a symbol is a label and returns its destination

expected_constant_label: DD 24 DB "Expected constant label",0a

function destination_from_symbol(symbol)
{
  PUSH EBX
  MOV EBX,[symbol]
  if (EBX == 0)
    XOR EAX,EAX
  else
    if (D[EBX+8] == 0)            ; symbol->type
      destination_from_label(EBX)
    else
      error_exit(expected_constant_label)
  POP EBX
}



; This function returns the destination of a label

function destination_from_label(label)
{
  PUSH EBX
  MOV EBX,[label]
  MOV EAX,[EBX+4]
  POP EBX
}



; Initialize the symbol tables at the start of the program

function init_tables()
{
  PUSH EBX
  MOV EBX,malloc(014)
  MOV [global_table],EBX
  MOV [scope_table],EBX
  XOR EAX,EAX
  MOV [func_table],EAX
  MOV [loop_table],EAX
  MOV [EBX],EAX               ; global_table->next = 0
  MOV [EBX+4],EAX             ; global_table->parent = 0
  MOV [EBX+8],EAX             ; global_table->first = 0
  MOV [EBX+0c],EAX            ; global_table->break_dest = 0
  MOV [EBX+010],EAX           ; global_table->max_stack = 0
  MOV [EBX+014],EAX           ; global_table->stack = 0
  POP EBX
}
