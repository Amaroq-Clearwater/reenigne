; This is the bootstrapping compiler step 15 (written in step 15 language)
; This file contains the expression parser
; Note that steps 15 onwards push function args onto the stack in the opposite order to pre-15



; AST format (BX = pointer to AST):
; B[BX] - type
;   type='R': register.      B[BX+1] = register number
;   type='N': number.        B[BX+1] = 0 for absolute, 1 for label             W[BX+2] = number
;   type='"': string.        W[BX+2] = length of string                        BX+4    = string
;   type=']': mod/rm         B[BX+1] = size (0 = unknown, 1 = byte, 2 = word)  B[BX+2] = number of bytes  BX+3 = bytes to emit
;   type='[': memory.        B[BX+1] = size (0 = unknown, 1 = byte, 2 = word)  W[BX+2] = AST of interior expression
;   type='@': pop.
;   type='_': negative.      W[BX+2] = AST of negated expression
;   type='~': not.           W[BX+2] = AST of complemented expression
;   type='F': function call. W[BX+2] = AST describing function to call         W[BX+4] = AST of arguments (0 if no arguments)
;   type='A': argument list. W[BX+2] = AST of first argument                   W[BX+4] = AST of rest of arguments (0 if no more arguments)
;   type='*': multiply.      W[BX+2] = AST of 1st multiplicand                 W[BX+4] = AST of 2nd multiplicand
;   type='/': divide.        W[BX+2] = AST of dividend                         W[BX+4] = AST of divisor
;   type='%': modulo.        W[BX+2] = AST of dividend                         W[BX+4] = AST of divisor
;   type='+': add.           W[BX+2] = AST of 1st subexpression                W[BX+4] = AST of 2nd subexpression
;   type='-': subtract.      W[BX+2] = AST of 1st subexpression                W[BX+4] = AST of subexpression to subtract
;   type='l': left-shift.    W[BX+2] = AST of 1st subexpression                W[BX+4] = AST of 2nd subexpression
;   type='r': right-shift.   W[BX+2] = AST of 1st subexpression                W[BX+4] = AST of 2nd subexpression
;   type='<': less-than.     W[BX+2] = AST of 1st subexpression                W[BX+4] = AST of 2nd subexpression
;   type='>': greater-than.  W[BX+2] = AST of 1st subexpression                W[BX+4] = AST of 2nd subexpression
;   type='L': less-or-equ.   W[BX+2] = AST of 1st subexpression                W[BX+4] = AST of 2nd subexpression
;   type='G': greater-or-eq. W[BX+2] = AST of 1st subexpression                W[BX+4] = AST of 2nd subexpression
;   type='e': equal          W[BX+2] = AST of 1st subexpression                W[BX+4] = AST of 2nd subexpression
;   type='n': not equal      W[BX+2] = AST of 1st subexpression                W[BX+4] = AST of 2nd subexpression
;   type='&': and            W[BX+2] = AST of 1st subexpression                W[BX+4] = AST of 2nd subexpression
;   type='^': xor            W[BX+2] = AST of 1st subexpression                W[BX+4] = AST of 2nd subexpression
;   type='|': or             W[BX+2] = AST of 1st subexpression                W[BX+4] = AST of 2nd subexpression



; Returns the size of an AST. BX is preserved

function ast_size(ast)
{
  PUSH BX
  MOV BX,[ast]
  XOR AH,AH
  MOV AL,[BX]

  CMP AL,'R'
  JNE notreg

  ; Register

  MOV AL,[BX+1]
  CMP AL,8
  JGE notword
  word:
  MOV AX,2
  JMP end
  notword:
  CMP AL,010
  JGE word
  MOV AX,1
  JMP end


  notreg:
  CMP AL,']'
  JE ea
  CMP AL,'['
  JNE notea
  ea:
  MOV AL,[BX+1]
  JMP end

  notea:
  XOR AL,AL
  end:
  POP BX
}



; Verifies that the operand sizes size1 and size2 match (not ambiguous or conflicting).
; AX, BX and DX are preserved.

function check_opsize(size1,size2)
{
  PUSH AX
  MOV AL,[size1] | [size2]
  CMP AL,0
  JNE not_zero
  error_exit("Unknown operand size on line: $")
  not_zero:
  CMP AL,3
  JNE good
  error_exit("Operand has wrong size on line: $")
  good:
  POP AX
}



; This function generates code for an instruction expecting a mod/rm sequence
; AX, BX, DX, SI and DI are preserved
function gen_ea(ast,opcode,secondary_arg,size,io)
{
  PUSH AX
  PUSH BX
  PUSH DX
  PUSH SI
  PUSH DI

  SHL B[secondary_arg],3

  MOV BX,[ast]
  simplify()
  MOV AL,[BX]


  CMP AL,'R'
  JNE notreg

  ; Register

  MOV AL,[BX+1]
  CMP AL,8
  JGE reg_notword

  ; Word register

  MOV CX,2
  gpreg:
  check_opsize(CX,[size])
  PUSH AX
  asm_byte([opcode])
  POP AX
  asm_byte(AX | [secondary_arg] | 0c0)
  JMP end

  reg_notword:
  CMP AL,010
  JGE reg_segment

  ; Byte register

  AND AL,7
  MOV CX,1
  JMP gpreg

  ; Segment register

  reg_segment:
  PUSH AX
  check_opsize(2,[size])
  POP AX

  PUSH (AX << 3)+040

  TEST B[io],1
  JZ seg_notinput
  asm_byte(08c)
  POP AX
  PUSH AX
  asm_byte(AX)     ; assemble "MOV AX,<segreg>"
  seg_notinput:

  asm_byte([opcode]) ; assemble the opcode
  asm_byte([secondary_arg] | 0c0)     ; assemble mod/rm sequence AX as the effective address

  TEST B[io],2
  JZ seg_notoutput
  asm_byte(08e)
  POP AX
  PUSH AX
  asm_byte(AX)     ; assemble "MOV <segreg>,AX"
  seg_notoutput:
  POP AX
  JMP end


  notreg:
  CMP AL,']'
  JNE notmodrm

  ; Generate code for an effective address

  check_opsize([BX+1],[size])

  PUSH BX
  asm_byte([opcode])
  POP BX
  MOV CL,[BX+2]
  XOR CH,CH
  MOV SI,BX+3
  MOV AH,[secondary_arg]
  modrm_loop:
  LODSB
  OR AL,AH
  PUSH CX
  asm_byte(AX)      ; emit the mod/rm bytes
  XOR AH,AH
  POP CX
  LOOP modrm_loop
  JMP end


  notmodrm:
  CMP AL,'['
  JNE notmem

  ; Generate code for a memory dereference

  check_opsize([BX+1],[size])

  gen_ea([BX+2],08b,3,2,1)  ; generate "MOV BX,inner expression"
  asm_byte([opcode])
  asm_byte([secondary_arg] | 7)      ; assemble "[BX]"
  JMP end


  notmem:
  ; We now know that this is not an lvalue, so don't allow it for output
  TEST B[io],2
  JZ rvalue
  error_exit("Lvalue required on line: $")

  rvalue:
  gen_stk([ast])  ; generate the expression
  asm_byte(058)     ; assemble "POP AX"
  CMP B[opcode],08b
  JNE notmem_notmovw
  CMP B[secondary_arg],0
  JE end    ; if we're assembling a "MOV AX,expr", don't bother emitting "MOV AX,AX"

  notmem_notmovw:
  asm_byte([opcode]) ; assemble the opcode
  asm_byte([secondary_arg] | 0c0)      ; assemble mod/rm sequence with AX as the effective address


  end:
  POP DI
  POP SI
  POP DX
  POP BX
  POP AX
}



; This function generates code for a predicate

function gen_pred(cond)
{
  gen_ea([BX+4],08b,2,2,1)  ; generate "MOV DX,inner expr"
  asm_byte(058)     ; assemble "POP AX"
  asm_byte(039)
  asm_byte(0d0)     ; assemble "CMP AX,DX"
  asm_byte([cond])
  asm_byte(4)       ; assemble "J<cond> t"
  asm_byte(0b0)
  asm_byte(0)       ; assemble "MOV AL,0"
  asm_byte(0eb)
  asm_byte(2)       ; assemble "JMP t2"
  asm_byte(0b0)
  asm_byte(0ff)     ; assemble "t: MOV AL,0ff"
  asm_byte(098)     ; assemble "t2: CBW"
  asm_byte(050)     ; assemble "PUSH AX"
}



; This function generates a function call

function gen_fncall()
{
  PUSH BX
  gen_stk([BX+4])   ; generate code to push the args onto the stack
  PUSH AX
  PUSH BX
  MOV BX,[BX+2]     ; AST of function to call
  CMP B[BX],'N'
  JNE indirect
  PUSH BX
  asm_byte(0e8)     ; assemble "CALL "
  POP BX
  asm_word([BX+2]-[ip]-2)      ; emit the jump word
  POP BX

  adjust:
  POP AX
  CMP AX,0
  JNA no_adjust
  CMP AX,07f
  JBE adjust_short
  PUSH AX
  asm_byte(081)
  asm_byte(0c4)     ; emit an ADD SP,
  POP AX
  asm_word(AX)      ; emit the stack adjustment
  JMP no_adjust
  adjust_short:
  CMP AX,2
  JE adjust_direct2
  CMP AX,4
  JE adjust_direct4
  PUSH AX
  asm_byte(083)
  asm_byte(0c4)     ; emit an ADD SP,
  POP AX
  asm_byte(AX)      ; emit the stack adjustment
  JMP no_adjust

  indirect:
  POP BX
  gen_ea([BX+2],08b,0,2,1)  ; generate "MOV AX,inner expr"
  asm_byte(0ff)
  asm_byte(0d0)     ; assemble "CALL AX"
  JMP adjust

  adjust_direct4:
  asm_byte(059)     ; emit a POP CX
  adjust_direct2:
  asm_byte(059)     ; emit a POP CX
  no_adjust:

  POP BX
}



; This function generates code to push the value of the AST arg1 onto the stack. BX, SI and DI are preserved.
; If the AST is an argument list, it is put on the stack (first argument pushed first) and the number of bytes pushed is returned in AX.

function gen_stk(ast)
{
  PUSH DI
  PUSH SI
  PUSH BX
  XOR AX,AX
  MOV BX,[ast]
  CMP BX,0
  JE end
  MOV AL,[BX]

  ; If the expression we want is already on the stack, we don't need to generate anything

  CMP AL,'@'
  JE end


  CMP AL,'R'
  JNE notreg

  ; Generate code for a register

  MOV AL,[BX+1]
  CMP AL,8
  JGE reg_notword

  ; Generate code for a word register

  asm_byte(AL + 050)     ; assemble "PUSH <reg>"
  JMP end

  reg_notword:
  CMP AL,010
  JGE segreg

  ; Generate code for a byte register

  CMP AL,0c
  JGE reg_highbyte

  ; Generate code for a low byte register

  reg_lowbyte:
  PUSH AX
  asm_byte(030)
  POP AX
  PUSH AX
  asm_byte(AX*9 + 09c)     ; assemble "XOR <r>H,<r>H"
  POP AX
  asm_byte(AX+048)     ; assemble "PUSH <reg>X"
  JMP end

  ; Generate code for a high byte register

  reg_highbyte:
  PUSH AX
  asm_byte(088)
  POP AX
  PUSH AX
  asm_byte(AX*9 + 074)     ; assemble "MOV <r>L,<r>H"
  POP AX
  JMP reg_lowbyte

  ; Generate code for a segment register

  segreg:
  asm_byte((AX<<3) - 07a)     ; assemble "PUSH <segreg>"
  JMP end


  notreg:
  CMP AL,'N'
  JNE notnum

  ; Generate code for a number

  MOV DX,[BX+2]
  PUSH DX

  number:
  asm_byte(0b8)    ; assemble "MOV AX,"
  POP DX
  asm_word(DX)     ; assemble "<number>"
  asm_byte(050)
  JMP end


  notnum:
  CMP AL,'"'
  JNE notstring

  ; Generate code for a string

  PUSH BX
  MOV AX,[BX+2]
  CMP AX,07f
  JBE short_string
  PUSH AX
  asm_byte(0e9)     ; emit a JMP
  POP DX
  MOV CX,2
  string_do:
  write(DX,CX)      ; emit the distance (over the string)
  POP BX
  PUSH W[ip]        ; save the start address of the string
  MOV CX,[BX+2]
  MOV SI,BX
  ADD SI,4
  string_loop:
  LODSB
  PUSH CX
  asm_byte(AX)      ; emit the string
  POP CX
  LOOP string_loop
  JMP number ; emit the bytes to push the string address

  short_string:
  PUSH AX
  asm_byte(0eb)     ; emit a JMP
  POP DX
  MOV CX,1
  JMP string_do


  notstring:
  CMP AL,']'
  JNE notmodrm

  ; Generate code for an effective address

  CMP B[BX+1],1
  JE modrm_byte
  PUSH BX
  asm_byte(0ff)     ; assemble "PUSH "
  POP BX
  MOV CL,[BX+2]
  XOR CH,CH
  MOV SI,BX
  ADD SI,3
  MOV AH,030
  modrm_loop:
  LODSB
  OR AL,AH
  PUSH CX
  asm_byte(AX)      ; emit the mod/rm bytes
  XOR AH,AH
  POP CX
  LOOP modrm_loop
  JMP end

  modrm_byte:
  PUSH BX
  asm_byte(030)
  asm_byte(0e4)     ; assemble "XOR AH,AH"
  asm_byte(08a)     ; assemble "MOV AL,"
  POP BX
  MOV CL,[BX+2]
  XOR CH,CH
  MOV SI,BX
  ADD SI,3
  modrm_loop_byte:
  LODSB
  PUSH CX
  asm_byte(AX)      ; emit the mod/rm bytes
  POP CX
  LOOP modrm_loop_byte
  asm_byte(050)     ; assemble "PUSH AX"
  JMP end


  notmodrm:
  CMP AL,'['
  JNE notmem

  ; Generate code for a memory dereference
  gen_ea([BX+2],08b,3,2,1)  ; generate "MOV BX,inner expr"

  CMP B[BX+1],1
  JE mem_byte

  asm_byte(0ff)
  asm_byte(037)     ; assemble "PUSH [BX]"
  JMP end

  mem_byte:
  asm_byte(08a)
  asm_byte(7)       ; assemble "MOV AL,[BX]"
  asm_byte(030)
  asm_byte(0e4)     ; assemble "XOR AH,AH"
  asm_byte(050)     ; assemble "PUSH AX"
  JMP end


  notmem:
  CMP AL,'_'
  JNE notneg

  ; Generate code for a negative

  gen_ea([BX+2],08b,0,2,1)  ; generate "MOV AX,inner expr"
  asm_byte(0f7)
  asm_byte(0d8)     ; assemble "NEG AX"
  asm_byte(050)     ; assemble "PUSH AX"
  JMP end


  notneg:
  CMP AL,'~'
  JNE notnot

  ; Generate code for a not

  gen_ea([BX+2],08b,0,2,1)  ; generate "MOV AX,inner expr"
  asm_byte(0f7)
  asm_byte(0d0)     ; assemble "NOT AX"
  asm_byte(050)     ; assemble "PUSH AX"
  JMP end


  notnot:
  CMP AL,'F'
  JNE notfncall

  ; Generate code for a function call

  gen_fncall(BX)
  asm_byte(050)     ; assemble "PUSH AX"
  JMP end


  notfncall:
  CMP AL,'A'
  JNE notarg

  ; Generate code for an argument list

  PUSH BX
  gen_stk([BX+4])   ; generate code to push the rest of the arguments onto the stack (returns bytes in AX)
  POP BX
  PUSH AX
  gen_stk([BX+2])   ; generate code to push the first argument onto the stack
  POP AX
  ADD AX,2
  JMP end


  notarg:
  PUSH AX
  gen_stk([BX+2])   ; generate code to push the first argument onto the stack
  POP AX


  CMP AL,'*'
  JNE notmul

  ; Generate code for a multiply

  gen_ea([BX+4],08b,2,2,1)  ; generate "MOV DX,inner expr"
  asm_byte(058)     ; assemble "POP AX"
  asm_byte(0f7)
  asm_byte(0e2)     ; assemble "MUL DX"
  asm_byte(050)     ; assemble "PUSH AX"
  JMP end


  notmul:
  CMP AL,'/'
  JNE notdiv

  ; Generate code for a divide

  gen_ea([BX+4],08b,3,2,1)  ; generate "MOV BX,inner expr"
  asm_byte(058)     ; assemble "POP AX"
  asm_byte(031)
  asm_byte(0d2)     ; assemble "XOR DX,DX"
  asm_byte(0f7)
  asm_byte(0f3)     ; assemble "DIV BX"
  asm_byte(050)     ; assemble "PUSH AX"
  JMP end


  notdiv:
  CMP AL,'%'
  JNE notmod

  ; Generate code for a modulo

  gen_ea([BX+4],08b,3,2,1)  ; generate "MOV BX,inner expr"
  asm_byte(058)     ; assemble "POP AX"
  asm_byte(031)
  asm_byte(0d2)     ; assemble "XOR DX,DX"
  asm_byte(0f7)
  asm_byte(0f3)     ; assemble "DIV BX"
  asm_byte(052)     ; assemble "PUSH DX"
  JMP end


  notmod:
  CMP AL,'+'
  JNE notadd

  ; Generate code for an add

  gen_ea([BX+4],08b,2,2,1)  ; generate "MOV DX,inner expr"
  asm_byte(058)     ; assemble "POP AX"
  asm_byte(1)
  asm_byte(0d0)     ; assemble "ADD AX,DX"
  asm_byte(050)     ; assemble "PUSH AX"
  JMP end


  notadd:
  CMP AL,'-'
  JNE notsub

  ; Generate code for a subtract

  gen_ea([BX+4],08b,2,2,1)  ; generate "MOV DX,inner expr"
  asm_byte(058)     ; assemble "POP AX"
  asm_byte(029)
  asm_byte(0d0)     ; assemble "SUB AX,DX"
  asm_byte(050)     ; assemble "PUSH AX"
  JMP end


  notsub:
  CMP AL,'l'
  JNE notshl

  ; Generate code for a left shift

  gen_ea([BX+4],08b,1,2,1)  ; generate "MOV CX,inner expr"
  asm_byte(058)     ; assemble "POP AX"
  asm_byte(0d3)
  asm_byte(0e0)     ; assemble "SHL AX,CL"
  asm_byte(050)     ; assemble "PUSH AX"
  JMP end


  notshl:
  CMP AL,'r'
  JNE notshr

  ; Generate code for a right shift

  gen_ea([BX+4],08b,1,2,1)  ; generate "MOV CX,inner expr"
  asm_byte(058)     ; assemble "POP AX"
  asm_byte(0d3)
  asm_byte(0e8)     ; assemble "SHL AX,CL"
  asm_byte(050)     ; assemble "PUSH AX"
  JMP end


  notshr:
  CMP AL,'<'
  JNE notless

  ; Generate code for a less than

  gen_pred(07c)
  JMP end


  notless:
  CMP AL,'>'
  JNE notgreater

  ; Generate code for a greater than

  gen_pred(07f)
  JMP end


  notgreater:
  CMP AL,'L'
  JNE notlessequ

  ; Generate code for a less than or equal

  gen_pred(07e)
  JMP end


  notlessequ:
  CMP AL,'G'
  JNE notgreaterequ

  ; Generate code for a greater than or equal

  gen_pred(07d)
  JMP end


  notgreaterequ:
  CMP AL,'e'
  JNE notequ

  ; Generate code for an equal

  gen_pred(074)
  JMP end


  notequ:
  CMP AL,'n'
  JNE notnequ

  ; Generate code for a not equal

  gen_pred(075)
  JMP end


  notnequ:
  CMP AL,'&'
  JNE notand

  ; Generate code for an and

  gen_ea([BX+4],08b,2,2,1)  ; generate "MOV DX,inner expr"
  asm_byte(058)     ; assemble "POP AX"
  asm_byte(021)
  asm_byte(0d0)     ; assemble "AND AX,DX"
  asm_byte(050)     ; assemble "PUSH AX"
  JMP end


  notand:
  CMP AL,'^'
  JNE notxor

  ; Generate code for an xor

  gen_ea([BX+4],08b,2,2,1)  ; generate "MOV DX,inner expr"
  asm_byte(058)     ; assemble "POP AX"
  asm_byte(031)
  asm_byte(0d0)     ; assemble "XOR AX,DX"
  asm_byte(050)     ; assemble "PUSH AX"
  JMP end


  notxor:

  ; Generate code for an or

  gen_ea([BX+4],08b,2,2,1)  ; generate "MOV DX,inner expr"
  asm_byte(058)     ; assemble "POP AX"
  asm_byte(9)
  asm_byte(0d0)     ; assemble "OR AX,DX"
  asm_byte(050)     ; assemble "PUSH AX"


  end:
  POP BX
  POP SI
  POP DI
}



; This function recursively frees the AST ast. BX, AX and DX are preserved.
function free_ast(ast)
{
  PUSH DX
  PUSH BX
  PUSH AX
  MOV BX,[ast]
  CMP BX,0
  JE leaf
  MOV AL,[BX]
  CMP AL,'R'
  JE leaf
  CMP AL,'N'
  JE leaf
  CMP AL,'"'
  JE leaf
  CMP AL,'@'
  JE leaf
  CMP AL,']'
  JE leaf
  CMP AL,'['
  JE onesub
  CMP AL,'_'
  JE onesub
  CMP AL,'~'
  JE onesub

  free_ast([BX+4])
  onesub:
  free_ast([BX+2])
  leaf:
  free(BX)
  POP AX
  POP BX
  POP DX
}



; This is the EA struct, an intermediate form between memory and modrm forms

ea_bx:          DB 0  ; 1 if +BX
ea_bp:          DB 0  ; 1 if +BP
ea_si:          DB 0  ; 1 if +SI
ea_di:          DB 0  ; 1 if +DI
ea_offset:      DW 0  ; offset to add
offset_unknown: DB 0  ; 1 if offset is unknown in the first pass, 0 if it is known



; This function substitutes the memory AST in [arg1] for an effective address defined by the ea struct

modrm_table:
;          DI     SI             BP   BP+DI  BP+SI            BX   BX+DI  BX+SI
DB 006 DB 005 DB 004 DB 0ff  DB 046 DB 003 DB 002 DB 0ff  DB 007 DB 001 DB 000 DB 0ff  DB 0ff DB 0ff DB 0ff DB 0ff
DB 006 DB 045 DB 044 DB 0ff  DB 046 DB 043 DB 042 DB 0ff  DB 047 DB 041 DB 040 DB 0ff  DB 0ff DB 0ff DB 0ff DB 0ff
DB 006 DB 085 DB 084 DB 0ff  DB 086 DB 083 DB 082 DB 0ff  DB 087 DB 081 DB 080 DB 0ff  DB 0ff DB 0ff DB 0ff DB 0ff

function simplify_substea(past)
{
  MOV DL,0

  CMP B[offset_unknown],0
  JNE gotoffsettype

  MOV AX,[ea_offset]
  CMP AX,0
  JE gotoffsettype
  MOV BX,AX
  CBW
  CMP AX,BX
  JNE twobyteoffset
  MOV DL,1
  JMP gotoffsettype
  twobyteoffset:
  MOV DL,2
  gotoffsettype:

  SHL DL,1
  OR DL,[ea_bx]
  SHL DL,1
  OR DL,[ea_bp]
  SHL DL,1
  OR DL,[ea_si]
  SHL DL,1
  OR DL,[ea_di]
  MOV BL,DL
  XOR BH,BH
  MOV DL,[modrm_table + BX]
  CMP DL,0ff
  JE end  ; Can't simplify - exit

  valid:

  PUSH DX          ; mod/rm byte
  MOV AX,DX

  CMP AL,6
  JNE not_mod2

  mod2:
  MOV CL,2
  JMP gotsize

  not_mod2:
  AND AL,0c0
  CMP AL,040
  JNE not_mod1
  MOV CL,1
  JMP gotsize

  not_mod1:
  CMP AL,080
  JE mod2

  MOV CL,0

  gotsize:

  XOR CH,CH
  PUSH CX          ; number of bytes following mod/rm byte

  MOV BX,[past]    ; pointer to AST
  MOV BX,[BX]      ; AST
  MOV AL,[BX+1]
  PUSH AX          ; width
  free_ast(BX)     ; free old AST

  POP BX           ; width
  POP AX           ; nbytes
  PUSH AX          ; nbytes
  PUSH BX          ; width
  MOV BX,malloc(AX+4)        ; AST
  MOV B[BX],']'    ; mod r/m
  POP AX           ; width
  MOV [BX+1],AL
  POP AX           ; nbytes
  INC AX
  MOV [BX+2],AL
  POP CX           ; mod r/m byte
  MOV [BX+3],CL
  CMP AL,3
  JNE not2
  MOV AX,[ea_offset]
  MOV [BX+4],AX
  JMP do_subst
  not2:
  CMP AL,2
  JNE do_subst
  MOV AL,[ea_offset]
  MOV [BX+4],AL

  do_subst:
  MOV AX,BX
  MOV BX,[past]
  MOV [BX],AX

  end:
}



; This function adds AST ast to the EA struct.
; BX is preserved.
; Returns 0 for success, 1 for failure

function simplify_add_to_ea_struct(ast)
{
  PUSH BX
  MOV BX,[ast]
  MOV AL,[BX]


  CMP AL,'R'
  JNE notreg

  ; add a register to the EA struct

  MOV AL,[BX+1]

  CMP AL,2
  JLE fail
  CMP AL,8
  JGE fail
  CMP AL,4
  JE fail
  JG notbx
  INC AL
  notbx:
  SUB AL,4
  XOR AH,AH
  MOV BX,ea_bx
  ADD BX,AX
  MOV AL,[BX]
  CMP AL,0
  JNE fail
  MOV B[BX],1
  JMP ok


  notreg:
  CMP AL,'N'
  JNE notnum

  ; add a number to the EA struct

  MOV AX,[BX+2]
  ADD [ea_offset],AX
  MOV AL,[BX+1]
  CMP AL,0
  JE ok
  CMP B[first_phase],0
  JE ok
  MOV B[offset_unknown],1
  JMP ok


  notnum:
  CMP AL,'+'
  JNE fail

  ; add a sum to the EA struct

  simplify_add_to_ea_struct([BX+2])
  CMP AL,0
  JNE fail
  simplify_add_to_ea_struct([BX+4])
  CMP AL,0
  JE end


  fail:
  MOV AL,1
  JMP end
  ok:
  MOV AL,0
  end:
  POP BX
}



; This function simplifies the AST in BX and returns the simplified AST in BX. AX and DX are preserved.

function simplify()
{
  auto ast
  PUSH DX
  PUSH AX
  MOV [ast],BX
  simplify_ast(ast)
  MOV BX,[ast]
  POP AX
  POP DX
}



; This function recursively simplifies the AST [past] by folding constants and
; where possible converting arbitary memory expressions to mod/rm expressions.
; It works on ASTs in-place.
; BX is preserved.
; memory -> mod r/m

; TODO:
 ; constant folding: binop(N,N) -> N
 ; string concatenation: +(",N) -> ",  +(",") -> "
 ; double negative/complement: _(_(x)) -> x,  ~(~(x)) -> x
 ; additive identities: +(N[0],x) -> x,  -(N[0],x) -> _(x),  +(x,N[0]) -> x,  -(x,N[0]) -> x, -(x,x) -> N[0]
 ; multiplicative identities: *(N[1],x) -> x,  *(x,N[1]) -> x,  /(x,N[1]) -> x, *(N[0],x) -> N[0], *(x,N[0]) -> N[0], /(x,N[0]) -> error
 ; additive/subtractive commutivity (gather all terms in an additive/subtractive expression and fold all constant terms into one)
 ; multiplicative commutivity (gather all factors in a multiplicative expression and fold all constant factors into one)

function simplify_ast(past)
{
  PUSH BX
  MOV BX,[past]
  MOV BX,[BX]
  CMP BX,0
  JE end


  MOV AL,[BX]
  CMP AL,'R'
  JE end
  CMP AL,'N'
  JE end
  CMP AL,'"'
  JE end
  CMP AL,'@'
  JE end
  CMP AL,']'
  JE end

  CMP AL,'['
  JNE not_memory

  ; Simplify a memory expression

  MOV B[ea_bx],0
  MOV B[ea_bp],0
  MOV B[ea_si],0
  MOV B[ea_di],0
  MOV W[ea_offset],0
  MOV B[offset_unknown],0

  simplify_ast(BX+2)      ; Simplify the interior expression
  simplify_add_to_ea_struct([BX+2]) ; Add it to the EA struct
  CMP AL,0
  JNE end                ; Can't simplify this
  simplify_substea([past])
  JMP end


  not_memory:
  CMP AL,'_'
  JNE not_negative

  ; Simplify a negative

  unary:
  simplify_ast(BX+2)    ; simplify inner AST
  MOV BX,[BX+2]         ; inner AST
  MOV AL,[BX]           ; type of inner AST
  CMP AL,'N'            ; is inner AST a number?
  JNE end               ; if not, we're done
  PUSH BX               ; inner AST
  MOV BX,[past]         ; pointer to outer AST
  PUSH BX
  free([BX])            ; free outer AST
  POP BX                ; pointer to outer AST
  POP AX                ; inner AST
  MOV [BX],AX           ; replace outer with inner
  MOV BX,AX             ; inner AST
  NEG W[BX+2]           ; negate value
  JMP end

  ; Simplify a not

  not_negative:
  CMP AL,'~'
  JNE not_not
  simplify_ast(BX+2)    ; simplify inner AST
  MOV BX,[BX+2]         ; inner AST
  MOV AL,[BX]           ; type of inner AST
  CMP AL,'N'            ; is inner AST a number?
  JNE end               ; if not, we're done
  PUSH BX               ; inner AST
  MOV BX,[past]         ; pointer to outer AST
  PUSH BX
  free([BX])            ; free outer AST
  POP BX                ; pointer to outer AST
  POP AX                ; inner AST
  MOV [BX],AX           ; replace outer with inner
  MOV BX,AX             ; inner AST
  NOT W[BX+2]           ; invert value
  JMP end


  ; Simplify a binary expression

  not_not:
  PUSH AX
  PUSH BX
  simplify_ast(BX+2)
  POP BX
  simplify_ast(BX+4)
  POP AX


  CMP AL,'-'
  JNE end

  ; Simplify a subtraction

  PUSH BX
  MOV BX,[BX+4]
  CMP B[BX],'N'
  POP BX
  JNE end

  ; strength reduce -(x,N) -> +(x,-N)

  PUSH BX
  MOV BX,[BX+4]
  NEG W[BX+2]      ; Negate the number
  POP BX
  MOV B[BX],'+'    ; Change the subtraction to an addition


  end:
  POP BX
}



; Parsing functions. These all expect a token type in [token] (i.e. should be
; called right after a call to get_next_token()) and leave the machine in
; a similar state (i.e. [token] is the type of the next unparsed token).
; They all return the AST corresponding to the expression just parsed in BX.



; This function parses the following part of the grammar:
; expr0 := <reg> <expr0'> |
;          <number> |
;          <string> |
;          <identifier> <expr0'> |
;          ( <expr> ) <expr0'> |
;          [ <expr> ] <expr0'> |
;          <size> [ <expr> ] <expr0'> |
;          @ |
;          true |
;          false
function parse_expr0()
{
  ; Handle the <reg> <expr0'> production:

  CMP B[token],'R'
  JNE not_reg
  MOV BX,malloc(2)
  MOV B[BX],'R'
  MOV DL,[token_arg]
  MOV [BX+1],DL
  get_next_token()                          ; Slurp the reg
  parse_expr0p()
  JMP end
  not_reg:

  ; Handle the <number> production:

  CMP B[token],'0'
  JNE not_number
  MOV BX,malloc(4)
  MOV B[BX],'N'
  MOV B[BX+1],0
  MOV DX,[token_arg]
  MOV [BX+2],DX
  get_next_token()                          ; Slurp the number
  JMP end
  not_number:

  ; Handle the <string> production:

  CMP B[token],'"'
  JNE not_string
  PUSH SI
  PUSH DI
  MOV AX,SI
  SUB AX,DI
  DEC AX
  PUSH AX      ; length
  MOV BX,malloc(AX+4)    ; AST
  MOV SI,DI    ; source string
  MOV DI,BX    ; AST
  MOV AL,'"'
  STOSB        ; Store AST type
  STOSB
  POP AX
  STOSW        ; Store length
  MOV CX,AX
  REP MOVSB    ; Store string
  POP DI
  POP SI
  get_next_token()                          ; Slurp the string
  JMP end
  not_string:

  ; Handle the <identifier> <expr0'> production:

  CMP B[token],'I'
  JNE not_identifier
  MOV BX,get_var(find_symbol())
  get_next_token()                          ; Slurp the identifier
  parse_expr0p()
  JMP end
  not_identifier:

  ; Handle the ( <expr> ) <expr0'> production:

  CMP B[token],'('
  JNE not_parens
  get_next_token()                          ; Slurp the open paren
  parse_expr()
  CMP B[token],')'
  JE parens_matched
  error_exit("Unmatched ( on line: $")
  parens_matched:
  get_next_token()                          ; Slurp the close paren
  parse_expr0p()
  JMP end
  not_parens:

  ; Handle the [ <expr> ] <expr0'> production:

  CMP B[token],'['
  JNE not_memory
  get_next_token()                          ; Slurp the open bracket
  parse_expr()
  CMP B[token],']'
  JE memory_matched
  memory_unmatched:
  error_exit("Unmatched [ on line: $")
  memory_matched:
  PUSH BX
  MOV BX,malloc(4)
  MOV B[BX],'['
  MOV B[BX+1],0
  POP AX
  MOV [BX+2],AX
  get_next_token()                          ; Slurp the close bracket
  parse_expr0p()
  JMP end
  not_memory:

  ; Handle the <size> [ <expr> ] <expr0'> production:

  CMP B[token],'S'
  JNE not_size
  CMP B[token+1],'B'
  JNE size_word
  MOV DL,1
  JMP size_known
  size_word:
  MOV DL,2
  size_known:
  PUSH DX
  get_next_token()                          ; Slurp the size
  CMP B[token],'['
  JNE not_size
  get_next_token()                          ; Slurp the open bracket
  parse_expr()
  CMP B[token],']'
  JNE memory_unmatched
  PUSH BX
  MOV BX,malloc(4)
  MOV B[BX],'['
  POP AX
  POP DX
  MOV [BX+1],DL
  MOV [BX+2],AX
  get_next_token()                          ; Slurp the close bracket
  parse_expr0p()
  JMP end
  not_size:

  ; Handle the @ production:

  CMP B[token],'@'
  JNE not_pop
  MOV BX,malloc(1)
  MOV B[BX],'@'
  get_next_token()                          ; Slurp the @
  JMP end
  not_pop:

  ; Handle true and false productions:

  CMP B[token],'K'
  JNE not_truefalse
  MOV AL,[token+1]
  CMP AL,'0'
  JNE keyword_notfalse
  XOR DX,DX
  JMP truefalse
  keyword_notfalse:
  CMP AL,'1'
  JNE not_truefalse
  MOV DX,-1
  truefalse:
  PUSH DX
  MOV BX,malloc(4)
  POP DX
  MOV B[BX],'N'
  MOV B[BX+1],0
  MOV [BX+2],DX
  get_next_token()                          ; Slurp the true/false
  JMP end
  not_truefalse:


  ; No other tokens are valid here.

  syntax_error()
  end:
}



; This function makes a binary AST node with type (arg1), left subnode in (arg2), right subnode in (arg3)
; The node is returned in BX.
function make_binary_node(type,left,right)
{
  MOV BX,malloc(6)
  MOV B[BX],[type]
  MOV W[BX+2],[left]
  MOV W[BX+4],[right]
}



; This function parses the following part of the grammar:
; expr0' := |
;           ( <expr_list> <expr0'>
; AST pointer passed in BX is the AST of the previous expression (the function to be called).
function parse_expr0p()
{
  CMP B[token],'('
  JNE end

  get_next_token()                          ; Slurp the open paren
  PUSH BX
  parse_expr_list()
  POP CX
  PUSH AX
  make_binary_node('F',CX,BX)
  POP AX
  JMP parse_expr0p      ; tail recursion

  end:
}


; This function parses the following part of the grammar:
; expr_list := ) |
;              <exprs> )
function parse_expr_list()
{
  CMP B[token],')'
  JNE got_expr
  get_next_token()                          ; Slurp the close paren
  XOR BX,BX
  JMP end

  got_expr:
  parse_exprs()
  CMP B[token],')'
  JE got_close
  error_exit("Unmatched ( in function call on line: $")
  got_close:
  get_next_token()                          ; Slurp the close paren
  end:
}



; This function parses the following part of the grammar:
; exprs := <expr> <exprs'>
function parse_exprs()
{
  parse_expr()
  PUSH BX
  parse_exprsp()
  POP CX
  PUSH AX
  make_binary_node('A',CX,BX)
  POP AX
}



; This function parses the following part of the grammar:
; exprs' := |
;           , <exprs>
function parse_exprsp()
{
  CMP B[token],','
  JE comma
  XOR BX,BX
  JMP end

  comma:
  get_next_token()                          ; Slurp the comma
  parse_exprs()
  end:
}



; This function parses the following part of the grammar:
; expr1 := ~ <expr0> |
;          - <expr0> |
;          + <expr0> |
;          <expr0>
function parse_expr1()
{
  ; Handle unary +

  CMP B[token],'+'
  JNE not_plus
  get_next_token()                          ; Slurp the +
  parse_expr0()
  JMP end
  not_plus:

  ; Handle unary -

  CMP B[token],'-'
  JNE not_minus
  get_next_token()                          ; Slurp the -
  parse_expr0()
  PUSH BX
  MOV BX,malloc(4)
  POP AX
  MOV B[BX],'_'
  MOV [BX+2],AX
  JMP end
  not_minus:

  ; Handle unary ~ (not)

  CMP B[token],'~'
  JNE not_not
  get_next_token()                          ; Slurp the ~
  parse_expr0()
  PUSH BX
  MOV BX,malloc(4)
  POP AX
  MOV B[BX],'~'
  MOV [BX+2],AX
  JMP end
  not_not:

  ; Handle higher-precedence expressions

  parse_expr0()
  end:
}



; This function parses the following parts of the grammar:
; expr2 := <expr1> <expr2'>
; expr2' := |
;           * <expr1> <expr2'> |
;           / <expr1> <expr2'> |
;           % <expr1> <expr2'>
; AST pointer passed in BX is the AST of the previous expression (the LHS of the expression).

function parse_expr2()
{
  parse_expr1()

  parse_expr2p:

  ; Handle *

  MOV AX,[token]
  CMP AL,'*'
  JNE not_multiply
  binary:
  PUSH AX
  PUSH BX
  get_next_token()                          ; Slurp the *
  parse_expr1()
  POP CX
  POP DX
  make_binary_node(DX,CX,BX)
  JMP parse_expr2p       ; tail recursion
  not_multiply:

  ; Handle /

  CMP AL,'/'
  JE binary

  ; Handle %

  CMP AL,'%'
  JE binary

  ; empty also accepted
}



; This function parses the following parts of the grammar:
; expr3 := <expr2> <expr3'>
; expr3' := |
;           + <expr2> <expr3'> |
;           - <expr2> <expr3'>
function parse_expr3()
{
  parse_expr2()

  parse_expr3p:

  ; Handle +

  MOV AX,[token]
  CMP AL,'+'
  JNE not_add
  binary:
  PUSH AX
  PUSH BX
  get_next_token()                          ; Slurp the + or -
  parse_expr2()
  POP CX
  POP DX
  make_binary_node(DX,CX,BX)
  JMP parse_expr3p       ; tail recursion
  not_add:

  ; Handle -

  CMP AL,'-'
  JE binary

  ; empty also accepted
}



; This function parses the following parts of the grammar:
; expr4 := <expr3> <expr4'>
; expr4' := |
;           << <expr3> <expr4'> |
;           >> <expr3> <expr4'>
function parse_expr4()
{
  parse_expr3()

  parse_expr4p:

  ; Handle <<

  MOV AX,[token]
  CMP AL,'l'
  JNE not_lshift
  binary:
  PUSH AX
  PUSH BX
  get_next_token()                          ; Slurp the << or >>
  parse_expr3()
  POP CX
  POP DX
  make_binary_node(DX,CX,BX)
  JMP parse_expr4p       ; tail recursion
  not_lshift:

  ; Handle >>

  CMP AL,'r'
  JE binary

  ; empty also accepted
}



; This function parses the following parts of the grammar:
; expr5 := <expr4> <expr5'>
; expr5' := |
;           < <expr4> <expr5'> |
;           > <expr4> <expr5'> |
;           <= <expr4> <expr5'> |
;           >= <expr4> <expr5'>
function parse_expr5()
{
  parse_expr4()

  parse_expr5p:

  ; Handle <

  MOV AX,[token]
  CMP AL,'<'
  JNE not_less
  binary:
  PUSH AX
  PUSH BX
  get_next_token()                          ; Slurp the <, >, <= or >=
  parse_expr4()
  POP CX
  POP DX
  make_binary_node(DX,CX,BX)
  JMP parse_expr5p       ; tail recursion
  not_less:

  ; Handle >

  CMP AL,'>'
  JE binary

  ; Handle <=

  CMP AL,'L'
  JE binary

  ; Handle >=

  CMP AL,'G'
  JE binary

  ; empty also accepted
}



; This function parses the following parts of the grammar:
; expr6 := <expr5> <expr6'>
; expr6' := |
;           == <expr5> <expr6'> |
;           != <expr5> <expr6'>
function parse_expr6()
{
  parse_expr5()

  parse_expr6p:

  ; Handle ==

  MOV AX,[token]
  CMP AL,'e'
  JNE not_equal
  binary:
  PUSH AX
  PUSH BX
  get_next_token()                          ; Slurp the == or !=
  parse_expr5()
  POP CX
  POP DX
  make_binary_node(DX,CX,BX)
  JMP parse_expr6p       ; tail recursion
  not_equal:

  ; Handle !=

  CMP AL,'n'
  JE binary

  ; empty also accepted
}



; This function parses the following parts of the grammar:
; expr7 := <expr6> <expr7'>
; expr7' := |
;           & <expr6> <expr7'>
function parse_expr7()
{
  parse_expr6()

  parse_expr7p:

  ; Handle &

  MOV AX,[token]
  CMP AL,'&'
  JNE not_and
  PUSH AX
  PUSH BX
  get_next_token()                          ; Slurp the &
  parse_expr6()
  POP CX
  POP DX
  make_binary_node(DX,CX,BX)
  JMP parse_expr7p       ; tail recursion
  not_and:

  ; empty also accepted
}



; This function parses the following parts of the grammar:
; expr8 := <expr7> <expr8'>
; expr8' := |
;           ^ <expr7> <expr8'>
function parse_expr8()
{
  parse_expr7()

  parse_expr8p:

  ; Handle ^

  MOV AX,[token]
  CMP AL,'^'
  JNE not_xor
  PUSH AX
  PUSH BX
  get_next_token()                          ; Slurp the ^
  parse_expr7()
  POP CX
  POP DX
  make_binary_node(DX,CX,BX)
  JMP parse_expr8p       ; tail recursion
  not_xor:

  ; empty also accepted
}



; This function parses the following parts of the grammar:
; expr := <expr8> <expr'>
; expr' := |
;          | <expr8> <expr'>;
function parse_expr()
{
  parse_expr8()

  parse_exprp:

  ; Handle |

  MOV AX,[token]
  CMP AL,'|'
  JNE not_or
  PUSH AX
  PUSH BX
  get_next_token()                          ; Slurp the |
  parse_expr8()
  POP CX
  POP DX
  make_binary_node(DX,CX,BX)
  JMP parse_exprp       ; tail recursion
  not_or:

  ; empty also accepted
}
