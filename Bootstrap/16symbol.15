; This is the bootstrapping compiler step 16 (written in step 15 language)
; This file contains the code for symbol tables and structural programming elements


; Format of symbol BX:
;   W[BX]      next         Next entry pointer (0 if this is the last)
;   W[BX+2]    dest         Destination (types 0, 1, 2), Offset from BP (3), Import pointer (4) or subscope symbol table (5)
;   W[BX+4]    dest_high    High word of dest (types 0, 1, 2, 3)
;   W[BX+6]    type         0 = normal named or anonymous  1 = case label (name contains value)  2 = default case label  3 = variable relative to BP  4 = indirect  5 = subscope
;   W[BX+8]    length       Symbol length (0 for anonymous labels, default labels and subscopes, 4 for case labels)
;   BX+0a      name         Symbol string data

; Format of symbol table BX:
;   W[BX]      current      Pointer to last symbol returned by add_label
;   W[BX+2]    parent       Pointer to parent symbol table
;   W[BX+4]    first        Pointer to first entry
;   W[BX+6]    break_dest   Symbol for break or return destination
;   W[BX+8]    max_stack    Number of bytes to pop off stack at end of function
;   W[BX+0a]   stack        Offset from EBP of next stack variable to allocate (function) or number of bytes to add to function's stack when leaving scope

; Format of dll name structure BX:
;   W[BX]      next         Next dll name
;   W[BX+2]    imports      Number of imports from this dll
;   W[BX+4]    first        First import from this dll
;   W[BX+6]    length       Length of dll name
;   BX+8       name         dll name

; Format of import structure BX:
;   W[BX]      next         Next import
;   D[BX+2]    dest         Destination of symbol
;   W[BX+6]    symbol       Symbol with name of import


global_table: DW 0   ; Pointer to global symbol table
func_table:   DW 0   ; Pointer to current function's symbol table
loop_table:   DW 0   ; Pointer to current loop's symbol table (for breaks)
scope_table:  DW 0   ; Pointer to current scope's symbol table

first_dll_name: DW 0
num_dlls: DW 0
total_imports: DW 0


; This function assembles a block of statements.
; It stops when the next token is not the start of a statement (i.e. '}' or 0)
; statements := |
;               statement statements

function assemble_statements()
{
  while (~parse_statement()) { }
}



; This function assembles a statement and returns false
; If there is no statement, it returns true
; statement := mnemonic <args> |
;              identifier: |
;              identifier(expr) |
;              { statements } |
;              function identifier(arg_list) statement |
;              if (expr) statement |
;              if (expr) statement else statement |
;              while (expr) statement |
;              do statement while (expr) |
;              auto identifier |
;              break |
;              return expr |
;              switch(expr) { case_blocks }

function parse_statement()
{
  MOV AL,[token]
  XOR AH,AH
  switch (AX) {
    case 'I' {
      get_next_token()                      ; Slurp the identifier
      MOV AL,[token]
      XOR AH,AH
      switch (AX) {
        case ':' parse_label()
        case '(' parse_fncall()
        default  syntax_error()
      }
    }
    case 'M' parse_mnemonic()
    case '{' parse_scope()
    case 'K' {
      MOV AL,[token+1]
      XOR AH,AH
      switch (AX) {
        case 'F' parse_function()
        case 'I' parse_if()
        case 'W' parse_while()
        case 'O' parse_do()
        case 'A' parse_auto()
        case 'B' parse_break()
        case 'R' parse_return()
        case 'S' parse_switch()
        default  return -1
      }
    }
    default  return -1
  }
  return 0
}



; This function parses a function call statement
;             identifier(expr)

function parse_fncall()
{
  PUSH SI
  MOV BX,expr_from_symbol(symbol_from_identifier())
  parse_expr0p()
  MOV SI,simplify(BX)
  gen_eax(SI)
  free_ast(SI)
  POP SI
}



; This function parses a label statement
;             identifier:

function parse_label()
{
  add_named_label()
  get_next_token()                          ; Slurp the :
}



; This function parses a scope statement (block)
;             { statements }

function parse_scope()
{
  get_next_token()                          ; Slurp the {
  enter_scope()
  assemble_statements()
  leave_scope()
  if (B[token] != '}')
    error_exit("Expected } on line: $")
  get_next_token()                          ; Slurp the }
}



; Parse (and ignore) a '(' - error if it isn't there.

function parse_open()
{
  if (B[token] != '(')
    error_exit("Expected ( on line: $")
  get_next_token()                          ; Slurp the (
}



; Parse (and ignore) a ')' - error if it isn't there.

function parse_close()
{
  if (B[token] != ')')
    error_exit("Expected ) on line: $")
  get_next_token()                          ; Slurp the )
}



; This function parses a function definition statement
;             function identifier(arg_list) statement
; arg_list := |
;             args
; args := identifier |
;         identifier,args

function parse_function()
{
  PUSH DI
  PUSH SI
  auto outer_func
  auto arg_offset

  get_next_token()                          ; Slurp the function
  if (B[token] != 'I')
    error_exit("Expected a function name on line: $")
  MOV SI,add_named_label()

  MOV W[outer_func],[func_table]
  enter_scope()
  MOV W[func_table],[scope_table]


  MOV W[arg_offset],8
  get_next_token()                          ; Slurp the identifier
  parse_open()

  if (B[token] != ')')
    do {
      if (B[token] != 'I')
        error_exit("Argument expected on line: $")
      add_auto([arg_offset])
      ADD W[arg_offset],4
      if (B[token] != ',')
        break
      get_next_token()                      ; Slurp the comma
    } while(true)

  parse_close()

  if (B[token]=='K' & B[token+1]=='M') {
    get_next_token()                        ; Slurp the from
    if ([first_phase]) {
      MOV B[SI+6],4

      if (B[token]!='"')
        error_exit("Expected a string (DLL name) on line: $")

      auto dll_name
      MOV BX,string_create([token_arg_high],[token_arg],6)
      MOV [dll_name],BX
      MOV W[BX],0
      MOV W[BX+2],0
      MOV W[BX+4],0

      MOV DI,first_dll_name                         ; current = &first_dll_name
      while ([DI]) {                                ; while (*current) {
        if (string_equals([dll_name]+6,[DI]+6)) {   ;   if (string_equals(&dll_name->length,&current->length) {
          free([dll_name])
          break
        }
        MOV DI,[DI]                                 ;   current=current->next
      }
      done {
        MOV W[DI],[dll_name]                        ;   *current=dll_name
        INC W[num_dlls]
      }
      auto current_dll
      MOV DI,[DI]                                   ; current=*current
      MOV W[current_dll],DI                         ; current_dll=current

      ADD DI,4                                      ; current=current.first
      while ([DI]) {                                ; while (*current) {
        if (string_equals(SI+8,[[DI]+6]+8)) {       ;   if (string_equals(&func->length,&current->symbol->length) {
          ; We already have this import!
          MOV DI,[DI]                               ;     current=*current
          break
        }
        MOV DI,[DI]                                 ;   current=current->next
      }
      done {
        MOV W[DI],malloc(8)                         ;   *current=malloc(8)
        MOV DI,[DI]                                 ;   current=*current
        MOV W[DI],0                                 ;   current.next=0
        MOV [DI+6],SI                               ;   current.symbol=func
        INC W[total_imports]
        INC W[[current_dll]+2]                      ;   ++current_dll.imports
      }

      MOV W[SI+2],DI                                ; func->dest=current
    }
    get_next_token()                        ; Slurp the dll name
  }
  else {
    if ([first_phase])
      MOV W[[func_table]+8],0        ; func_table->max_stack = 0
    MOV W[[func_table]+0a],-4      ; func_table->stack = -4

    if (W[[func_table]+8] != 0 | W[arg_offset] != 8) {
      asm_byte(055)                  ; assemble "PUSH EBP"
      asm_byte(089)
      asm_byte(0e5)                  ; assemble "MOV EBP,ESP"
    }

    MOV CX,W[[func_table]+8]         ; func_table->max_stack
    if (CX != 0) {
      MOV AX,CX
      CBW
      if (AX == CX) {
        PUSH CX
        asm_byte(083)
        asm_byte(0ec)
        asm_byte(@)                  ; assemble "SUB ESP,func_table->max_stack"
      }
      else {
        PUSH CX
        asm_byte(081)
        asm_byte(0ec)
        POP CX
        asm_dword(CX,0)              ; assemble "SUB ESP,func_table->max_stack"
      }
    }

    parse_statement()

    MOV CX,[[func_table]+6]        ; func_table->break_dest
    if (CX != 0)
      set_label(CX)

    if (W[[func_table]+8] != 0) {  ; func_table->max_stack
      asm_byte(089)
      asm_byte(0ec)                  ; assemble "MOV ESP,EBP"
    }
    if (W[arg_offset] != 8 | W[[func_table]+8] != 0)
      asm_byte(05d)                  ; assemble "POP EBP"

    if (W[arg_offset] == 8)
      asm_byte(0c3)
    else {
      asm_byte(0c2)
      asm_word([arg_offset]-8)       ; assemble "RET [arg_offset]-8"
    }
  }
  leave_scope()
  MOV W[func_table],[outer_func]
  POP SI
  POP DI
}



; This function parses an "if" statement
;             if (expr) statement
;             if (expr) statement else statement

function parse_if()
{
  PUSH SI
  PUSH DI
  get_next_token()                          ; Slurp the if
  parse_open()
  MOV SI,simplify(parse_expr())
  gen_ea(SI,08b,0,2,1)           ; generate "MOV EAX,expr"
  free_ast(SI)
  parse_close()
  asm_byte(085)
  asm_byte(0c0)                  ; assemble "TEST EAX,EAX"

  MOV SI,add_anon_label()
  gen_jcond(074,SI)              ; assemble "JZ skip"

  parse_statement()

  if (B[token]=='K' & B[token+1]=='E') {
    get_next_token()                          ; Slurp the else
    MOV DI,add_anon_label()
    gen_jmp(DI)
  }
  else
    MOV DI,0

  set_label(SI)

  if (DI != 0) {
    parse_statement()
    set_label(DI)
  }
  POP DI
  POP SI
}



; This function parses a "while" statement
;             while (expr) statement
;             while (expr) statement done statement

function parse_while()
{
  PUSH SI
  auto loop_test
  auto outer_loop
  auto loop_top

  get_next_token()                          ; Slurp the while
  parse_open()
  MOV W[loop_test],add_anon_label()
  gen_jmp([loop_test])
  MOV W[outer_loop],[loop_table]
  enter_scope()
  MOV W[loop_table],[scope_table]
  MOV W[loop_top],add_anon_label()
  set_label([loop_top])

  PUSH simplify(parse_expr())
  parse_close()
  parse_statement()
  set_label([loop_test])

  POP SI
  gen_ea(SI,08b,0,2,1)           ; generate "MOV EAX,expr"
  free_ast(SI)
  asm_byte(085)
  asm_byte(0c0)                  ; assemble "TEST EAX,EAX"
  gen_jcond(075,[loop_top])      ; assemble "JNZ loop_top"

  if (B[token]=='K' & B[token+1]=='N') {
    get_next_token()                          ; Slurp the done
    parse_statement()
  }

  MOV CX,[[scope_table]+6]       ; scope_table->break_dest
  if (CX != 0)
    set_label(CX)                ; set_label(scope_table->break_dest)

  leave_scope()
  MOV W[loop_table],[outer_loop]
  POP SI
}



; This function parses a "do" statement
;             do statement while (expr)

function parse_do()
{
  PUSH SI
  auto outer_loop
  auto loop_top

  get_next_token()                          ; Slurp the do

  MOV W[outer_loop],[loop_table]
  enter_scope()
  MOV W[loop_table],[scope_table]
  MOV W[loop_top],add_anon_label()
  set_label([loop_top])

  parse_statement()

  if (B[token]!='K' | B[token+1]!='W')
    error_exit("Expected while on line: $")

  get_next_token()                          ; Slurp the while
  parse_open()
  MOV SI,simplify(parse_expr())
  gen_ea(SI,08b,0,2,1)           ; generate "MOV EAX,expr"
  free_ast(SI)
  asm_byte(085)
  asm_byte(0c0)                  ; assemble "TEST EAX,EAX"
  gen_jcond(075,[loop_top])      ; assemble "JNZ loop_top"
  parse_close()

  if (B[token]=='K' & B[token+1]=='N') {
    get_next_token()                        ; Slurp the done
    parse_statement()
  }

  MOV CX,[[scope_table]+6]       ; scope_table->break_dest
  if (CX != 0)
    set_label(CX)                ; set_label(scope_table->break_dest)

  leave_scope()
  MOV W[loop_table],[outer_loop]
  POP SI
}



; This function parses an "auto" statement (stack variable definition)
;             auto identifier

function parse_auto()
{
  get_next_token()                          ; Slurp the auto
  MOV BX,[func_table]
  if (BX == 0)
    error_exit("auto variables only possible in a function on line: $")

  MOV DX,[BX+0a]                 ; func_table->stack
  PUSH DX
  PUSH BX
  add_auto(DX)
  POP BX
  POP CX
  if (-CX > [BX+8]) {            ; if (-func_table->stack > func_table->max_stack) {
    ADD W[BX+8],4                ;   func_table->max_stack += 4
    MOV W[last_phase],false
  }

  SUB W[BX+0a],4                 ; func_table->stack -= 4
  if (W[func_table] != W[scope_table])
    ADD W[[scope_table]+0a],4    ;   scope_table->stack += 4
}


; This function does the things common to "break" and "return"

function gen_break(table)
{
  PUSH SI
  MOV SI,[table]
  if (W[SI+6] == 0) {            ; if (table->break_dest == 0) {
    add_anon_label()
    MOV W[SI+6],AX               ;   table->break_dest = add_anon_label()
  }
  gen_jmp([SI+6])                ; assemble "JMP table->break_dest"
  POP SI
}



; This function parses a "break" statement
;             break

function parse_break()
{
  get_next_token()                          ; Slurp the break
  gen_break([loop_table])
}



; This function parses a "return" statement
;             return expr

function parse_return()
{
  PUSH SI
  get_next_token()                          ; Slurp the return
  MOV SI,simplify(parse_expr())
  gen_ea(SI,08b,0,2,1)           ; generate "MOV EAX,expr"
  free_ast(SI)
  gen_break([func_table])
  POP SI
}



; This function parses a "switch" statement
;             switch(expr) { case_blocks }
; case_blocks := case_block |
;                case_blocks case_block
; case_block := case_labels statement
; case_labels := case_label |
;                case_labels case_label
; case_label := case expr |
;               default

function parse_switch()
{
  PUSH SI
  auto switch_data
  auto switch_end
  auto default_label

  enter_scope()
  get_next_token()                          ; Slurp the switch
  parse_open()
  MOV SI,simplify(parse_expr())
  gen_ea(SI,08b,2,2,1)           ; assemble "MOV EDX,expr"
  free_ast(SI)
  parse_close()

  if (B[token] != '{')
    error_exit("Expected { on line: $")
  get_next_token()                          ; Slurp the {

  auto num_cases
  MOV W[num_cases],0
  auto num_defaults
  MOV W[num_defaults],0
  MOV BX,[[scope_table]+4]       ; current = scope_table->first

  while (BX != 0) {              ; while (current != 0) {
    if (W[BX+6] == 1)            ;   if (current->type == 1)
      INC W[num_cases]
    else if (W[BX+6] == 2) {     ;   else if (current->type == 2) {
      INC W[num_defaults]
      if (W[num_defaults] > 1)
        error_exit("Only one default label allowed on line: $")
    }
    MOV BX,[BX]                  ;   current = current->next
  }


  asm_byte(0b9)
  asm_dword(W[num_cases]+1,0)    ; assemble "MOV ECX,num_cases+1"
  asm_byte(056)                  ; assemble "PUSH ESI"
  MOV W[switch_data],add_anon_label()
  asm_byte(0be)
  destination_from_label([switch_data])
  asm_dword(AX,DX)               ; assemble "MOV ESI,switch_data"
  asm_byte(0ad)                  ; assemble "switch_looptop: LODSD"
  asm_byte(089)
  asm_byte(0c3)                  ; assemble "MOV EBX,EAX"
  asm_byte(0ad)                  ; assemble "LODSD"
  asm_byte(039)
  asm_byte(0d0)                  ; assemble "CMP EAX,EDX"
  asm_byte(0e0)
  asm_byte(0f8)                  ; assemble "LOOPNE switch_looptop"
  asm_byte(05e)                  ; assemble "POP ESI"
  asm_byte(0ff)
  asm_byte(0e3)                  ; assemble "JMP EBX"
  set_label([switch_data])
  MOV W[switch_end],add_anon_label()
  MOV W[default_label],[switch_end]

  MOV BX,[[scope_table]+4]       ; current = scope_table->first
  while (BX != 0) {
    if ([BX+6] == 1) {           ;   if (current->type == 1) {
      PUSH BX
      asm_dword([BX+2],[BX+4])   ;     asm_dword(current->dest,current->dest_high)
      POP BX
      PUSH BX
      asm_dword([BX+0a],[BX+0c]) ;     asm_dword(current->value,current->value_high)
      POP BX
    }
    else if ([BX+6] == 2)        ;   else if (current->type == 2)
      MOV W[default_label],BX
    MOV BX,[BX]                  ;   current = current->next
  }

  MOV BX,[default_label]
  asm_dword([BX+2],[BX+4])       ; assemble default_label->dest
  asm_dword(0,0)                 ; assemble 0 ("value" of default case - will be ignored)

  ADD W[num_cases],[num_defaults]

  ; State 1 - need a case or default label

  state1:
  if (B[token] == 'K' & (B[token+1] == 'C' | B[token+1] == 'D')) {
    if (B[token+1] == 'C') {
      get_next_token()                      ; Slurp the case
      if (B[token] != '0')
        error_exit("Expected a number at line: $")
      set_label(add_case_label(1,[token_arg],[token_arg_high]))
      get_next_token()                      ; Slurp the number
    }
    else {
      get_next_token()                      ; Slurp the default
      set_label(add_case_label(2,0,0))
    }
  }
  else
    error_exit("Expected a case or default at line: $")

  ; State 2 - need a statement or case or default label

  state2:
  parse_statement()
  TEST AX,AX
  JNZ state1

  DEC W[num_cases]
  CMP W[num_cases],0
  JE state3

  gen_jmp([switch_end])

  ; State 3 - need a } or case or default label

  state3:
  CMP B[token],'}'
  JNE state1

  get_next_token()                          ; Slurp the }
  set_label([switch_end])
  leave_scope()

  POP SI
}



; This function adds a label to the current scope

function add_symbol(label,type,value,value_high)
{
  MOV BX,[label]
  if ([first_phase]) {
    if (BX == 0)
      if ([type]==1) {
        MOV BX,malloc(14)        ; label = malloc(14)
        MOV W[BX+8],4            ; label->length = 4
        MOV W[BX+0a],[value]     ; label->value = value
        MOV W[BX+0c],[value_high] ; label->value_high = value_high
      }
      else {
        MOV BX,malloc(10)        ; label = malloc(10)
        MOV W[BX+8],0            ; label->length = 0
      }
    MOV W[BX],0                  ; label->next = 0
    MOV W[BX+6],[type]           ; label->type = type
    MOV CX,BX                    ; label
    MOV BX,[scope_table]
    if (W[BX+4] == 0)            ; if (scope_table->first == 0)
      MOV [BX+4],CX              ;   scope_table->first = label
    else {
      PUSH BX
      MOV BX,[BX]                ;   scope_table->current
      MOV [BX],CX                ;   scope_table->current->next = label
      POP BX
    }
  }
  else {
    if (BX != 0)                 ; if (label != 0)
      free(BX)                   ;   free(label)
    MOV BX,[scope_table]
    if ([BX] == 0)               ; if (scope_table->current == 0)
      MOV CX,[BX+4]              ;   label = scope_table->first
    else {
      PUSH BX
      MOV BX,[BX]                ;   scope_table->current
      MOV CX,[BX]                ;   label = scope_table->current->next
      POP BX
    }
  }
  MOV [BX],CX                    ; scope_table->current = label
  MOV AX,CX
}



; This function creates a new subscope and makes it the active scope

function enter_scope()
{
  PUSH SI
  XOR BX,BX
  if ([first_phase]) {
    MOV BX,malloc(12)              ; subscope = malloc(12)
    MOV W[BX+2],[scope_table]      ; subscope->parent = scope_table
    MOV W[BX+4],0                  ; subscope->first = 0
    MOV W[BX+6],0                  ; subscope->break_dest = 0
  }
  PUSH BX
  MOV SI,add_symbol(0,5,0,0)       ; symbol = add_symbol(0,5,0,0)
  POP BX
  if ([first_phase])
    MOV [SI+2],BX                  ; symbol->dest = subscope
  else
    MOV BX,[SI+2]                  ; subscope = symbol->dest
  MOV [scope_table],BX             ; scope_table = subscope
  MOV W[BX],0                      ; scope_table->current = 0
  MOV W[BX+0a],0                   ; scope_table->stack = 0
  POP SI
}



; This function leaves the current outermost scope and returns to its parent

function leave_scope()
{
  MOV CX,[[scope_table]+0a]
  ADD W[[func_table]+0a],CX             ; func_table->stack += scope_table->stack
  MOV W[scope_table],[[scope_table]+2]  ; scope_table = scope_table->parent
}



; This function adds an anonymous label to the current scope

function add_anon_label()
{
  add_symbol(0,0,0,0)
}



; This function adds a named label to the current scope

function add_named_label()
{
  add_symbol([identifier],0,0,0)
  PUSH AX
  set_label(AX)                  ; set_label(label)
  POP AX                         ; return label
}



; This function adds a stack variable (auto or function argument) to the current scope

function add_auto(offset)
{
  MOV BX,add_symbol([identifier],3,0,0)
  MOV AX,[offset]
  CWD
  MOV W[BX+2],AX           ; symbol->dest = offset
  MOV W[BX+4],DX           ; symbol->dest_high = (offset < 0 ? 0ffff : 0)
  get_next_token()                          ; Slurp the variable name
}



; This function adds a case label to the current scope

function add_case_label(type,value,value_high)
{
  add_symbol(0,[type],[value],[value_high])
}



; This function sets the destination of a label to be the current destination

function set_label(label)
{
  MOV BX,[label]
  if ([BX+6]!=4 & ([BX+2]!=[ip] | [BX+4]!=[ip+2])) {
    MOV W[BX+2],[ip]
    MOV W[BX+4],[ip+2]
    MOV W[last_phase],false
  }
}



; This function returns the destination of a label as an expr

function expr_from_symbol(symbol)
{
  PUSH SI

  MOV BX,malloc(6)               ; expr = malloc(6)
  MOV B[BX],'N'                  ; B[expr] = 'N'
  MOV B[BX+1],1                  ; B[expr+1] = 1
  MOV SI,[symbol]
  if (SI != 0) {
    MOV W[BX+2],[SI+2]
    MOV W[BX+4],[SI+4]             ; D[expr+2] = symbol->dest
    if (W[SI+6] == 3) {            ; if (symbol->type == 3)  ; BP-relative
      MOV B[BX+1],0                  ; B[expr+1] = 0
      PUSH BX
      MOV BX,malloc(2)               ; reg_bp = malloc(2)
      MOV B[BX],'R'                  ; B[reg_bp] = 'R'
      MOV B[BX+1],5                  ; B[reg_bp+1] = 5 (BP)
      PUSH BX
      MOV BX,malloc(6)               ; sum = malloc(6)
      MOV B[BX],'+'                  ; B[sum] = '+'
      POP [BX+2]                     ; W[sum+2] = reg_bp
      POP [BX+4]                     ; W[sum+4] = expr
    }                                ; expr = sum
    else if (W[SI+6] == 4) {       ; if (symbol->type == 4)  ; import table pointer
      MOV SI,[SI+2]
      MOV W[BX+2],[SI+2]
      MOV W[BX+4],[SI+4]             ; D[expr+2] = symbol->dest->dest

      PUSH BX
      MOV BX,malloc(4)               ; outer = malloc(4)
      MOV B[BX],'['                  ; B[outer] = '['
      MOV B[BX+1],0                  ; B[outer+1] = 0
      POP AX
      MOV W[BX+2],AX                 ; W[outer+2] = expr
    }                                ; expr = outer
  }
  else {
    MOV W[BX+2],0
    MOV W[BX+4],0                  ; D[expr+2] = 0
  }
  MOV AX,BX                      ; return expr
  POP SI
}



; This function finds a symbol in the current scope and parent scopes, and returns it

function symbol_from_identifier()
{
  PUSH SI
  PUSH DI

  MOV SI,[scope_table]           ; table = scope_table
  do {
    MOV DI,[SI+4]                ; current = table->first
    while (DI) {
      if (string_equals([identifier]+8,DI+8))
        JMP end
      MOV DI,[DI]                ; current = current->next
    }
    MOV SI,[SI+2]                ; table = table->parent
  } while (SI != 0)              ; while (table != 0)
  if (~[first_phase])
    label_error("Label not found: $")
  else {
    MOV W[last_phase],false
    XOR DI,DI                    ; current = 0
  }
  end:
  free([identifier])
  MOV AX,DI                      ; return current
  POP DI
  POP SI
}



; This function verifies that a symbol is a label and returns its destination in DX:AX

function destination_from_symbol(symbol)
{
  MOV BX,[symbol]
  if (BX == 0) {
    XOR AX,AX
    XOR DX,DX
  }
  else
    if (W[BX+6] == 0)            ; symbol->type
      destination_from_label(BX)
    else
      error_exit("Expected constant label on line: $")
}



; This function returns the destination of a label in DX:AX

function destination_from_label(label)
{
  MOV BX,[label]
  MOV AX,[BX+2]
  MOV DX,[BX+4]
}



; Initialize the symbol tables at the start of the program

function init_tables()
{
  MOV BX,malloc(12)
  MOV W[global_table],BX
  MOV W[scope_table],BX
  XOR AX,AX
  MOV W[func_table],AX
  MOV W[loop_table],AX
  MOV W[BX],AX               ; global_table->next = 0
  MOV W[BX+2],AX             ; global_table->parent = 0
  MOV W[BX+4],AX             ; global_table->first = 0
  MOV W[BX+6],AX             ; global_table->break_dest = 0
  MOV W[BX+8],AX             ; global_table->max_stack = 0
  MOV W[BX+0a],AX            ; global_table->stack = 0
}



; Initialize the symbol tables at the start of a phase

function restart_tables()
{
  MOV W[[global_table]],0    ; global_table->current = 0
}
