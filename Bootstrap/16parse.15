; This is the bootstrapping compiler step 16 (written in step 15 language)
; This file contains the parser and main function.

; Emit the byte in byte
function asm_byte(byte)
{
  write(byte,1)
}



; Emit the word in word
function asm_word(word)
{
  write(word,2)
}



; Emit the dword high:low
function asm_dword(low,high)
{
  write(low,4)
}



function asm_nop()    asm_byte(090)
function asm_cbw()    { asm_byte(066) asm_byte(098) }
function asm_cwd()    { asm_byte(066) asm_byte(099) }
function asm_cwde()   asm_byte(098)
function asm_cdq()    asm_byte(099)
function asm_pushfd() asm_byte(09c)
function asm_popfd()  asm_byte(09d)
function asm_sahf()   asm_byte(09e)
function asm_lahf()   asm_byte(09f)
function asm_movsb()  asm_byte(0a4)
function asm_movsd()  asm_byte(0a5)
function asm_cmpsb()  asm_byte(0a6)
function asm_cmpsd()  asm_byte(0a7)
function asm_stosb()  asm_byte(0aa)
function asm_stosd()  asm_byte(0ab)
function asm_lodsb()  asm_byte(0ac)
function asm_lodsd()  asm_byte(0ad)
function asm_scasb()  asm_byte(0ae)
function asm_scasd()  asm_byte(0af)
function asm_ret()    asm_byte(0c3)
function asm_retf()   asm_byte(0cb)
function asm_salc()   asm_byte(0d6)
function asm_xlatb()  asm_byte(0d7)
function asm_repne()  asm_byte(0f2)
function asm_rep()    asm_byte(0f3)
function asm_cmc()    asm_byte(0f5)
function asm_clc()    asm_byte(0f8)
function asm_stc()    asm_byte(0f9)
function asm_cli()    asm_byte(0fa)
function asm_sti()    asm_byte(0fb)
function asm_cld()    asm_byte(0fc)
function asm_std()    asm_byte(0fd)



; Generate a conditional jump instruction

function gen_jcond(cond,symbol)
{
  PUSH SI
  PUSH DI
  destination_from_symbol([symbol])
  MOV SI,AX
  MOV DI,DX
  SUB SI,[ip]
  SBB DI,[ip+2]
  SUB SI,2
  SBB DI,0

  if ([first_phase] | is_short(SI,DI)) {
    asm_byte([cond])
    asm_byte(SI)
  }
  else {
    asm_byte(0f)
    asm_byte([cond]+010)
    SUB SI,4
    SBB DI,0
    asm_dword(SI,DI)
  }
  POP DI
  POP SI
}



; Assemble a conditional jump instruction

;   70+cond cb     Jcond cb

function asm_jcond(cond)
{
  if (B[token]!='I')
    error_exit("Label required at line: $")

  gen_jcond([cond],symbol_from_identifier())
  get_next_token()                          ; Slurp the label
}

function asm_jo()    asm_jcond(070)
function asm_jno()   asm_jcond(071)
asm_jc:
asm_jnae:
function asm_jb()    asm_jcond(072)
asm_jnc:
asm_jnb:
function asm_jae()   asm_jcond(073)
asm_je:
function asm_jz()    asm_jcond(074)
asm_jne:
function asm_jnz()   asm_jcond(075)
asm_jna:
function asm_jbe()   asm_jcond(076)
asm_jnbe:
function asm_ja()    asm_jcond(077)
function asm_js()    asm_jcond(078)
function asm_jns()   asm_jcond(079)
function asm_jp()    asm_jcond(07a)
function asm_jnp()   asm_jcond(07b)
asm_jnge:
function asm_jl()    asm_jcond(07c)
asm_jnl:
function asm_jge()   asm_jcond(07d)
asm_jng:
function asm_jle()   asm_jcond(07e)
asm_jnle:
function asm_jg()    asm_jcond(07f)



; Returns true if high:low does not fit in a signed 8-bit integer

function is_short(low,high)
{
  MOV AX,[low]
  CBW
  CWD
  MOV CX,AX
  MOV BX,DX
  return (CX==[low] & BX==[high])
}



; Check to see if high:low fits in a signed 8-bit integer and we're not in the first phase
; If not, prints an error message and exits.

function check_short(low,high)
{
  if (~[first_phase] & is_short(low,high))
    label_error("Too far to label: $")
}



; Assemble a loop instruction

;   E0 cb          LOOPNE cb
;   E1 cb          LOOPE cb
;   E2 cb          LOOP cb
;   E3 cb          JeCXZ cb

function asm_loopx(cond)
{
  asm_byte([cond])
  if (B[token] != 'I')
    error_exit("Label required at line: $")

  destination_from_symbol(symbol_from_identifier())
  SUB AX,[ip]
  SBB DX,[ip+2]
  SUB AX,1
  SBB DX,0
  PUSH AX
  check_short(AX,DX)
  asm_byte(@)
  get_next_token()                          ; Slurp the label
}

function asm_loopne() asm_loopx(0e0)
function asm_loope()  asm_loopx(0e1)
function asm_loop()   asm_loopx(0e2)
function asm_jcxz()   asm_loopx(0e3)



; Generate a CALL instruction

function gen_call(ast)
{
  PUSH SI
  MOV SI,[ast]
  if (B[SI] == 'N') {
    asm_byte(0e8)     ; assemble "CALL "
    MOV AX,[SI+2]
    MOV DX,[SI+4]
    SUB AX,[ip]
    SBB DX,[ip+2]
    SUB AX,4
    SBB DX,0
    asm_dword(AX,DX)  ; emit the jump dword
  }
  else
    gen_ea(SI,0ff,2,2,1)  ; generate "CALL inner expr"
  POP SI
}



; Assemble a CALL instruction.

;   E8 cv          CALL cv
;   FF /2          CALL rmv

function asm_call()
{
  PUSH SI
  MOV SI,simplify(parse_expr())
  gen_call(SI)
  free_ast(SI)
  POP SI
}



; Generate an unconditional JMP instruction to a symbol

function gen_jmp(symbol)
{
  PUSH SI
  PUSH DI
  destination_from_symbol([symbol])
  MOV SI,AX
  MOV DI,DX

  SUB SI,[ip]
  SBB DI,[ip+2]
  SUB SI,2
  SBB DI,0

  if ([first_phase] | is_short(SI,DI)) {
    asm_byte(0eb)
    asm_byte(SI)              ; assemble "JMP cb"
  }
  else {
    asm_byte(0e9)
    SUB SI,3
    SBB DI,0
    asm_dword(SI,DI)          ; assemble "JMP cd"
  }
  POP DI
  POP SI
}



; Assemble an unconditional JMP instruction.

;   E9 cv          JMP cv
;   EB cb          JMP cb
;   FF /4          JMP rmv

function asm_jmp()
{
  if (B[token]=='I') {
    gen_jmp(symbol_from_identifier())
    get_next_token()                          ; Slurp the label
  }
  else {
    PUSH SI
    MOV SI,simplify(parse_expr())
    gen_ea(SI,0ff,4,2,1)
    free_ast(SI)
    POP SI
  }
}



; Assemble an INT instruction.

;   CC             INT 3              5  p0os
;   CD ib          INT ib             5  p0normal

function asm_int()
{
  PUSH SI
  MOV SI,simplify(parse_expr())

  if (B[SI] != 'N')
    need_const_error()

  if (B[SI+2] == 3)
    asm_byte(0cc)
  else {
    asm_byte(0cd)
    asm_byte([SI+2])
  }

  free_ast(SI)
  POP SI
}



function need_const_error()
{
  error_exit("Constant required on line: $")
}



; Assemble a DD instruction (output a single word)
function asm_dd()
{
  PUSH SI
  do {
    MOV SI,simplify(parse_expr())

    if (B[SI] != 'N')
      need_const_error()

    asm_dword([SI+2],[SI+4])
    free_ast(SI)

    if (B[token] != ',')
      break
    get_next_token()                        ; Slurp the comma
  } while (true)
  POP SI
}



; Assemble a DW instruction (output a single word)
function asm_dw()
{
  PUSH SI
  do {
    MOV SI,simplify(parse_expr())

    if (B[SI] != 'N')
      need_const_error()

    asm_word([SI+2])
    free_ast(SI)

    if (B[token] != ',')
      break
    get_next_token()                        ; Slurp the comma
  } while (true)
  POP SI
}



; Assemble a DB instruction (output a single byte or a string)
function asm_db()
{
  PUSH SI
  do {
    MOV SI,simplify(parse_expr())

    if (B[SI] == '"')
      asm_string(SI+2)
    else if (B[SI] == 'N')
      asm_byte([SI+2])
    else
      need_const_error()

    free_ast(SI)

    if (B[token] != ',')
      break
    get_next_token()                        ; Slurp the comma
  } while (true)
  POP SI
}



; Assemble an INC or DEC instruction.

;   40+r           INC rd
;   48+r           DEC rd
;   FE /0          INC rmb
;   FE /1          DEC rmb
;   FF /0          INC rmd
;   FF /1          DEC rmd

function asm_incdec(incdec)
{
  if (B[token]=='R' & B[token_arg]<8) {
    asm_byte(([incdec]<<3) + [token_arg] + 040)
    get_next_token()                          ; Slurp the register
  }
  else {
    PUSH SI
    MOV SI,simplify(parse_expr())
    gen_ea(SI,0fd+ast_size(SI),[incdec],0,3)
    free_ast(SI)
    POP SI
  }
}

function asm_inc()  asm_incdec(0)
function asm_dec()  asm_incdec(1)



; Assemble a PUSH instruction.

;   50+r           PUSH rd
;   FF /6          PUSH rmd

function asm_push()
{
  PUSH SI
  MOV SI,simplify(parse_expr())
  gen_stk(SI)
  free_ast(SI)
  POP SI
}



; Assemble a POP instruction.

;   58+r           POP rd
;   8F /0          POP md

function asm_pop()
{
  if (B[token]=='R' & B[token_arg]<8) {
    asm_byte(058+[token_arg])
    get_next_token()                        ; Slurp the register
  }
  else {
    PUSH SI
    MOV SI,simplify(parse_expr())
    gen_ea(SI,08f,0,2,2)
    free_ast(SI)
    POP SI
  }
}



; Assemble a NOT, NEG, MUL, IMUL, DIV or IDIV instruction.

;   F6 /n          OP rmb
;   F7 /n          OP rmd

function asm_math(op)
{
  PUSH SI
  MOV SI,simplify(parse_expr())
  gen_ea(SI,0f5+ast_size(SI),[op],0,3)
  free_ast(SI)
  POP SI
}

function asm_not()   asm_math(2)
function asm_neg()   asm_math(3)
function asm_mul()   asm_math(4)
function asm_imul()  asm_math(5)
function asm_div()   asm_math(6)
function asm_idiv()  asm_math(7)



; Parse (and ignore) a comma - error if it isnt there.

function parse_comma()
{
  if (B[token]!=',')
    error_exit("Comma expected on line: $")
  get_next_token()                          ; Slurp the comma
}



; Assemble a ROL, ROR, RCL, RCR, SHL, SHR or SAR instruction.

;   C0 /n ib       OP rmb,ib
;   C1 /n ib       OP rmd,ib
;   D0 /n          OP rmb,1
;   D1 /n          OP rmd,1
;   D2 /n          OP rmb,CL
;   D3 /n          OP rmd,CL

function asm_shift(op)
{
  PUSH SI
  auto size

  MOV SI,simplify(parse_expr())
  MOV W[size],ast_size(SI)
  parse_comma()

  if (B[token] == '0') {
    if (B[token_arg] == 1)
      gen_ea(SI,0cf+[size],[op],0,3)    ; asssemble "OP rm,1"
    else {
      PUSH [token_arg]
      gen_ea(SI,0bf+[size],[op],0,3)
      asm_byte(@)                       ; assemble "OP rm,n"
    }
    get_next_token()                         ; Slurp the number
  }
  else {
    if (B[token]=='R' & B[token_arg]==9)
      get_next_token()                       ; Slurp the CL
    else {
      PUSH DI
      MOV DI,simplify(parse_expr())
      gen_ea(DI,08a,1,1,1)              ; assemble "MOV CL,expr"
      free_ast(DI)
      POP DI
    }
    gen_ea(SI,0d1+[size],[op],0,3)    ; assemble "OP rm,CL"
  }

  free_ast(SI)
  POP SI
}

function asm_rol()   asm_shift(0)
function asm_ror()   asm_shift(1)
function asm_rcl()   asm_shift(2)
function asm_rcr()   asm_shift(3)
function asm_shl()   asm_shift(4)
function asm_shr()   asm_shift(5)
function asm_sar()   asm_shift(7)



; Assemble an XCHG instruction.

;   86 /r          XCHG rmb,rb
;   87 /r          XCHG rmd,rd
;   90+r           XCHG EAX,rd

function asm_xchg()
{
  PUSH SI
  PUSH DI
  auto size

  PUSH simplify(parse_expr())
  parse_comma()
  MOV SI,simplify(parse_expr())
  POP DI

  MOV W[size],ast_size(SI)
  PUSH [size]
  OR W[size],ast_size(DI)
  POP CX
  check_opsize(AX,CX)

  if (B[DI] == 'R') {
    MOV CL,B[DI+1]
    if (CL == 0)
      if (B[SI] == 'R')
        asm_byte(090+[SI+1])                    ; assemble "XCHG EAX,rd"
      else
        gen_ea(SI,085+[size],0,[size],3)        ; assemble "XCHG EAX,rmd"
    else
      if (B[SI]=='R' & B[SI+1]==0)
        asm_byte(090+CX)                        ; assemble "XCHG rd,EAX"
      else
        gen_ea(SI,085+[size],CX&7,[size],3)     ; assemble "XCHG rd,rmd"
  }
  else {
    if (B[SI] == 'R')
      gen_ea(DI,[size]+085,B[SI+1]&7,[size],3)  ; assemble "XCHG rmd,rd"
    else {
      gen_stk(SI)                               ; assemble "PUSH mem2"
      gen_stk(DI)                               ; assemble "PUSH mem1"
      gen_ea(SI,08f,0,2,2)                      ; assemble "POP mem2"
      gen_ea(DI,08f,0,2,2)                      ; assemble "POP mem1"
    }
  }
  free_ast(SI)
  free_ast(DI)
  POP DI
  POP SI
}



; Assemble a TEST instruction.

;   84 /r          TEST rmb,rb
;   85 /r          TEST rmd,rd
;   A8 ib          TEST AL,ib
;   A9 id          TEST EAX,id
;   F6 /0 ib       TEST rmb,ib
;   F7 /0 id       TEST rmd,id

function asm_test()
{
  PUSH SI
  PUSH DI
  auto size

  PUSH simplify(parse_expr())
  parse_comma()
  MOV SI,simplify(parse_expr())
  POP DI

  MOV W[size],ast_size(SI)
  PUSH [size]
  OR W[size],ast_size(DI)
  POP CX
  check_opsize(AX,CX)

  if (B[DI]=='R' & (B[DI+1]&7)==0 & B[SI]=='N') {
    asm_byte(0a7+[size])                       ; assemble "TEST A,"
    if ([size]==1)
      asm_byte([SI+2])                         ; assemble "ib"
    else
      asm_dword([SI+2],[SI+4])                 ; assemble "id"
  }
  else {
    if (B[SI]=='N') {
      gen_ea(DI,0f5+[size],0,[size],1)         ; assemble "TEST rm,"
      if ([size]==1)
        asm_byte([SI+2])                       ; assemble "ib"
      else
        asm_dword([SI+2],[SI+4])               ; assemble "id"
    } else if (B[SI]=='R')
      gen_ea(DI,083+[size],[SI+1]&7,[size],1)  ; assemble "TEST rm,r"
    else {
      gen_ea(SI,08b,0,[size],1)                ; assemble "MOV A,expr"
      gen_ea(DI,083+[size],0,[size],1)         ; assemble "TEST rm,A"
    }
  }
  free_ast(DI)
  free_ast(SI)
  POP DI
  POP SI
}



; Assemble an ADD, OR, ADC, SBB, AND, SUB, XOR or CMP instruction.

;   00+8*n /r      OP rmb,rb
;   01+8*n /r      OP rmd,rd
;   02+8*n /r      OP rb,rmb
;   03+8*n /r      OP rd,rmd
;   04+8*n ib      OP AL,ib
;   05+8*n id      OP EAX,id
;   80 /n ib       OP rmb,ib
;   81 /n id       OP rmd,id
;   83 /n ib       OP rmd,ib

function asm_alu(op)
{
  PUSH SI
  PUSH DI
  auto size

  PUSH simplify(parse_expr())
  parse_comma()
  MOV SI,simplify(parse_expr())
  POP DI

  MOV W[size],ast_size(SI)
  PUSH [size]
  OR W[size],ast_size(DI)
  POP CX
  check_opsize(AX,CX)

  if (B[SI] != 'N') {
    SHL B[op],3
    if (B[DI] == 'R')
      gen_ea(SI,1+[size]+[op],[DI+1]&7,[size],1)    ; assemble "OP r,expr"
    else if (B[SI] == 'R')
      gen_ea(DI,0ff+[size]+[op],[SI+1]&7,[size],3)  ; assemble "OP rm,r"
    else {
      gen_ea(SI,089+[size],0,[size],1)              ; assemble "MOV A,expr"
      gen_ea(DI,0ff+[size]+[op],0,[size],3)         ; assemble "OP mem,A"
    }
  }
  else {
    if (B[DI]=='R' & (B[DI+1]&7)==0) {
      asm_byte(3+[size]+([op]<<3))                  ; assemble "OP A,"
      if ([size]==1)
        asm_byte([SI+2])                            ; assemble "ib"
      else
        asm_dword([SI+2],[SI+4])                    ; assemble "id"
    }
    else
      if ([size]==1) {
        gen_ea(DI,080,[op],1,3)                     ; assemble "OP rmb,"
        asm_byte([SI+2])                            ; assemble "ib"
      }
      else
        if (is_short([SI+2],[SI+4])) {
          gen_ea(DI,083,[op],2,3)                     ; assemble "OP rmd,"
          asm_byte([SI+2])                            ; assemble "ib"
        }
        else {
          gen_ea(DI,081,[op],2,3)                     ; assemble "OP rmd,"
          asm_dword([SI+2],[SI+4])                    ; assemble "id"
        }
  }
  free_ast(DI)
  free_ast(SI)
  POP DI
  POP SI
}

function asm_add() asm_alu(0)
function asm_or()  asm_alu(1)
function asm_adc() asm_alu(2)
function asm_sbb() asm_alu(3)
function asm_and() asm_alu(4)
function asm_sub() asm_alu(5)
function asm_xor() asm_alu(6)
function asm_cmp() asm_alu(7)



; Assemble a MOV instruction.

;   88 /r          MOV rmb,rb
;   89 /r          MOV rmd,rd
;   8A /r          MOV rb,rmb
;   8B /r          MOV rd,rmd
;   A0 id          MOV AL,xb
;   A1 id          MOV EAX,xd
;   A2 id          MOV xb,AL
;   A3 id          MOV xd,EAX
;   B0+r ib        MOV rb,ib
;   B8+r id        MOV rd,id
;   C6 /0 ib       MOV rmb,ib
;   C7 /0 id       MOV rmd,id

function asm_mov()
{
  PUSH SI
  PUSH DI
  auto size

  PUSH simplify(parse_expr())
  parse_comma()
  MOV SI,simplify(parse_expr())
  POP DI

  MOV W[size],ast_size(SI)
  PUSH [size]
  OR W[size],ast_size(DI)
  POP CX
  check_opsize(AX,CX)

  if (B[DI]=='R')
    if ((B[DI+1]&7)==0 & B[SI]==']' & B[SI+4]==5) {
      asm_byte(09f+[size])                         ; assemble "MOV A,[]"
      asm_dword([SI+5],[SI+7])                     ; assemble "id"
    }
    else
      if (B[SI]=='N') {
        asm_byte(0a8+([size]<<3)+(B[DI+1]&7))      ; assemble "MOV r,"
        if ([size]==1)
          asm_byte([SI+2])                         ; assemble "ib"
        else
          asm_dword([SI+2],[SI+4])                 ; assemble "id"
      }
      else
        gen_ea(SI,089+[size],B[DI+1]&7,[size],1)   ; assemble "MOV r,rm"
  else
    if (B[SI]=='R')
      if (B[DI]==']' & B[DI+4]==5 & (B[SI+1]&7)==0) {
        asm_byte(0a1+[size])                         ; assemble "MOV [],A"
        asm_dword([DI+5],[DI+7])                     ; assemble "id"
      }
      else
        gen_ea(DI,087+[size],B[SI+1]&7,[size],2)   ; assemble "MOV rm,r"
    else if (B[SI]=='N') {
      gen_ea(DI,0c5+[size],0,[size],2)           ; assemble "MOV m,"
      if ([size]==1)
        asm_byte([SI+2])                         ; assemble "ib"
      else
        asm_dword([SI+2],[SI+4])                 ; assemble "id"
    }
    else {
      gen_ea(SI,089+[size],0,[size],1)           ; assemble "MOV A,expr"
      gen_ea(DI,087+[size],0,[size],2)           ; assemble "MOV expr,A"
    }
  free_ast(SI)
  free_ast(DI)
  POP DI
  POP SI
}



; Parse a mnemonic and output the instruction bytes

parse_mnemonic_table:
 DW asm_adc DW asm_add DW asm_and DW asm_call DW asm_cbw       ;  0
 DW asm_cdq DW asm_clc DW asm_cld DW asm_cli DW asm_cmc
 DW asm_cmp DW asm_cmpsb DW asm_cmpsd DW asm_cwd DW asm_cwde   ; 10
 DW asm_db DW asm_dd DW asm_dec DW asm_div DW asm_dw
 DW asm_idiv DW asm_imul DW asm_inc DW asm_int DW asm_ja       ; 20
 DW asm_jae DW asm_jb DW asm_jbe DW asm_jc DW asm_jcxz
 DW asm_je DW asm_jg DW asm_jge DW asm_jl DW asm_jle           ; 30
 DW asm_jmp DW asm_jna DW asm_jnae DW asm_jnb DW asm_jnbe
 DW asm_jnc DW asm_jne DW asm_jng DW asm_jnge DW asm_jnl       ; 40
 DW asm_jnle DW asm_jno DW asm_jnp DW asm_jns DW asm_jnz
 DW asm_jo DW asm_jp DW asm_js DW asm_jz DW asm_lahf           ; 50
 DW asm_lodsb DW asm_lodsd DW asm_loop DW asm_loope DW asm_loopne
 DW asm_mov DW asm_movsb DW asm_movsd DW asm_mul DW asm_neg    ; 60
 DW asm_nop DW asm_not DW asm_or DW asm_pop DW asm_popfd
 DW asm_push DW asm_pushfd DW asm_rcl DW asm_rcr DW asm_rep    ; 70
 DW asm_repne DW asm_ret DW asm_retf DW asm_rol DW asm_ror
 DW asm_sahf DW asm_salc DW asm_sar DW asm_sbb DW asm_scasb    ; 80
 DW asm_scasd DW asm_shl DW asm_shr DW asm_stc DW asm_std
 DW asm_sti DW asm_stosb DW asm_stosd DW asm_sub DW asm_test   ; 90
 DW asm_xchg DW asm_xlatb DW asm_xor

function parse_mnemonic()
{
  PUSH W[token_arg]
  get_next_token()                          ; Slurp the mnemonic
  POP CX
  JMP [parse_mnemonic_table + (CX<<1)]
}



; Main function.
;   Allocate a line buffer
;   Phase loop (phase 0 = finding label locations, phase 1 = emitting)
;     Parse loop

line_buffer:      DW 0
max_line_length:  DW 0200
last_phase:       DW 0
first_phase:      DW 0

function main()
{
  malloc([max_line_length])
  MOV [line_buffer],AX

  MOV W[first_phase],true
  do {


    MOV W[last_phase],true
    rewind()
    restart_tables()

    MOV DX,[writename]
    MOV AH,03c
    XOR CX,CX
    INT 021
    JC end
    MOV [writehandle],AX
    emit_pe_headers()

    get_next_token()
    assemble_statements()

    if (B[token] != 0)
      error_exit("Unexpected character on line: $")

    emit_pe_footers()
    MOV BX,[writehandle]
    MOV AH,03e
    INT 021

    MOV W[first_phase],false
  } while (~[last_phase])

  end:
}
