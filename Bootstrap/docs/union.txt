union:
  A union is like an enum, except that its values are types, not objects
  Our unions are like typesafe tagged C unions. The compiler won't let you manipulate the subtype unless it can prove the subtype
  It's also another way of writing inheritance hierarchies
  It's also generated by the "|" operator in a grammar
  Membership of a union is associative, so:
    union { 0 = X, 1 = union { 2 = Y, 3 = Z } }
  is semantically equivalent to:
    union { 0 = X, 2 = Y, 3 = Z }
  A union can only be a member of a union if the types of their tags are the same (all identifiers, all numbers, all strings or all Bools (degenerate case))
  Access individual subtypes as if the entire union was of that type.
  Access the tag of a union through the special ".type" member.
  Mutable unions must be the size of the largest subtype plus the size of the tag type. Constant unions can be smaller
