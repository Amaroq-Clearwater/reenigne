; This is the bootstrapping compiler step 10 (written in step 9 language)
; This adds some mnemonics for simple opcodes. No Effective Address instructions
; or 2-byte opcodes are supported yet.

0E                      ;   PUSH CS
1F                      ;   POP DS
0E                      ;   PUSH CS
07                      ;   POP ES
BE8200                  ;   MOV SI,082
89F2                    ;   MOV DX,SI
.fnloop1.
AC                      ;   LODSB
3C" "                   ;   CMP AL," "
75@fnloop1.             ;   JNE fnloop1
30DB                    ;   XOR BL,BL
885CFF                  ;   MOV B[SI-1],BL
89F7                    ;   MOV DI,SI
.fnloop2.
AC                      ;   LODSB
3C0D                    ;   CMP AL,0d
75@fnloop2.             ;   JNE fnloop2
885CFF                  ;   MOV B[SI-1],BL

B8003D                  ;   MOV AX,03d00
CD21                    ;   INT 021
72@fin2.                ;   JC fin2
A3*readhandle.          ;   MOV [readhandle],AX

B43C                    ;   MOV AH,03c
31C9                    ;   XOR CX,CX
89FA                    ;   MOV DX,DI
CD21                    ;   INT 021
73@nofin.               ;   JNC nofin
.fin2.                  ; fin2:
E9#fin.                 ;   JMP fin
.nofin.                 ; nofin:
A3*writehandle.         ;   MOV [writehandle],AX

31C0                    ;   XOR AX,AX
A3*phase.               ;   MOV [phase],AX
.phase_top.             ; phase_top:
B80001                  ;   MOV AX,0100
A3*ip.                  ;   MOV [ip],AX   ; current address

31C0                    ;   XOR AX,AX
A3*highnybblef.         ;   MOV [highnybblef],AX   ; high nybble flag
A3*highnybble.          ;   MOV [highnybble],AX   ; high nybble

.looptop.               ; looptop:
E8#read.                ;   CALL read

3C";"                   ;   CMP AL,";"
75@nocomment.           ;   JNZ nocomment
.comment.               ; comment:
E8#read.                ;   CALL read       ; this is a comment
3C0D                    ;   CMP AL,0D
75@comment.             ;   JNZ comment
E9#looptop.             ;   JMP looptop

.nocomment.             ; nocomment:
3C"."                   ;   CMP AL,"."
75@not_target.          ;   JNZ not_target
C606*add_symbol_flag.01 ;   MOV B[add_symbol_flag],1
E8#readlabel.           ;   CALL readlabel       ; this is a label target
A1*ip.                  ;   MOV AX,[ip]
8907                    ;   MOV W[BX],AX    ; save symbol location
E9#looptop.             ;   JMP looptop

.not_target.            ; not_target:
3C"@"                   ;   CMP AL,"@"
75@not_short.           ;   JNZ not_short
C606*add_symbol_flag.00 ;   MOV B[add_symbol_flag],0
E8#readlabel.           ;   CALL readlabel       ; this is a short jump
8B17                    ;   MOV DX,W[BX]
2B16*ip.                ;   SUB DX,[ip]
4A                      ;   DEC DX
E8#check_short.         ;   CALL check_short
B90100                  ;   MOV CX,1
E8#write.               ;   CALL write      ; write the jump byte
E9#looptop.             ;   JMP looptop

.not_short.             ; not_short:
3C"#"                   ;   CMP AL,"#"
75@not_near.            ;   JNZ not_near
C606*add_symbol_flag.00 ;   MOV B[add_symbol_flag],0
E8#readlabel.           ;   CALL readlabel       ; this is a near jump
8B17                    ;   MOV DX,W[BX]
2B16*ip.                ;   SUB DX,[ip]
4A                      ;   DEC DX
4A                      ;   DEC DX
B90200                  ;   MOV CX,2
E8#write.               ;   CALL write      ; write the jump word
EB@looptop.             ;   JMP looptop

.not_near.              ; not_near:
3C"*"                   ;   CMP AL,"*"
75@not_absolute.        ;   JNZ not_absolute
C606*add_symbol_flag.00 ;   MOV B[add_symbol_flag],0
E8#readlabel.           ;   CALL readlabel       ; this is an absolute label reference
8B17                    ;   MOV DX,W[BX]
B90200                  ;   MOV CX,2
E8#write.               ;   CALL write      ; write the address word
E9#looptop.             ;   JMP looptop

.not_absolute.          ; not_absolute
3C22                    ;   CMP AL,022
75@not_string.          ;   JNZ not_string
.stringtop.             ; stringtop:
E8#read.                ;   CALL read       ; this is a string literal
3C22                    ;   CMP AL,022
74@looptop2.            ;   JE looptop2
88C2                    ;   MOV DL,AL
B90100                  ;   MOV CX,1
E8#write.               ;   CALL write      ; write the character
EB@stringtop.           ;   JMP stringtop

.not_string.            ; not_string:
3C"'"                   ;   CMP AL,"'"
75@not_mnemonic.        ;   JNE not_mnemonic
E8#readmnemonic.        ;   CALL readmnemonic  ; this is a mnemonic
E9#looptop.             ;   JMP looptop

.not_mnemonic.          ; not_mnemonic
3C"0"                   ;   CMP AL,"0"
7C@looptop2.            ;   JL looptop2
3C"9"                   ;   CMP AL,"9"
7E@number.              ;   JLE number
3C"A"                   ;   CMP AL,"A"
7C@looptop2.            ;   JL looptop2
3C"F"                   ;   CMP AL,"F"
7E@capital.             ;   JLE capital
3C"a"                   ;   CMP AL,"a"
7C@looptop2.            ;   JL looptop2
3C"f"                   ;   CMP AL,"f"
7F@looptop2.            ;   JG looptop2
2C20                    ;   SUB AL,020
.capital.               ; capital:
2C07                    ;   SUB AL,7
.number.                ; number:
2C"0"                   ;   SUB AL,"0"
8A16*highnybble.        ;   MOV DL,[highnybble]
D0E2                    ;   SHL DL,1
D0E2                    ;   SHL DL,1
D0E2                    ;   SHL DL,1
D0E2                    ;   SHL DL,1
08C2                    ;   OR DL,AL
8816*highnybble.        ;   MOV [highnybble],DL   ; high nybble
8036*highnybblef.01     ;   XOR [highnybblef],1
75@looptop2.            ;   JNZ looptop2
B90100                  ;   MOV CX,1
E8#write.               ;   CALL write

.looptop2.              ; looptop2:
E9#looptop.             ;   JMP looptop
.next_phase.            ; next_phase:
B80042                  ;   MOV AX,04200
8B1E*readhandle.        ;   MOV BX,[readhandle]      ; read handle
31C9                    ;   XOR CX,CX
31D2                    ;   XOR DX,DX
CD21                    ;   INT 021      ; seek to beginning of file

FE06*phase.             ;   INC B[phase]
803E*phase.02           ;   CMP B[phase],2
7D@fin.                 ;   JGE fin
E9#phase_top.           ;   JMP phase_top

.fin.                   ; fin:
B44C                    ;   MOV AH,04C
CD21                    ;   INT 021          ; exit

; Read 1 byte from source, return byte in AL
; on EOF go to next_phase instead of returning.
.read.                  ; read:
B43F                    ;   MOV AH,03f
8B1E*readhandle.        ;   MOV BX,[readhandle]
B90100                  ;   MOV CX,1
BA*databuffer.          ;   MOV DX,offset databuffer
CD21                    ;   INT 021
85C0                    ;   TEST AX,AX
75@read_ok.             ;   JNZ read_ok
5A                      ;   POP DX           ; return address
E9#next_phase.          ;   JMP next_phase
.read_ok.               ; read_ok:
A0*databuffer.          ;   MOV AL,B[databuffer]
C3                      ;   RET

; Write CX bytes from DX if in phase 1
; Increment IP counter by CX
.write.                 ; write:
8916*databuffer.        ;   MOV W[databuffer],DX
010E*ip.                ;   ADD W[ip],CX
833E*phase.00           ;   CMP W[phase],0
74@skip_write.          ;   JZ skip_write
B440                    ;   MOV AH,040
8B1E*writehandle.       ;   MOV BX,[writehandle]
BA*databuffer.          ;   MOV DX,offset databuffer
CD21                    ;   INT 021
.skip_write.            ; skip_write:
C3                      ;   RET

; Check to see if DX fits in a signed 8-bit integer
; If not, prints an error message and exits.
.check_short.           ; check_short:
833E*phase.00           ;   CMP W[phase],0
74@short_ok.            ;   JZ short_ok
89D0                    ;   MOV AX,DX
98                      ;   CBW
39D0                    ;   CMP AX,DX
74@short_ok.            ;   JZ short_ok
B409                    ;   MOV AH,09
BA*error_msg.           ;   MOV DX,offset error_msg
CD21                    ;   INT 021
B409                    ;   MOV AH,09
BA*symbol_name.         ;   MOV DX,offset symbol_name   ; this will be the symbol that caused the error
CD21                    ;   INT 021
E9#fin.                 ;   JMP fin
.short_ok.              ; short_ok:
C3                      ;   RET

; Read a label from the file, look it up
; in the symbol table and return the address
; of the corresponding address slot in BX.
.readlabel.             ; readlabel:
31C9                    ;   XOR CX,CX
BF*symbol_name.         ;   MOV DI,offset symbol_name
.label_read_loop.       ; label_read_loop:
51                      ;   PUSH CX
57                      ;   PUSH DI
E8#read.                ;   CALL read
5F                      ;   POP DI
59                      ;   POP CX
3C"."                   ;   CMP AL,"."
74@endlabel.            ;   JZ endlabel
AA                      ;   STOSB
41                      ;   INC CX
83F921                  ;   CMP CX,021
7C@label_read_loop.     ;   JL label_read_loop
B0"$"                   ;   MOV AL,"$"        ; Terminate the overly long label
4F                      ;   DEC DI
AA                      ;   STOSB

BA*label_too_long.      ;   MOV DX,offset label_too_long
E9#label_error.         ;   JMP label_error
.endlabel.              ; endlabel:
B0"$"                   ;   MOV AL,"$"
AA                      ;   STOSB             ; "$" is a useful terminator as it means we can print the label name easily

BA*symtab.              ;   MOV DX,offset symtab
.searchlabel.           ; searchlabel:
89D3                    ;   MOV BX,DX
8B17                    ;   MOV DX,[BX]       ; This is the address of the next label (0 if there is no next label)
83FA00                  ;   CMP DX,0
74@labelnotfound.       ;   JE labelnotfound
83C302                  ;   ADD BX,2
BE*symbol_name.         ;   MOV SI,offset symbol_name
89DF                    ;   MOV DI,BX
.compareloop.           ; compareloop:
AC                      ;   LODSB
8A25                    ;   MOV AH,[DI]
47                      ;   INC DI
38E0                    ;   CMP AL,AH
75@searchlabel.         ;   JNE searchlabel
3C"$"                   ;   CMP AL,"$"
75@compareloop.         ;   JNE compareloop

803E*add_symbol_flag.00 ;   CMP B[add_symbol_flag],0
74@foundlabel.          ;   JE foundlabel
833E*phase.01           ;   CMP W[phase],1
74@foundlabel.          ;   JE foundlabel
BA*duplicate_label_msg. ;   MOV DX,offset duplicate_label_msg
E9#label_error.         ;   JMP label_error
.foundlabel.            ; foundlabel:
89FB                    ;   MOV BX,DI
C3                      ;   RET               ; Found! Return the corresponding address slot

.labelnotfound.         ; labelnotfound:
803E*add_symbol_flag.00 ;   CMP B[add_symbol_flag],0
74@dont_add_symbol.     ;   JE dont_add_symbol

89DF                    ;   MOV DI,BX
83C702                  ;   ADD DI,2
BE*symbol_name.         ;   MOV SI,offset symbol_name
.copyloop.              ; copyloop:
AC                      ;   LODSB
8805                    ;   MOV [DI],AL
47                      ;   INC DI
3C"$"                   ;   CMP AL,"$"
75@copyloop.            ;   JNE copyloop
AB                      ;   STOSW             ; Store a dummy value in the address slot
31C0                    ;   XOR AX,AX
AB                      ;   STOSW             ; Store a 0, indicating that there is no next label
83EF02                  ;   SUB DI,2
893F                    ;   MOV [BX],DI
83EF02                  ;   SUB DI,2
89FB                    ;   MOV BX,DI
C3                      ;   RET

.dont_add_symbol.       ; dont_add_symbol:
833E*phase.00           ;   CMP W[phase],0
74@done_readlabel.      ;   JE done_readlabel    ; Using rather than defining a label in the first phase - we don't care about the value
BA*label_not_found_msg. ;   MOV DX,offset label_not_found_msg
E9#label_error.         ;   JMP label_error
.done_readlabel.        ; done_readlabel:
C3                      ;   RET

.label_error.           ; label_error:
B409                    ;   MOV AH,09
CD21                    ;   INT 021
B409                    ;   MOV AH,09
BA*symbol_name.         ;   MOV DX,offset symbol_name
CD21                    ;   INT 021
E9#fin.                 ;   JMP fin

.readmnemonic.          ; readmnemonic:
31C9                    ;   XOR CX,CX
BF*symbol_name.         ;   MOV DI,offset symbol_name
.mnemonic_read_loop.    ; mnemonic_read_loop:
51                      ;   PUSH CX
57                      ;   PUSH DI
E8#read.                ;   CALL read
5F                      ;   POP DI
59                      ;   POP CX
3C"'"                   ;   CMP AL,"'"
74@endmnemonic.         ;   JZ endmnemonic
AA                      ;   STOSB
41                      ;   INC CX
83F90B                  ;   CMP CX,0b
7C@mnemonic_read_loop.  ;   JL mnemonic_read_loop
B0"$"                   ;   MOV AL,"$"        ; Terminate the overly long mnemonic
4F                      ;   DEC DI
AA                      ;   STOSB

.mnemonic_not_found.    ; mnemonic_not_found:
BA*unknown_mnemonic_msg.;   MOV DX,offset unknown_mnemonic_msg
E9#label_error.         ;   JMP label_error
.endmnemonic.           ; endmnemonic:
B0"$"                   ;   MOV AL,"$"
AA                      ;   STOSB             ; "$" is a useful terminator as it means we can print the label name easily

BB*mnemonic_table.      ;   MOV BX,offset mnemonic_table
.mnemonic_search_loop.  ; mnemonic_search_loop:
89DE                    ;   MOV SI,BX
83C30C                  ;   ADD BX,0C
803C00                  ;   CMP B[SI],0
74@mnemonic_not_found.  ;   JE mnemonic_not_found
BF*symbol_name.         ;   MOV DI,offset symbol_name
.mnemonic_compare_loop. ; mnemonic_compare_loop:
AC                      ;   LODSB
8A25                    ;   MOV AH,[DI]
47                      ;   INC DI
38E0                    ;   CMP AL,AH
75@mnemonic_search_loop.;   JNE mnemonic_seach_loop
3C"$"                   ;   CMP AL,"$"
75@mnemonic_compare_loop.;  JNE mnemonic_compare_loop
4B                      ;   DEC BX
8A17                    ;   MOV DL,[BX]
B90100                  ;   MOV CX,1
E8#write.               ;   CALL write
C3                      ;   RET

.mnemonic_table.
"ADD AL,$   "04
"ADD AX,$   "05
"PUSH ES$   "06
"POP ES$    "07
"OR AL,$    "0C
"OR AX,$    "0D
"PUSH CS$   "0E
"ADC AL,$   "14
"ADC AX,$   "15
"PUSH SS$   "16
"POP SS$    "17
"SBB AL,$   "1C
"SBB AX,$   "1D
"PUSH DS$   "1E
"POP DS$    "1F
"AND AL,$   "24
"AND AX,$   "25
"ES:$       "26
"DAA$       "27
"SUB AL,$   "2C
"SUB AX,$   "2D
"CS:$       "2E
"DAS$       "2F
"XOR AL,$   "34
"XOR AX,$   "35
"SS:$       "36
"AAA$       "37
"CMP AL,$   "3C
"CMP AX,$   "3D
"DS:$       "3E
"AAS$       "3F
"INC AX$    "40
"INC CX$    "41
"INC DX$    "42
"INC BX$    "43
"INC SP$    "44
"INC BP$    "45
"INC SI$    "46
"INC DI$    "47
"DEC AX$    "48
"DEC CX$    "49
"DEC DX$    "4A
"DEC BX$    "4B
"DEC SP$    "4C
"DEC BP$    "4D
"DEC SI$    "4E
"DEC DI$    "4F
"PUSH AX$   "50
"PUSH CX$   "51
"PUSH DX$   "52
"PUSH BX$   "53
"PUSH SP$   "54
"PUSH BP$   "55
"PUSH SI$   "56
"PUSH DI$   "57
"POP AX$    "58
"POP CX$    "59
"POP DX$    "5A
"POP BX$    "5B
"POP SP$    "5C
"POP BP$    "5D
"POP SI$    "5E
"POP DI$    "5F
"PUSHA$     "60
"POPA$      "61
"FS:$       "64
"GS:$       "65
"OSIZE$     "66
"ASIZE$     "67
"PUSHW$     "68
"PUSHB$     "6A
"INSB$      "6C
"INSW$      "6D
"OUTSB$     "6E
"OUTSW$     "6F
"JO$        "70
"JNO$       "71
"JC$        "72
"JB$        "72
"JNAE$      "72
"JNC$       "73
"JAE$       "73
"JNB$       "73
"JE$        "74
"JZ$        "74
"JNE$       "75
"JNZ$       "75
"JBE$       "76
"JNA$       "76
"JA$        "77
"JNBE$      "77
"JS$        "78
"JNS$       "79
"JP$        "7A
"JNP$       "7B
"JL$        "7C
"JNGE$      "7C
"JGE$       "7D
"JNL$       "7D
"JLE$       "7E
"JNG$       "7E
"JG$        "7F
"JNLE$      "7F
"NOP$       "90
"XCHG AX,CX$"91
"XCHG AX,DX$"92
"XCHG AX,BX$"93
"XCHG AX,SP$"94
"XCHG AX,BP$"95
"XCHG AX,SI$"96
"XCHG AX,DI$"97
"CBW$       "98
"CWD$       "99
"CALL FAR$  "9A
"WAIT$      "9B
"PUSHF$     "9C
"POPF$      "9D
"SAHF$      "9E
"LAHF$      "9F
"MOV AL,[]$ "A0
"MOV AX,[]$ "A1
"MOV [],AL$ "A2
"MOV [],AX$ "A3
"MOVSB$     "A4
"MOVSW$     "A5
"CMPSB$     "A6
"CMPSW$     "A7
"TEST AL,$  "A8
"TEST AX,$  "A9
"STOSB$     "AA
"STOSW$     "AB
"LODSB$     "AC
"LODSW$     "AD
"SCASB$     "AE
"SCASW$     "AF
"MOV AL,$   "B0
"MOV CL,$   "B1
"MOV DL,$   "B2
"MOV BL,$   "B3
"MOV AH,$   "B4
"MOV CH,$   "B5
"MOV DH,$   "B6
"MOV BH,$   "B7
"MOV AX,$   "B8
"MOV CX,$   "B9
"MOV DX,$   "BA
"MOV BX,$   "BB
"MOV SP,$   "BC
"MOV BP,$   "BD
"MOV SI,$   "BE
"MOV DI,$   "BF
"RETN$      "C2
"RET$       "C3
"ENTER$     "C8
"LEAVE$     "C9
"RETFN$     "CA
"RETF$      "CB
"INT3$      "CC
"INT$       "CD
"INTO$      "CE
"IRET$      "CF
"AAM$       "D4
"AAD$       "D5
"SALC$      "D6
"XLATB$     "D7
"LOOPNE$    "E0
"LOOPE$     "E1
"LOOP$      "E2
"JCXZ$      "E3
"IN AL,$    "E4
"IN AX,$    "E5
"OUT AL,$   "E6
"OUT AX,$   "E7
"CALL$      "E8
"JMPN$      "E9
"JMPI$      "EA
"JMPS$      "EB
"IN AL,DX$  "EC
"IN AX,DX$  "ED
"OUT DX,AL$ "EE
"OUT DX,AX$ "EF
"LOCK$      "F0
"INT01$     "F1
"REPNE$     "F2
"REP$       "F3
"HLT$       "F4
"CMC$       "F5
"CLC$       "F8
"STC$       "F9
"CLI$       "FA
"STI$       "FB
"CLD$       "FC
"STD$       "FD
00

.readhandle.        0000
.writehandle.       0000
.phase.             0000
.ip.                0000
.highnybblef.       0000
.highnybble.        0000
.databuffer.        0000
.add_symbol_flag.   0000

.symbol_name.
   00 00 00 00 00 00 00 00
   00 00 00 00 00 00 00 00
   00 00 00 00 00 00 00 00
   00 00 00 00 00 00 00 00
   00  ; One more for the terminator

.error_msg.
"Too far to label $"

.label_too_long.
"Label too long: $"

.label_not_found_msg.
"Label not found: $"

.duplicate_label_msg.
"Duplicate label: $"

.unknown_mnemonic_msg.
"Unknown mnemonic: $"

.symtab.
00 00


; Symbol table format:
;   2 bytes: address of next (unused) symbol (=0 if no symbol) or here+n+2
;   n bytes: name ($-terminated)
;   2 bytes: address

