; This is the bootstrapping compiler step 13 (written in step 12 language)
; This adds the ability to compile multiple source files into a single binary.

; Entry point.
;   Set up the stack
;   Set up the segments
;   Set up the heap
;   Parse the command line
;   Open the files
;   Call main
;   Exit

  CLI
  PUSH CS
  POP SS
  MOV SP,0fffe
  STI

  PUSH CS
  POP DS
  PUSH CS
  POP ES

  MOV AX,static_end
  MOV [heaptop],AX

  MOV SI,082
  CLD

  XOR BL,BL
  find_binary_name_loop:
  MOV DI,SI
  find_name_loop:
  LODSB
  CMP AL,0D
  JE got_binary_name
  CMP AL," "
  JNE find_name_loop
  MOV [SI-1],BL        ; Store a null to terminate the name
  JMP find_binary_name_loop

  got_binary_name:
  MOV [SI-1],BL
  MOV [writename],DI

  main()

  exit:
  MOV AH,04C
  INT 021                        ; exit

readhandle:  DW 0
writehandle: DW 0
writename:   DW 0
next_input_file: DW 0


; Allocate (arg) bytes from heap and return pointer in AX
; Allocating memory is pretty easy if you don't want to free it and reuse the memory.

heaptop: DW 0

alloc:
  PUSH BP
  MOV BP,SP
  MOV CX,[BP+4]
  MOV AX,[heaptop]
  ADD [heaptop],CX
  POP BP
  RET



; Print the ($-terminated) message pointed to by (arg)
printmsg:
  PUSH BP
  MOV BP,SP
  MOV DX,[BP+4]
  MOV AH,9
  INT 021
  POP BP
  RET



; Print the unsigned decimal number (arg)
printnum:
  PUSH BP
  MOV BP,SP
  MOV AX,[BP+4]
  CMP AX,10000
  JB printnum_1000
  MOV BX,10000
  XOR DX,DX
  DIV BX
  PUSH DX
  ADD AL,"0"
  MOV DL,AL
  MOV AH,2
  INT 021
  POP AX
  JMP printnum_01000
  printnum_1000:
  CMP AX,1000
  JB printnum_100
  printnum_01000:
  MOV BX,1000
  XOR DX,DX
  DIV BX
  PUSH DX
  ADD AL,"0"
  MOV DL,AL
  MOV AH,2
  INT 021
  POP AX
  JMP printnum_0100
  printnum_100:
  CMP AX,100
  JB printnum_10
  printnum_0100:
  MOV BX,100
  XOR DX,DX
  DIV BX
  PUSH DX
  ADD AL,"0"
  MOV DL,AL
  MOV AH,2
  INT 021
  POP AX
  JMP printnum_010
  printnum_10:
  CMP AX,10
  JB printnum_1
  printnum_010:
  MOV BX,10
  XOR DX,DX
  DIV BX
  PUSH DX
  ADD AL,"0"
  MOV DL,AL
  MOV AH,2
  INT 021
  POP AX
  printnum_1:
  ADD AL,"0"
  MOV DL,AL
  MOV AH,2
  INT 021
  POP BP
  RET



; Print the ($-terminated) message pointed to by (arg) and the current line number, then exit.
error_exit:
  PUSH BP
  MOV BP,SP
  printmsg([BP+4])
  printnum([lineno])
  exit()



; Print the ($-terminated) message pointed to by (arg) and the label. Then tell the user the line number and exit.

line_number_msg:
DB 0D DB 0A DB "Line: $"

label_error:
  PUSH BP
  MOV BP,SP
  printmsg([BP+4])
  printmsg(identifier)
  error_exit(line_number_msg)



; Print a generic Syntax Error message with the line number and exit.
syntax_error:
  error_exit("Syntax error on line: $")



; Open first input file

lineno: DW 0
ip:     DW 0

rewind:
  MOV W[ip],0100
  MOV W[lineno],0

  ; Close current input file

  MOV AH,03e
  MOV BX,[readhandle]
  INT 021

  ; Open first input file

  MOV DX,082
  MOV AX,03D00
  INT 021
  JNC rewind_open_success
  JMP exit
  rewind_open_success:
  MOV [readhandle],AX

  ; Find next input file

  MOV SI,082
  find_next_name_loop:
  LODSB
  CMP AL,0
  JNE find_next_name_loop
  MOV [next_input_file],SI

  readline()
  RET


; Write (arg 2) bytes from (arg 1)
; Increment IP counter by (arg 2)

write_buffer: DW 0

write:
  PUSH BP
  MOV BP,SP
  MOV CX,[BP+4]
  MOV DX,[BP+6]
  MOV [write_buffer],DX
  ADD [ip],CX
  MOV AH,040
  MOV BX,[writehandle]
  MOV DX,write_buffer
  INT 021
  POP BP
  RET



; Read 1 byte from file, return in AL. On EOF return CF=1.

read_byte_buffer: DB 00

read_byte:
  MOV AH,03F
  MOV BX,[readhandle]
  MOV CX,1
  MOV DX,read_byte_buffer
  INT 021
  TEST AX,AX
  JNZ read_byte_ok

  ; Close file
  MOV AH,03e
  MOV BX,[readhandle]
  INT 021

  ; Is this the last file?
  MOV DX,[next_input_file]
  CMP DX,[writename]
  JE read_byte_end_of_last_file

  ; Open next file

  MOV AX,03D00
  INT 021
  JNC read_byte_open_success
  JMP exit
  read_byte_open_success:
  MOV [readhandle],AX

  ; Update next filename

  MOV SI,[next_input_file]
  read_byte_find_next_file_loop:
  LODSB
  CMP AL,0
  JNE read_byte_find_next_file_loop
  MOV [next_input_file],SI

  ; Return an end-of-line so we don't get a single line split across 2 files

  MOV AL,0d
  CLC
  RET

  read_byte_end_of_last_file:
  STC
  RET

  read_byte_ok:
  MOV AL,[read_byte_buffer]
  CLC

  read_byte_done:
  RET



; Read 1 byte from file, return in AL. On EOF return CF=1.
;   On CR, LF, CR+LF or LF+CR, return LF
;   On HT or FF return SP
;   On other control characters, or characters >126, error

last_byte_read: DB 0

read_ascii:
  read_byte()
  JC read_ascii_done

  CMP AL,0D
  JNE read_ascii_not_cr
  CMP B[last_byte_read],0a
  JNE read_ascii_done_crlf
  MOV B[last_byte_read],0
  JMP read_ascii             ;   second byte of CR+LF - try again.

  read_ascii_not_cr:
  CMP AL,0A
  JNE read_ascii_not_lf
  CMP B[last_byte_read],0d
  JNE read_ascii_done_crlf
  MOV B[last_byte_read],0
  JMP read_ascii             ;   second byte of LF+CR - try again.

  read_ascii_done_crlf:
  MOV [last_byte_read],AL
  MOV AL,0A
  INC W[lineno]
  CLC
  JMP read_ascii_done

  read_ascii_not_lf:
  CMP AL,9
  JNE read_ascii_not_ht
  MOV AL,020
  CLC
  JMP read_ascii_done

  read_ascii_not_ht:
  CMP AL,0C
  JNE read_ascii_not_ff
  MOV AL,020
  CLC
  JMP read_ascii_done

  read_ascii_not_ff:
  CMP AL,020
  JAE read_ascii_not_control
  read_ascii_bad_character:
  error_exit("Bad character on line: $")

  read_ascii_not_control:
  CMP AL,07E
  JA read_ascii_bad_character
  CLC
  read_ascii_done:
  RET



; Read a line from the source, return null-terminated in line_buffer.
; Returns CF=1 on EOF

readline:
  XOR CX,CX
  MOV DI,[line_buffer]
  readline_loop:
  PUSH CX
  PUSH DI
  read_ascii()
  POP DI
  POP CX
  JC readline_eof
  CMP AL,0a
  JE readline_end
  STOSB
  INC CX
  CMP CX,[max_line_length]
  JNE readline_loop
  printmsg("Line too long: $")
  printnum([lineno])
  exit()

  readline_eof:
  JCXZ readline_done
  CLC                   ; Clear CF so we dont return EOF on the last line

  readline_end:
  MOV AL,0
  STOSB
  readline_done:

  MOV SI,[line_buffer]
  RET



; Returns upper case version of (arg) if it's a lower-case letter.
upper_case:
  PUSH BP
  MOV BP,SP
  MOV AL,[BP+4]
  CMP AL,"a"
  JL upper_case_end
  CMP AL,"z"
  JG upper_case_end
  SUB AL,020
  upper_case_end:
  POP BP
  RET



; Returns CF=1 if (arg) is a digit.
is_digit:
  PUSH BP
  MOV BP,SP
  MOV AL,[BP+4]
  CMP AL,"0"
  JL is_digit_no
  CMP AL,"9"
  JG is_digit_no
  STC
  POP BP
  RET
  is_digit_no:
  CLC
  POP BP
  RET



; Returns CF=1 if (arg) is A-Z, a-z or _ (i.e. can start an identifier).
is_alphabetic:
  PUSH BP
  MOV BP,SP
  PUSH AX
  upper_case([BP+4])
  CMP AL,"A"
  JL is_alphabetic_no
  CMP AL,"_"
  JE is_alphabetic_yes
  CMP AL,"Z"
  JG is_alphabetic_no
  is_alphabetic_yes:
  POP AX
  STC
  POP BP
  RET
  is_alphabetic_no:
  POP AX
  CLC
  POP BP
  RET



; Returns CF=1 is (arg) is alphanumeric (i.e. can be a second or subsequent character of an identifier).
is_alphanumeric:
  PUSH BP
  MOV BP,SP
  is_digit([BP+4])
  JC is_alphanumeric_done
  is_alphabetic([BP+4])
  is_alphanumeric_done:
  POP BP
  RET



; Parse hexadecimal digit, return value in AL. Return CF=1 on fail.
lex_hexdigit:
  LODSB
  is_digit(upper_case(AX))
  JC lex_hexdigit_number
  CMP AL,"A"
  JL lex_hexdigit_fail
  CMP AL,"F"
  JG lex_hexdigit_fail
  SUB AL,7
  lex_hexdigit_number:
  SUB AL,"0"
  CLC
  JMP lex_hexdigit_done
  lex_hexdigit_fail:
  DEC SI
  STC
  lex_hexdigit_done:
  RET



; Parse hexadecimal number, return value in AX.
lex_hexnumber:
  MOV DX,0
  lex_hexnumber_loop:
  lex_hexdigit()
  JC lex_hexnumber_done
  MOV CL,4
  SHL DX,CL
  OR DL,AL
  JMP lex_hexnumber_loop
  lex_hexnumber_done:
  CLC
  RET



; Parse decimal digit, return value in AL. Return CF=1 on fail.
lex_decdigit:
  LODSB
  is_digit(AX)
  JNC lex_decdigit_fail
  SUB AL,"0"
  CLC
  JMP lex_decdigit_done
  lex_decdigit_fail:
  DEC SI
  STC
  lex_decdigit_done:
  RET



; Parse decimal number, return value in AX.
lex_decnumber:
  MOV DX,0
  lex_decnumber_loop:
  lex_decdigit()
  JC lex_decnumber_done
  PUSH AX
  MOV AX,10
  MUL DX
  MOV DX,AX
  POP AX
  MOV AH,0
  ADD DX,AX
  JMP lex_decnumber_loop
  lex_decnumber_done:
  CLC
  RET



; Parse identifier. Return in "identifier".

identifier:
DB 00 DB 00 DB 00 DB 00 DB 00 DB 00 DB 00 DB 00
DB 00 DB 00 DB 00 DB 00 DB 00 DB 00 DB 00 DB 00
DB 00 DB 00 DB 00 DB 00 DB 00 DB 00 DB 00 DB 00
DB 00 DB 00 DB 00 DB 00 DB 00 DB 00 DB 00 DB 00
DB 00  ; One more for the terminator

lex_identifier:
  XOR CX,CX
  MOV DI,identifier
  lex_identifier_loop:
  LODSB
  PUSH CX
  is_alphanumeric(AX)
  POP CX
  JNC lex_identifier_end
  STOSB
  INC CX
  CMP CX,021
  JL lex_identifier_loop
  MOV AL,"$"                   ; Terminate the overly long label
  DEC DI
  STOSB

  label_error("Label too long: $")

  lex_identifier_end:
  MOV AL,"$"
  STOSB                        ; "$" is a useful terminator as it means we can print the label name easily
  DEC SI
  RET



; Returns CF=1 (and reg number in DX) if identifier is a register.

reg_table:
  DB "AX" DB "CX" DB "DX" DB "BX" DB "SP" DB "BP" DB "SI" DB "DI"
  DB "AL" DB "CL" DB "DL" DB "BL" DB "AH" DB "CH" DB "DH" DB "BH"
  DB "ES" DB "CS" DB "SS" DB "DS"

is_identifier_register:
  PUSH SI
  MOV SI,identifier
  LODSW
  PUSH AX
  LODSB
  CMP AL,"$"
  POP AX
  JNE is_identifier_register_no
  upper_case(AX)
  XCHG AL,AH
  upper_case(AX)
  XCHG AL,AH
  MOV DX,AX
  MOV CX,014
  MOV SI,reg_table
  is_identifier_register_loop:
  LODSW
  CMP AX,DX
  JE is_identifier_register_yes
  LOOP is_identifier_register_loop
  is_identifier_register_no:
  CLC
  POP SI
  RET
  is_identifier_register_yes:
  MOV DX,014
  SUB DX,CX
  STC
  POP SI
  RET



; Returns CF=1 (and mnemonic number in DX) if identifier is a mnemonic.

mnemonic_table:
DB "ADC$ADD$AND$CALL$CBW$CLC$CLD$CLI$CMC$CMP$"              ;  0
DB "CMPSB$CMPSW$CWD$DB$DEC$DIV$DW$IDIV$IMUL$INC$"           ; 10
DB "INT$JA$JAE$JB$JBE$JC$JCXZ$JE$JG$JGE$"                   ; 20
DB "JL$JLE$JMP$JNA$JNAE$JNB$JNBE$JNC$JNE$JNG$"              ; 30
DB "JNGE$JNL$JNLE$JNO$JNP$JNS$JNZ$JO$JP$JS$"                ; 40
DB "JZ$LAHF$LODSB$LODSW$LOOP$LOOPE$LOOPNE$MOV$MOVSB$MOVSW$" ; 50
DB "MUL$NEG$NOP$NOT$OR$POP$POPF$PUSH$PUSHF$RCL$"            ; 60
DB "RCR$REP$REPNE$RET$RETF$ROL$ROR$SAHF$SALC$SAR$"          ; 70
DB "SBB$SCASB$SCASW$SHL$SHR$STC$STD$STI$STOSB$STOSW$"       ; 80
DB "SUB$TEST$XCHG$XLATB$XOR$"                               ; 90
DB 00

is_identifier_mnemonic:
  PUSH SI
  MOV SI,mnemonic_table
  MOV DX,0
  is_identifier_mnemonic_loop:
  MOV DI,identifier
  is_identifier_mnemonic_compare:
  LODSB
  MOV AH,[DI]
  INC DI
  XCHG AL,AH
  upper_case(AX)
  CMP AL,AH
  JNE is_identifier_mnemonic_cmpfail
  CMP AL,"$"
  JNE is_identifier_mnemonic_compare
  POP SI
  STC
  RET
  is_identifier_mnemonic_cmpfail:
  INC DX
  DEC SI
  LODSB
  is_identifier_mnemonic_findnext:
  CMP AL,"$"
  JE is_identifier_mnemonic_loop
  CMP AL,0
  JE is_identifier_mnemonic_end
  LODSB
  JMP is_identifier_mnemonic_findnext
  is_identifier_mnemonic_end:
  POP SI
  CLC
  RET



; Returns CF=1 (and "B" or "W" in AL) if identifier is "B" or "W"
is_identifier_size:
  PUSH SI
  MOV SI,identifier
  LODSB
  MOV AH,AL
  LODSB
  CMP AL,"$"
  JE is_identifier_size_onechar
  is_identifier_size_no:
  CLC
  POP SI
  RET
  is_identifier_size_onechar:
  XCHG AL,AH
  upper_case(AX)
  CMP AL,"B"
  JE is_identifier_size_yes
  CMP AL,"W"
  JNE is_identifier_size_no
  is_identifier_size_yes:
  STC
  POP SI
  RET



; Gets the next token from the input. Return CF=1 on EOF.
; Ignores
;   Return token in AL:
;     + = "+"
;     - = "-"
;     [ = "["
;     ] = "]"
;     , = ","
;     : = ":"
;     ( = "("
;     ) = ")"
;     S = "B" or "W" (size operand, AH = "B" or "W")
;     " = string (DI = start of string, SI = end of string + 2)
;     0 = number (DX = number)
;     R = register (DX = register number)
;     M = mnemonic (DX = mnemonic number)
;     I = identifier (returned in identifier)
;   NUL = EOF

get_next_token:
  LODSB
  CMP AL,0
  JNE get_next_token_not_eol
  get_next_token_skip_rest_of_line:
  readline()
  JNC get_next_token
  MOV AL,0
  STC
  JMP get_next_token_end2
  get_next_token_end:
  CLC
  get_next_token_end2:
  RET
  get_next_token_not_eol:
  CMP AL," "
  JE get_next_token
  CMP AL,";"
  JE get_next_token_skip_rest_of_line
  CMP AL,"+"
  JE get_next_token_end
  CMP AL,"-"
  JE get_next_token_end
  CMP AL,"["
  JE get_next_token_end
  CMP AL,"]"
  JE get_next_token_end
  CMP AL,","
  JE get_next_token_end
  CMP AL,":"
  JE get_next_token_end
  CMP AL,"("
  JE get_next_token_end
  CMP AL,")"
  JE get_next_token_end
  CMP AL,022
  JNE get_next_token_not_string

  ; Token is a string

  MOV DI,SI
  get_next_token_scan_string:
  LODSB
  CMP AL,022
  JE get_next_token_end
  CMP AL,0
  JNE get_next_token_scan_string
  error_exit("Unterminated string on line: $")

  get_next_token_not_string:
  CMP AL,"0"
  JNE get_next_token_not_hex

  ; Token is a hex number

  lex_hexnumber()
  MOV AL,"0"
  CLC
  RET

  get_next_token_not_hex:
  is_digit(AX)
  JNC get_next_token_not_number

  ; Token is a decimal number

  DEC SI
  lex_decnumber()
  MOV AL,"0"
  CLC
  RET

  get_next_token_not_number:
  CMP AL,"'"
  JNE get_next_token_not_literal
  LODSB
  CMP AL,0
  JE get_next_token_syntax_error
  MOV DL,AL
  XOR DH,DH
  LODSB
  CMP AL,"'"
  JE get_next_token_char_literal
  get_next_token_syntax_error:
  syntax_error()
  get_next_token_char_literal:
  MOV AL,"0"
  CLC
  RET

  get_next_token_not_literal:
  is_alphabetic(AX)
  JC get_next_token_identifier

  error_exit("Unexpected character on line: $")

  get_next_token_identifier:

  ; Token is an identifier (label, register or mnemonic)

  DEC SI
  lex_identifier()
  is_identifier_register()
  JNC get_next_token_not_register

  MOV AL,"R"
  CLC
  RET

  get_next_token_not_register:
  is_identifier_mnemonic()
  JNC get_next_token_not_mnemonic

  MOV AL,"M"
  CLC
  RET

  get_next_token_not_mnemonic:
  is_identifier_size()
  XCHG AL,AH
  JNC get_next_token_not_size
  MOV AL,"S"
  CLC
  RET

  get_next_token_not_size:
  MOV AL,"I"
  CLC
  RET



; Look up "identifier" in the symbol table and return the address
; of the corresponding address slot in BX.

add_symbol_flag: DB 0

symbol_table: DW 0

search_symbol_table:
  PUSH BP
  MOV BP,SP
  MOV AL,[BP+4]
  MOV [add_symbol_flag],AL
  PUSH SI
  MOV DX,symbol_table
  search_symbol_table_loop:
  MOV BX,DX
  MOV DX,[BX]       ; This is the address of the next label (0 if there is no next label)
  CMP DX,0
  JE search_symbol_table_notfound

  MOV BX,DX
  ADD BX,2

  MOV SI,identifier
  MOV DI,BX
  search_symbol_table_compare:
  LODSB
  MOV AH,[DI]
  INC DI
  CMP AL,AH
  JNE search_symbol_table_loop
  CMP AL,"$"
  JNE search_symbol_table_compare

  CMP B[add_symbol_flag],0
  JE foundlabel
  CMP B[first_phase],0
  JE foundlabel
  label_error("Duplicate label: $")
  foundlabel:
  MOV BX,DI
  POP SI
  POP BP
  RET                          ; Found! Return the corresponding address slot

  search_symbol_table_notfound:
  CMP B[add_symbol_flag],0
  JE search_symbol_table_dontadd

  PUSH BX
  MOV SI,identifier
  MOV CX,0
  search_symbol_table_count:
  LODSB
  INC CX
  CMP AL,"$"
  JNE search_symbol_table_count
  ADD CX,4
  alloc(CX)
  POP BX
  MOV [BX],AX
  MOV DI,AX
  MOV AX,0                ; Store a 0, indicating that there is no next label
  STOSW

  MOV SI,identifier
  search_symbol_table_copy:
  LODSB
  MOV [DI],AL
  INC DI
  CMP AL,"$"
  JNE search_symbol_table_copy
  MOV BX,DI
  POP SI
  POP BP
  RET

  search_symbol_table_dontadd:
  CMP B[first_phase],0
  JNE search_symbol_table_done           ; Using rather than defining a label in the first phase - we dont care about the value
  label_error("Label not found: $")

  search_symbol_table_done:
  POP SI
  POP BP
  RET



; Emit the byte in (arg)
asm_byte:
  PUSH BP
  MOV BP,SP
  write([BP+4],1)
  POP BP
  RET



; Emit the word in (arg)
asm_word:
  PUSH BP
  MOV BP,SP
  write([BP+4],2)
  POP BP
  RET



; Assemble instructions that are one byte and have no arguments

asm_nop:   asm_byte(090) RET
asm_cbw:   asm_byte(098) RET
asm_cwd:   asm_byte(099) RET
asm_pushf: asm_byte(09c) RET
asm_popf:  asm_byte(09d) RET
asm_sahf:  asm_byte(09e) RET
asm_lahf:  asm_byte(09f) RET
asm_movsb: asm_byte(0a4) RET
asm_movsw: asm_byte(0a5) RET
asm_cmpsb: asm_byte(0a6) RET
asm_cmpsw: asm_byte(0a7) RET
asm_stosb: asm_byte(0aa) RET
asm_stosw: asm_byte(0ab) RET
asm_lodsb: asm_byte(0ac) RET
asm_lodsw: asm_byte(0ad) RET
asm_scasb: asm_byte(0ae) RET
asm_scasw: asm_byte(0af) RET
asm_ret:   asm_byte(0c3) RET
asm_retf:  asm_byte(0cb) RET
asm_salc:  asm_byte(0d6) RET
asm_xlatb: asm_byte(0d7) RET
asm_repne: asm_byte(0f2) RET
asm_rep:   asm_byte(0f3) RET
asm_cmc:   asm_byte(0f5) RET
asm_clc:   asm_byte(0f8) RET
asm_stc:   asm_byte(0f9) RET
asm_cli:   asm_byte(0fa) RET
asm_sti:   asm_byte(0fb) RET
asm_cld:   asm_byte(0fc) RET
asm_std:   asm_byte(0fd) RET



; Check to see if DX fits in a signed 8-bit integer
; If not, prints an error message and exits.

check_short:
  CMP B[first_phase],0
  JNE check_short_ok
  MOV AX,DX
  CBW
  CMP AX,DX
  JZ check_short_ok
  label_error("Too far to label: $")
  check_short_ok:
  RET



; Assemble a conditional jump instruction

;   70+cond cb     Jcond cb

asm_jcond:
  PUSH BP
  MOV BP,SP
  get_next_token()
  CMP AL,"I"
  JE asm_jcond_ok
  error_exit("Label required at line: $")

  asm_jcond_ok:
  search_symbol_table(0)

  MOV DX,[BX]
  SUB DX,[ip]
  DEC DX
  DEC DX

  CMP B[first_phase],0
  JNE asm_jcond_short

  MOV AX,DX
  CBW
  CMP AX,DX
  JE asm_jcond_short

  ; Assemble the long version of a conditional jump instruction

  PUSH DX
  MOV AL,[BP+4]
  XOR AL,1
  asm_byte(AX)
  asm_byte(3)
  asm_byte(0e9)
  POP DX
  DEC DX
  DEC DX
  DEC DX
  asm_word(DX)
  POP BP
  RET

  asm_jcond_short:
  PUSH DX
  asm_byte([BP+4])
  POP DX
  asm_byte(DX)
  POP BP
  RET

asm_jo:     asm_jcond(070) RET
asm_jno:    asm_jcond(071) RET
asm_jc:
asm_jnae:
asm_jb:     asm_jcond(072) RET
asm_jnc:
asm_jnb:
asm_jae:    asm_jcond(073) RET
asm_je:
asm_jz:     asm_jcond(074) RET
asm_jne:
asm_jnz:    asm_jcond(075) RET
asm_jna:
asm_jbe:    asm_jcond(076) RET
asm_jnbe:
asm_ja:     asm_jcond(077) RET
asm_js:     asm_jcond(078) RET
asm_jns:    asm_jcond(079) RET
asm_jp:     asm_jcond(07a) RET
asm_jnp:    asm_jcond(07b) RET
asm_jnge:
asm_jl:     asm_jcond(07c) RET
asm_jnl:
asm_jge:    asm_jcond(07d) RET
asm_jng:
asm_jle:    asm_jcond(07e) RET
asm_jnle:
asm_jg:     asm_jcond(07f) RET



; Assemble a loop instruction

;   E0 cb          LOOPNE cb
;   E1 cb          LOOPE cb
;   E2 cb          LOOP cb
;   E3 cb          JeCXZ cb

asm_loopx:
  PUSH BP
  MOV BP,SP
  asm_byte([BP+4])
  get_next_token()
  CMP AL,"I"
  JE asm_loopx_ok
  error_exit("Label required at line: $")

  asm_loopx_ok:
  search_symbol_table(0)

  MOV DX,[BX]
  SUB DX,[ip]
  DEC DX
  check_short()
  asm_byte(DX)
  POP BP
  RET

asm_loopne: asm_loopx(0e0) RET
asm_loope:  asm_loopx(0e1) RET
asm_loop:   asm_loopx(0e2) RET
asm_jcxz:   asm_loopx(0e3) RET



; Assemble an effective address (mod r/m byte)

ea_reg:         DB 0
ea_rm_reg:      DB 0
ea_memf:        DB 0
ea_bx:          DB 0
ea_bp:          DB 0
ea_si:          DB 0
ea_di:          DB 0
ea_offset:      DW 0
segreg_f:       DB 0
op_size:        DB 0
offset_unknown: DB 0

modrm_table:
;        DI    SI           BP   BP+DI BP+SI         BX   BX+DI BX+SI
DB 006 DB 005 DB 004 DB 0ff  DB 046 DB 003 DB 002 DB 0ff  DB 007 DB 001 DB 000 DB 0ff  DB 0ff DB 0ff DB 0ff DB 0ff
DB 006 DB 045 DB 044 DB 0ff  DB 046 DB 043 DB 042 DB 0ff  DB 047 DB 041 DB 040 DB 0ff  DB 0ff DB 0ff DB 0ff DB 0ff
DB 006 DB 085 DB 084 DB 0ff  DB 086 DB 083 DB 082 DB 0ff  DB 087 DB 081 DB 080 DB 0ff  DB 0ff DB 0ff DB 0ff DB 0ff

asm_ea:
  PUSH BP
  MOV BP,SP
  MOV AL,B[BP+4]
  MOV [ea_reg],AL
  CMP B[ea_memf],0
  JNE asm_ea_indirect
  MOV DL,0c0
  OR DL,[ea_rm_reg]
  JMP asm_ea_emit

  asm_ea_indirect:

  MOV DL,0

  CMP B[offset_unknown],0
  JNE asm_ea_gotoffsettype

  MOV AX,[ea_offset]
  CMP AX,0
  JE asm_ea_gotoffsettype
  MOV BX,AX
  CBW
  CMP AX,BX
  JNE asm_ea_2byteoffset
  MOV DL,1
  JMP asm_ea_gotoffsettype
  asm_ea_2byteoffset:
  MOV DL,2
  asm_ea_gotoffsettype:

  SHL DL,1
  OR DL,[ea_bx]
  SHL DL,1
  OR DL,[ea_bp]
  SHL DL,1
  OR DL,[ea_si]
  SHL DL,1
  OR DL,[ea_di]
  MOV BL,DL
  XOR BH,BH
  ADD BX,modrm_table
  MOV DL,[BX]
  CMP DL,0ff
  JNE asm_ea_emit

  syntax_error()

  asm_ea_emit:
  PUSH DX
  MOV AL,[ea_reg]
  MOV CL,3
  SHL AL,CL
  OR DL,AL
  asm_byte(DX)          ; write the mod r/m byte
  POP AX

  CMP AL,6
  JNE asm_ea_not_mod2

  asm_ea_mod2:
  asm_word([ea_offset]) ;   write two-byte offset
  JMP asm_ea_done

  asm_ea_not_mod2:
  AND AL,0c0
  CMP AL,040
  JNE asm_ea_not_mod1
  asm_byte([ea_offset]) ;   write one-byte offset
  JMP asm_ea_done

  asm_ea_not_mod1:
  CMP AL,080
  JE asm_ea_mod2

  asm_ea_done:
  POP BP
  RET



; Parse register described by DX into the EA structure.
parse_register:
  MOV B[segreg_f],0

  MOV AX,DX
  AND AL,7
  MOV [ea_rm_reg],AL

  MOV AX,DX
  CMP AX,010
  JLE parse_register_not_segreg
  MOV B[segreg_f],1
  MOV B[op_size],2
  RET

  parse_register_not_segreg:
  CMP AX,8
  JL parse_register_word
  MOV AL,1
  JMP parse_register_gotsize
  parse_register_word:
  MOV AL,2
  parse_register_gotsize:
  MOV [op_size],AL
  RET



; Parse a register or memory operand, e.g. BX, [BX] or B[BX]
; Return in the EA structure for assembly.

parse_regmem:
  CMP AL,"R"
  JNE parse_memory
  MOV B[ea_memf],0
  parse_register()
  CMP B[segreg_f],1
  JNE parse_regmem_not_segreg
  error_exit("General purpose register or memory operand expected on line: $")
  parse_regmem_not_segreg:
  RET

; Parse a memory operand, e.g. [BX] or B[BX]
; Return CF=1 on failure.

negative_f: DB 0

 parse_memory:
  MOV B[op_size],0

  CMP AL,"S"
  JNE parse_memory_notsize
  CMP AH,"W"
  JNE parse_memory_byte
  MOV AL,2
  JMP parse_memory_gotsize
  parse_memory_byte:
  MOV AL,1
  parse_memory_gotsize:
  MOV [op_size],AL
  get_next_token()

  parse_memory_notsize:
  CMP AL,"["
  JNE parse_memory_syntax_error

  ; Initialize the EA structure.
  MOV AX,0
  MOV [ea_offset],AX
  MOV [negative_f],AL
  MOV [ea_bx],AL
  MOV [ea_bp],AL
  MOV [ea_si],AL
  MOV [ea_di],AL
  MOV [offset_unknown],AL
  INC AX
  MOV [ea_memf],AL

  ; Mini state-machine for memory offset parsing

  parse_memory_state1:

  ; State 1 - +/- or reg/num are valid (after [)

  get_next_token()
  CMP AL,"+"
  JE parse_memory_state2
  CMP AL,"-"
  JNE parse_memory_state2
  MOV AL,1
  MOV [negative_f],AL

  parse_memory_state2:

  ; State 2 - reg/num are valid (after +/-)

  CMP AL,"R"
  JNE parse_memory_notreg

  MOV AX,DX
  CMP B[negative_f],1
  JE parse_memory_syntax_error ; Cant subtract a register

  CMP AL,3                ; is register BX?
  JNE parse_memory_notbx
  CMP B[ea_bx],1
  JNE parse_memory_bx_ok
  parse_memory_syntax_error:
  syntax_error()
  parse_memory_bx_ok:
  MOV B[ea_bx],1
  JMP parse_memory_state3
  parse_memory_notbx:

  CMP AL,5                ; is register BP?
  JNE parse_memory_notbp
  CMP B[ea_bp],1
  JE parse_memory_syntax_error
  MOV B[ea_bp],1
  JMP parse_memory_state3
  parse_memory_notbp:

  CMP AL,6                ; is register SI?
  JNE parse_memory_notsi
  CMP B[ea_si],1
  JE parse_memory_syntax_error
  MOV B[ea_si],1
  JMP parse_memory_state3
  parse_memory_notsi:

  CMP AL,7                ; is register DI?
  JNE parse_memory_syntax_error  ; if not, its not a valid indirection register.
  CMP B[ea_di],1
  JE parse_memory_syntax_error
  MOV B[ea_di],1
  JMP parse_memory_state3

  parse_memory_notreg:
  CMP AL,"0"
  JNE parse_memory_notnum
  CMP B[negative_f],1
  JE parse_memory_suboff
  ADD [ea_offset],DX
  JMP parse_memory_state3
  parse_memory_suboff:
  MOV B[negative_f],0
  SUB [ea_offset],DX
  JMP parse_memory_state3

  parse_memory_notnum:
  CMP AL,"I"
  JNE parse_memory_syntax_error
  CMP B[negative_f],1
  JE parse_memory_syntax_error  ; Cant subtract an identifier
  search_symbol_table(0)
  MOV AX,[BX]
  MOV [ea_offset],AX

  CMP B[first_phase],0
  JE parse_memory_state3
  MOV B[offset_unknown],1

  ; State 3 - +/- or ] are valid (after reg/num)

  parse_memory_state3:
  get_next_token()
  CMP AL,"]"
  JNE parse_memory_notdone
  CLC
  RET
  parse_memory_notdone:

  CMP AL,"+"
  JE parse_memory_state2_1
  CMP AL,"-"
  JE parse_memory_negative
  JMP parse_memory_syntax_error
  parse_memory_negative:
  MOV B[negative_f],1
  parse_memory_state2_1:
  get_next_token()
  JMP parse_memory_state2



; Parse a register into ea_reg. Returns op_size in AL.

parse_reg2:
  MOV AX,DX
  CMP AX,010
  JLE parse_reg2_not_segreg
  error_exit("Expected a general purpose register on line: $")
  parse_reg2_not_segreg:

  CMP AX,8
  JGE parse_reg2_byte
  MOV [ea_reg],AL
  MOV AL,2
  JMP parse_reg2_done

  parse_reg2_byte:
  AND AL,7
  MOV [ea_reg],AL
  MOV AL,1

  parse_reg2_done:
  check_opsize(AX)
  MOV [op_size],AL
  RET



; Verifies that the operand size matches (arg) (not ambiguous or conflicting)
; opsize v    AL  0  1  2
;   0 = unknown   x  y  y
;   1 = byte      y  y  n
;   2 = word      y  n  y
; x = failure due to unknown size, y = success, n = failure due to size mismatch.
; Returns operand size (1 or 2) in AL.

check_opsize:
  PUSH BP
  MOV BP,SP
  MOV AL,[BP+4]
  OR AL,[op_size]
  CMP AL,0
  JNE check_opsize_not_zero
  error_exit("Unknown operand size on line: $")
  check_opsize_not_zero:
  CMP AL,3
  JNE check_opsize_good
  error_exit("Operand has wrong size on line: $")
  check_opsize_good:
  POP BP
  RET



; Assemble a CALL instruction.

;   E8 cv          CALL cv
;   FF /2          CALL rmv

asm_call:
  PUSH BP
  MOV BP,SP

  get_next_token()
  CMP AL,"I"
  JNE asm_call_not_label

  asm_byte(0e8)
  search_symbol_table(0)
  MOV DX,W[BX]
  SUB DX,[ip]
  DEC DX
  DEC DX
  asm_word(DX)                  ; write the jump word
  POP BP
  RET

  asm_call_not_label:
  PUSH AX
  asm_byte(0ff)
  POP AX
  parse_regmem()
  JC asm_call_error

  check_opsize(2)

  asm_call_ea_word:
  asm_ea(2)
  POP BP
  RET
  asm_call_error:
  error_exit("Label, register or memory required on line: $")



; Assemble an unconditional JMP instruction.

;   E9 cv          JMP cv
;   EB cb          JMP cb
;   FF /4          JMP rmv

asm_jmp:
  PUSH BP
  MOV BP,SP

  get_next_token()
  CMP AL,"I"
  JNE asm_jmp_not_label

  search_symbol_table(0)
  MOV DX,W[BX]
  SUB DX,[ip]
  DEC DX
  DEC DX
  PUSH DX

  CMP B[first_phase],0
  JNE asm_jmp_short

  MOV AX,DX
  CBW
  CMP AX,DX
  JE asm_jmp_short

  asm_byte(0e9)
  POP DX
  DEC DX
  asm_word(DX)                  ; write the jump word
  POP BP
  RET

  asm_jmp_short:
  asm_byte(0eb)
  POP AX
  asm_byte(AX)
  POP BP
  RET

  asm_jmp_not_label:
  PUSH AX
  asm_byte(0ff)
  POP AX
  parse_regmem()
  JC asm_jmp_error

  check_opsize(2)

  asm_jmp_ea_word:
  asm_ea(4)
  POP BP
  RET
  asm_jmp_error:
  error_exit("Label, register or memory required on line: $")



; Assemble an INT instruction.

;   CC             INT 3              5  p0os
;   CD ib          INT ib             5  p0normal

asm_int:
  get_next_token()
  CMP AL,"0"
  JE asm_int_number
  syntax_error()

  asm_int_number:
  MOV AX,DX
  CMP AL,3
  JNE asm_int_not3
  asm_byte(0cc)
  RET

  asm_int_not3:
  PUSH AX
  asm_byte(0cd)
  POP AX
  asm_byte(AX)
  RET



; Parse a positive (with or without + sign) or negative number
; Return CF=1 on failure.
parse_number:
  MOV B[negative_f],0

  CMP AL,"0"
  JE parse_number_done
  CMP AL,"+"
  JE parse_number_positive
  CMP AL,"-"
  JE parse_number_negative
  parse_number_fail:
  STC
  RET
  parse_number_negative:
  MOV B[negative_f],1
  parse_number_positive:
  get_next_token()
  CMP AL,"0"
  JNE parse_number_fail
  CMP B[negative_f],1
  JNE parse_number_done
  NEG DX
  parse_number_done:
  CLC
  RET



; Assemble a DW instruction (output a single word)
asm_dw:
  get_next_token()
  CMP AL,"I"
  JE asm_dw_identifier
  parse_number()
  JNC asm_dw_number
  syntax_error()
  asm_dw_number:
  asm_word(DX)
  RET
  asm_dw_identifier:
  search_symbol_table(0)
  MOV DX,[BX]
  JMP asm_dw_number



; Parse a string (just output it)
parse_string:
  PUSH SI
  MOV SI,DI
  parse_string_loop:
  LODSB
  CMP AL,022
  JE parse_string_end
  asm_byte(AX)
  JMP parse_string_loop
  parse_string_end:
  POP SI
  RET



; Assemble a DB instruction (output a single byte or a string)
asm_db:
  get_next_token()
  CMP AL,022
  JE asm_db_string
  parse_number()
  JNC asm_db_number
  syntax_error()
  asm_db_number:
  asm_byte(DX)
  RET
  asm_db_string:
  parse_string()
  RET



; Assemble an INC or DEC instruction.

;   40+r           INC rv
;   48+r           DEC rv
;   FE /0          INC rmb
;   FE /1          DEC rmb
;   FF /0          INC rmv
;   FF /1          DEC rmv

asm_incdec:
  PUSH BP
  MOV BP,SP
  get_next_token()
  CMP AL,"R"
  JNE asm_incdec_regmem
  CMP DX,8
  JGE asm_incdec_regmem
  MOV AX,[BP+4]
  MOV CL,3
  SHL AL,CL
  ADD AL,DL
  ADD AL,040
  asm_byte(AX)
  POP BP
  RET

  asm_incdec_regmem:
  parse_regmem()
  check_opsize(0)
  CMP AL,2
  JE asm_incdec_word

  asm_byte(0fe)
  JMP asm_incdec_operand

  asm_incdec_word:
  asm_byte(0ff)

  asm_incdec_operand:
  asm_ea([BP+4])
  POP BP
  RET

asm_inc:   asm_incdec(0) RET
asm_dec:   asm_incdec(1) RET



; Assemble a PUSH instruction.

;   06+8 r         PUSH segreg_r
;   50+r           PUSH rv
;   FF /6          PUSH rmv

asm_push:
  get_next_token()
asm_push_got_token:
  CMP AL,"R"
  JNE asm_push_notreg
  MOV AX,DX
  CMP AL,8
  JGE asm_push_not_gpr_word
  ADD AL,050
  asm_byte(AX)
  RET
  asm_push_not_gpr_word:
  CMP AL,010
  JL asm_push_bytereg   ; Get error on byte regs via parse_regmem and check_opsize

  MOV CL,3
  SHL AL,CL
  SUB AL,07a
  asm_byte(AX)
  RET

  asm_push_bytereg:
  MOV AL,"R"
  asm_push_notreg:
  parse_regmem()
  check_opsize(2)
  asm_byte(0ff)
  asm_ea(6)
  RET



; Assemble a POP instruction.

;   07+8*r         POP segreg_r
;   58+r           POP rv
;   8F /0          POP mv

asm_pop:
  get_next_token()
  CMP AL,"R"
  JNE asm_pop_notreg
  MOV AX,DX
  CMP AL,8
  JGE asm_pop_not_gpr_word
  ADD AL,058
  asm_byte(AX)
  RET
  asm_pop_not_gpr_word:
  CMP AL,010
  JL asm_pop_bytereg    ; Get error on byte regs via parse_regmem and check_opsize

  MOV CL,3
  SHL AL,CL
  SUB AL,079
  asm_byte(AX)
  RET

  asm_pop_bytereg:
  MOV AL,"R"
  asm_pop_notreg:
  parse_regmem()
  check_opsize(2)
  asm_byte(08f)
  asm_ea(0)
  RET



; Assemble a NOT, NEG, MUL, IMUL, DIV or IDIV instruction.

;   F6 /n          OP rmb
;   F7 /n          OP rmv

asm_math:
  PUSH BP
  MOV BP,SP
  get_next_token()
  parse_regmem()
  check_opsize(0)
  ADD AL,0f5
  asm_byte(AX)
  asm_ea([BP+4])
  POP BP
  RET

asm_not:   asm_math(2) RET
asm_neg:   asm_math(3) RET
asm_mul:   asm_math(4) RET
asm_imul:  asm_math(5) RET
asm_div:   asm_math(6) RET
asm_idiv:  asm_math(7) RET



; Parse (and ignore) a comma - error if it isnt there.

parse_comma:
  get_next_token()
  CMP AL,","
  JNE parse_comma_fail
  RET
  parse_comma_fail:
  error_exit("Comma expected on line: $")



; Parse a pair of operands. Allowable pairs are:
;   reg,reg
;   reg,mem
;   mem,reg
;   reg,imm
;   mem,imm
;   seg,reg
;   reg,seg
;   seg,mem
;   mem,seg
; Returns immediate value (if any) in DX
; Returns mem/seg/reg in EA structure.
; For reg/reg, the first operand is in ea_rm_reg and the second is in ea_reg.

memory_first:  DB 00
immediate_f:   DB 00
segment_first: DB 00
segment_f:     DB 00
imm_unknown:   DB 00

parse_pair:
  MOV AL,0
  MOV [immediate_f],AL
  MOV [segment_f],AL
  MOV [imm_unknown],AL

  get_next_token()
  CMP AL,"R"
  JE parse_pair_reg
  JMP parse_pair_mem
  parse_pair_reg:

  MOV B[memory_first],0

  MOV AX,DX
  CMP AL,010
  JL parse_pair_regnotseg

  ; seg,reg or seg,mem

  MOV B[segment_f],1
  MOV B[segment_first],1
  SUB AL,010
  MOV [ea_reg],AL
  parse_comma()
  get_next_token()
  parse_regmem()
  check_opsize(2)
  RET

  ; reg,reg or reg,seg or reg,mem or reg,imm

  parse_pair_regnotseg:
  MOV AL,"R"
  parse_regmem()
  MOV AL,[ea_rm_reg]
  MOV [ea_reg],AL
  parse_comma()
  get_next_token()
  CMP AL,"R"
  JNE parse_pair_regnotreg

  ; reg,reg or reg,seg

  MOV AX,DX
  CMP AL,010
  JL parse_pair_regreg

  ; reg,seg

  MOV B[segment_f],1
  MOV B[segment_first],0
  SUB AL,010
  MOV [ea_reg],AL
  check_opsize(2)
  RET

  ; reg,reg

  parse_pair_regreg:
  MOV B[memory_first],1
  parse_reg2()
  RET

  ; reg,mem or reg,imm

  parse_pair_regnotreg:
  CMP AL,"["
  JE parse_pair_regmem
  CMP AL,"S"
  JE parse_pair_regmem

  ; reg,imm

  MOV B[immediate_f],1
  CMP AL,"I"
  JNE parse_pair_regimm_n
  search_symbol_table(0)
  MOV DX,[BX]
  MOV B[imm_unknown],1
  RET

  parse_pair_regimm_n:
  parse_number()
  JC parse_pair_syntax_error
  RET

  parse_pair_syntax_error:
  syntax_error()

  ; reg,mem

  parse_pair_regmem:
  PUSH [op_size]
  parse_regmem()
  POP AX
  check_opsize(AX)
  MOV [op_size],AL
  RET

  ; mem,reg or mem,seg or mem,imm

  parse_pair_mem:
  MOV B[memory_first],1
  parse_regmem()
  parse_comma()
  get_next_token()
  CMP AL,"R"
  JNE parse_pair_memimm

  ; mem,reg or mem,seg

  MOV AX,DX
  CMP AL,010
  JL parse_pair_memreg

  ; mem,seg

  SUB AL,010
  MOV [ea_reg],AL
  MOV B[segment_first],1
  check_opsize(2)
  RET

  ; mem,reg

  parse_pair_memreg:
  parse_reg2()
  RET

  ; mem,imm

  parse_pair_memimm:
  MOV B[immediate_f],1
  CMP AL,"I"
  JNE parse_pair_memimm_n
  search_symbol_table(0)
  MOV DX,[BX]
  MOV B[imm_unknown],1
  RET

  parse_pair_memimm_n:
  parse_number()
  JC parse_pair_syntax_error
  check_opsize(0)
  RET



; Assemble a ROL, ROR, RCL, RCR, SHL, SHR or SAR instruction.

;   D0 /n          OP rmb,1
;   D1 /n          OP rmv,1
;   D2 /n          OP rmb,CL
;   D3 /n          OP rmv,CL

asm_shift:
  PUSH BP
  MOV BP,SP
  get_next_token()
  parse_regmem()
  check_opsize(0)

  PUSH AX
  parse_comma()

  get_next_token()
  CMP AL,"0"
  JNE asm_shift_not_number
  MOV AX,DX
  CMP AX,1
  JE asm_shift_ok
  asm_shift_syntax_error:
  error_exit("Expected 1 or CL on line: $")
  asm_shift_ok:
  POP AX
  asm_shift_do:
  ADD AL,0cf
  asm_byte(AX)
  asm_ea([BP+4])
  POP BP
  RET

  asm_shift_not_number:
  CMP AL,"R"
  JNE asm_shift_syntax_error
  MOV AX,DX
  CMP AL,9            ; Is register CL?
  JNE asm_shift_syntax_error
  POP AX
  ADD AL,2
  JMP asm_shift_do

asm_rol:   asm_shift(0) RET
asm_ror:   asm_shift(1) RET
asm_rcl:   asm_shift(2) RET
asm_rcr:   asm_shift(3) RET
asm_shl:   asm_shift(4) RET
asm_shr:   asm_shift(5) RET
asm_sar:   asm_shift(7) RET



; Assemble an XCHG instruction.

;   86 /r          XCHG rmb,rb
;   87 /r          XCHG rmv,rv
;   90+r           XCHG eAX,rv

asm_xchg:
  parse_pair()
  CMP B[immediate_f],0
  JE asm_xchg_not_imm
  asm_xchg_syntax_error:
  syntax_error()
  asm_xchg_not_imm:
  CMP B[segment_f],0
  JNE asm_xchg_syntax_error

  CMP B[ea_memf],0
  JE asm_xchg_reg

  ; One operand was memory - use EA form

  asm_xchg_regmem:
  MOV AL,[op_size]
  ADD AL,085
  asm_byte(AX)
  asm_ea([ea_reg])
  RET

  ; Both operands were registers.

  asm_xchg_reg:
  CMP B[op_size],1
  JE asm_xchg_regmem  ; Byte swap - use EA form.
  CMP B[ea_reg],0
  JE asm_xchg_ax
  CMP B[ea_rm_reg],0
  JNE asm_xchg_regmem ; Neither was AX - use EA form.

  asm_xchg_ax:
  MOV AL,[ea_reg]     ; One was AX. Add them to find the other.
  ADD AL,[ea_rm_reg]
  ADD AL,090
  asm_byte(AX)       ; Use 1-byte form.
  RET



; Assemble a TEST instruction.

;   84 /r          TEST rmb,rb
;   85 /r          TEST rmv,rv
;   A8 ib          TEST AL,ib
;   A9 iv          TEST eAX,iv
;   F6 /0 ib       TEST rmb,ib
;   F7 /0 iv       TEST rmv,iv

asm_test:
  parse_pair()
  CMP B[segment_f],0
  JE asm_test_not_seg
  syntax_error()
  asm_test_not_seg:

  CMP B[immediate_f],0
  JNE asm_test_immediate

  ; reg/mem,reg form

  MOV AL,[op_size]
  ADD AL,083
  asm_byte(AX)
  asm_ea([ea_reg])
  RET

  asm_test_immediate:
  PUSH DX
  CMP B[ea_memf],0
  JNE asm_test_memimm
  CMP B[ea_rm_reg],0
  JNE asm_test_memimm

  ; A,imm form

  MOV AL,[op_size]
  CBW
  PUSH AX
  ADD AL,0a7
  asm_byte(AX)
  POP CX
  POP DX
  write(DX,CX)
  RET

  ; reg/mem,imm form

  asm_test_memimm:
  MOV AL,[op_size]
  CBW
  PUSH AX
  ADD AL,0f5
  asm_byte(AX)
  asm_ea([ea_reg])
  POP CX
  POP DX
  write(DX,CX)
  RET



; Assemble an ADD, OR, ADC, SBB, AND, SUB, XOR or CMP instruction.

;   00+8*n /r      OP rmb,rb
;   01+8*n /r      OP rmv,rv
;   02+8*n /r      OP rb,rmb
;   03+8*n /r      OP rv,rmv
;   04+8*n ib      OP AL,ib
;   05+8*n iv      OP eAX,iv
;   80 /n ib       OP rmb,ib
;   81 /n iv       OP rmv,iv
;   83 /n ib       OP rmv,ib

asm_alu:
  PUSH BP
  MOV BP,SP
  parse_pair()
  PUSH DX          ; stack = imm

  CMP B[segment_f],0
  JE asm_alu_not_seg
  syntax_error()
  asm_alu_not_seg:

  CMP B[immediate_f],0
  JNE asm_alu_immediate

  ; reg,reg or reg,mem or mem,reg form

  CMP B[memory_first],0
  JNE asm_alu_memfirst
  MOV AL,[op_size]
  ADD AL,1
  JMP asm_alu_regmem
  asm_alu_memfirst:
  MOV AL,[op_size]
  ADD AL,0ff
  asm_alu_regmem:
  MOV BX,[BP+4]
  MOV CL,3
  SHL BL,CL
  ADD AL,BL
  asm_byte(AX)
  asm_ea([ea_reg])
  POP DX           ; DX = imm (unused)
  POP BP
  RET

  ; immediate forms

  asm_alu_immediate:
  CMP B[ea_memf],0
  JNE asm_alu_not_a
  CMP B[ea_rm_reg],0
  JNE asm_alu_not_a

  ; AL,imm and AX,imm forms

  MOV BX,[BP+4]
  MOV AL,[op_size]
  CBW
  PUSH AX          ; stack = size
  ADD AL,3
  MOV CL,3
  SHL BL,CL
  ADD AL,BL
  asm_byte(AX)
  POP CX           ; CX = size
  POP DX           ; DX = imm
  write(DX,CX)
  POP BP
  RET

  ; reg,imm and mem,imm forms

  asm_alu_not_a:
  MOV AL,[op_size]
  CMP AL,1
  JNE asm_alu_imm_word

  ; rmb,ib form

  asm_byte(080)
  asm_ea([BP+4])
  POP DX           ; DX = imm
  asm_byte(DX)
  POP BP
  RET

  ; rmv,iv and rmv,ib forms

  asm_alu_imm_word:
  POP AX           ; AX = imm
  MOV BX,AX
  CBW

  CMP B[imm_unknown],0
  JNE asm_alu_imm_notbyte

  CMP AX,BX
  JNE asm_alu_imm_notbyte

  ; rmv,ib form

  PUSH BX          ; stack = imm
  asm_byte(083)
  asm_ea([BP+4])
  POP DX           ; DX = imm
  asm_byte(DX)
  POP BP
  RET

  ; rmv,iv form

  asm_alu_imm_notbyte:
  PUSH BX          ; stack = imm
  asm_byte(081)
  asm_ea([BP+4])
  POP DX           ; DX = imm
  asm_word(DX)
  POP BP
  RET

asm_add:   asm_alu(0) RET
asm_or:    asm_alu(1) RET
asm_adc:   asm_alu(2) RET
asm_sbb:   asm_alu(3) RET
asm_and:   asm_alu(4) RET
asm_sub:   asm_alu(5) RET
asm_xor:   asm_alu(6) RET
asm_cmp:   asm_alu(7) RET



; Assemble a MOV instruction.

;   88 /r          MOV rmb,rb
;   89 /r          MOV rmv,rv
;   8A /r          MOV rb,rmb
;   8B /r          MOV rv,rmv
;   8C /r          MOV(ZX) rmv,segreg
;   8E /r          MOV segreg,rmw
;   A0 iv          MOV AL,xb
;   A1 iv          MOV eAX,xv
;   A2 iv          MOV xb,AL
;   A3 iv          MOV xv,eAX
;   B0+r ib        MOV rb,ib
;   B8+r iv        MOV rv,iv
;   C6 /0 ib       MOV rmb,ib
;   C7 /0 iv       MOV rmv,iv

asm_mov:
  parse_pair()
  CMP B[segment_f],0
  JE asm_mov_not_seg

  ; rmv,segreg and segreg,rmv forms
  CMP B[segment_first],0
  JNE asm_mov_seg_first
  asm_byte(08c)
  asm_ea([ea_reg])
  RET

  asm_mov_seg_first:
  asm_byte(08e)
  asm_ea([ea_reg])
  RET

  asm_mov_not_seg:
  CMP B[immediate_f],0
  JE asm_mov_not_imm
  JMP asm_mov_imm
  asm_mov_not_imm:

  CMP B[ea_memf],0
  JE asm_mov_regmem

  CMP B[ea_reg],0
  JNE asm_mov_regmem

  CMP B[ea_bx],0
  JNE asm_mov_regmem

  CMP B[ea_bp],0
  JNE asm_mov_regmem

  CMP B[ea_si],0
  JNE asm_mov_regmem

  CMP B[ea_di],0
  JNE asm_mov_regmem

  CMP B[memory_first],0
  JNE asm_mov_a_memory_first

  MOV AL,[op_size]
  ADD AL,09f
  asm_byte(AX)
  asm_word([ea_offset])
  RET

  asm_mov_a_memory_first:
  MOV AL,[op_size]
  ADD AL,0a1
  asm_byte(AX)
  asm_word([ea_offset])
  RET

  asm_mov_regmem:
  CMP B[memory_first],0
  JNE asm_mov_memory_first

  MOV AL,[op_size]
  ADD AL,089
  asm_byte(AX)
  asm_ea([ea_reg])
  RET

  asm_mov_memory_first:
  MOV AL,[op_size]
  ADD AL,087
  asm_byte(AX)
  asm_ea([ea_reg])
  RET

  asm_mov_imm:
  CMP B[ea_memf],0
  JNE asm_mov_mem_imm

  CMP B[op_size],1
  JNE asm_mov_mem_word

  MOV AL,[ea_rm_reg]
  ADD AL,0b0
  PUSH DX
  asm_byte(AX)
  POP DX
  asm_byte(DX)
  RET

  asm_mov_mem_word:
  MOV AL,[ea_rm_reg]
  ADD AL,0b8
  PUSH DX
  asm_byte(AX)
  POP DX
  asm_word(DX)
  RET

  asm_mov_mem_imm:
  PUSH DX
  MOV AL,[op_size]
  CBW
  PUSH AX
  ADD AL,0c5
  asm_byte(AX)

  asm_ea(0)

  POP CX
  POP DX
  write(DX,CX)
  RET



; Parse a mnemonic and output the instruction bytes

parse_mnemonic_table:
 DW asm_adc DW asm_add DW asm_and DW asm_call DW asm_cbw       ;  0
 DW asm_clc DW asm_cld DW asm_cli DW asm_cmc DW asm_cmp
 DW asm_cmpsb DW asm_cmpsw DW asm_cwd DW asm_db DW asm_dec     ; 10
 DW asm_div DW asm_dw DW asm_idiv DW asm_imul DW asm_inc
 DW asm_int DW asm_ja DW asm_jae DW asm_jb DW asm_jbe          ; 20
 DW asm_jc DW asm_jcxz DW asm_je DW asm_jg DW asm_jge
 DW asm_jl DW asm_jle DW asm_jmp DW asm_jna DW asm_jnae        ; 30
 DW asm_jnb DW asm_jnbe DW asm_jnc DW asm_jne DW asm_jng
 DW asm_jnge DW asm_jnl DW asm_jnle DW asm_jno DW asm_jnp      ; 40
 DW asm_jns DW asm_jnz DW asm_jo DW asm_jp DW asm_js
 DW asm_jz DW asm_lahf DW asm_lodsb DW asm_lodsw DW asm_loop   ; 50
 DW asm_loope DW asm_loopne DW asm_mov DW asm_movsb DW asm_movsw
 DW asm_mul DW asm_neg DW asm_nop DW asm_not DW asm_or         ; 60
 DW asm_pop DW asm_popf DW asm_push DW asm_pushf DW asm_rcl
 DW asm_rcr DW asm_rep DW asm_repne DW asm_ret DW asm_retf     ; 70
 DW asm_rol DW asm_ror DW asm_sahf DW asm_salc DW asm_sar
 DW asm_sbb DW asm_scasb DW asm_scasw DW asm_shl DW asm_shr    ; 80
 DW asm_stc DW asm_std DW asm_sti DW asm_stosb DW asm_stosw
 DW asm_sub DW asm_test DW asm_xchg DW asm_xlatb DW asm_xor    ; 90


parse_mnemonic:
  SHL DX,1
  ADD DX,parse_mnemonic_table
  MOV BX,DX
  JMP [BX]



; Parse a function call and output the result.

parse_fncall:
  PUSH BP
  MOV BP,SP
  SUB SP,2

  search_symbol_table(0)
  MOV DX,[BX]

  PUSH DX
  MOV W[BP-2],0
  parse_fncall_top:
  get_next_token()
  PUSH AX
  parse_number()
  POP AX
  JC parse_fncall_not_number

  ; number

  parse_fncall_push_number:
  PUSH DX
  asm_byte(0b8)     ; emit a MOV AX,
  POP DX
  asm_word(DX)      ; emit the number
  asm_byte(050)     ; emit a PUSH AX

  ADD W[BP-2],2
  get_next_token()
  JMP parse_fncall_step2

  parse_fncall_not_number:
  CMP AL,"R"
  JE parse_fncall_regmem
  CMP AL,"["
  JE parse_fncall_regmem
  CMP AL,"S"
  JNE parse_fncall_not_regmem
  parse_fncall_regmem:

  ; register or memory

  asm_push_got_token()
  ADD W[BP-2],2
  get_next_token()
  JMP parse_fncall_step2

  parse_fncall_not_regmem:
  CMP AL,022
  JNE parse_fncall_not_string

  ; string

  PUSH SI
  PUSH DI
  MOV AX,SI
  DEC AX
  SUB AX,DI
  CMP AX,07f
  JBE parse_fncall_short_string
  PUSH AX
  asm_byte(0e9)     ; emit a JMP
  POP DX
  MOV CX,2
  parse_fncall_string_do:
  write(DX,CX)      ; emit the distance (over the string)
  POP DI
  POP SI
  PUSH W[ip]
  parse_string()    ; emit the string
  POP DX
  JMP parse_fncall_push_number ; emit a push of the string address

  parse_fncall_short_string:
  PUSH AX
  asm_byte(0eb)     ; emit a JMPS
  POP DX
  MOV CX,1
  JMP parse_fncall_string_do

  parse_fncall_not_string:
  CMP AL,"I"
  JNE parse_fncall_not_identifier

  ; identifier

  get_next_token()
  CMP AL,"("
  JNE parse_fncall_not_fncall

  ; fncall

  parse_fncall()
  asm_byte(050)     ; emit a PUSH AX (the result of the fncall is assumed to be returned in AX)
  ADD W[BP-2],2
  get_next_token()
  JMP parse_fncall_step2

  parse_fncall_not_fncall:
  PUSH AX
  search_symbol_table(0)
  MOV DX,[BX]

  PUSH DX
  asm_byte(0b8)     ; emit a MOV AX,
  POP DX
  asm_word(DX)      ; emit the number
  asm_byte(050)     ; emit a PUSH AX

  ADD W[BP-2],2
  POP AX
  JMP parse_fncall_step2

  parse_fncall_not_identifier:
  CMP AL,")"
  JE parse_fncall_end
  syntax_error()

  parse_fncall_step2:
  CMP AL,","
  JE parse_fncall_top
  CMP AL,")"
  JE parse_fncall_end
  syntax_error()

  parse_fncall_end:
  asm_byte(0e8)     ; emit a CALL
  POP DX
  SUB DX,[ip]
  DEC DX
  DEC DX
  asm_word(DX)

  CMP W[BP-2],0
  JNA parse_fncall_no_adjust

  CMP W[BP-2],07f
  JBE parse_fncall_adjust_short

  asm_byte(081)
  asm_byte(0c4)     ; emit an ADD SP,
  asm_word([BP-2])  ; emit the stack adjustment
  JMP parse_fncall_no_adjust

  parse_fncall_adjust_short:

  CMP W[BP-2],2
  JE parse_fncall_adjust_direct2
  CMP W[BP-2],4
  JE parse_fncall_adjust_direct4

  asm_byte(083)
  asm_byte(0c4)     ; emit an ADD SP,
  asm_byte([BP-2])  ; emit the stack adjustment
  JMP parse_fncall_no_adjust

  parse_fncall_adjust_direct4:

  asm_byte(059)     ; emit a POP CX

  parse_fncall_adjust_direct2:

  asm_byte(059)     ; emit a POP CX

  parse_fncall_no_adjust:

  MOV SP,BP
  POP BP
  RET



; Parse a statement and output the result. Returns CF=1 on EOF.

parse_statement:
  get_next_token()
  JNC parse_statement_not_end

  RET
  parse_statement_not_end:
  CMP AL,"I"
  JNE parse_statement_not_identifier

  ; Identifier

  get_next_token()
  CMP AL,":"
  JE parse_statement_label
  CMP AL,"("
  JE parse_statement_fncall
  syntax_error()

  parse_statement_fncall:
  parse_fncall()
  CLC
  RET

  parse_statement_label:
  search_symbol_table(1)
  MOV AX,[ip]

  CMP B[first_phase],0
  JNE parse_statement_update_label

  CMP [BX],AX
  JE parse_statement_no_update_label

  parse_statement_update_label:
  MOV [BX],AX
  MOV B[last_phase],0

  parse_statement_no_update_label:
  CLC
  RET
  parse_statement_not_identifier:
  CMP AL,"M"
  JNE parse_statement_not_mnemonic

  parse_mnemonic()
  CLC
  RET
  parse_statement_not_mnemonic:
  CMP AL,"R"
  JNE parse_statement_not_register

  CMP DX,010
  JGE parse_statement_segreg
  syntax_error()
  parse_statement_segreg:

;   26             ES:
;   2E             CS:
;   36             SS:
;   3E             DS:

  MOV CL,3
  SHL DX,CL
  SUB DX,05a
  asm_byte(DX)
  CLC
  RET
  parse_statement_not_register:
  CMP AL,":"
  JNE parse_statement_not_colon

  CLC                   ;   combination of ES and ES: are not LL(0) so we handle them by just ignoring : at statement scope.
  RET
  parse_statement_not_colon:
  syntax_error()



; Main function.
;   Allocate a line buffer
;   Phase loop (phase 0 = finding label locations, phase 1 = emitting)
;     Parse loop

line_buffer:      DW 0
max_line_length:  DW 0200
last_phase:       DB 0
first_phase:      DB 0

main:
  alloc([max_line_length])
  MOV [line_buffer],AX

  MOV B[first_phase],1
  main_phase_top:
  MOV B[last_phase],1
  rewind()

  MOV DX,[writename]
  MOV AH,03c
  XOR CX,CX
  INT 021
  JC main_end
  MOV [writehandle],AX

  main_parse_top:
  parse_statement()
  JNC main_parse_top

  MOV BX,[writehandle]
  MOV AH,03e
  INT 021

  MOV B[first_phase],0

  CMP B[last_phase],0
  JE main_phase_top

  main_end:
  RET

static_end:
