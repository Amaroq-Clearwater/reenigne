; This is the bootstrapping compiler step 16 (written in step 16 language)
; This file contains the lexer functions



; Parse hexadecimal number, return value in [token_arg].
function lex_hexnumber()
{
  PUSH EDI

  MOV D[token_arg],0
  do {

    MOV EDI,[character]
    if (~is_digit(EDI)) {
      MOV EDI,upper_case(EDI)
      if (EDI<'A' | EDI>'F')
        break
      SUB EDI,7
    }
    SUB EDI,'0'
    get_next_character()

    SHL D[token_arg],4
    OR [token_arg],EDI

  } while (true)
  POP EDI
}



; Parse decimal number, return value in [token_arg].
function lex_decnumber()
{
  PUSH EDI

  MOV D[token_arg],0
  do {

    MOV EDI,[character]
    if (~is_digit(EDI))
      break
    SUB EDI,'0'
    get_next_character()

    MOV EAX,10
    MUL D[token_arg]
    ADD EAX,EDI
    MOV D[token_arg],EAX

  } while (true)
  POP EDI
}



; Lex an identifier. Return in "identifier".

identifier: DD 0

function lex_identifier()
{
  PUSH ESI
  PUSH EBX
  MOV ESI,[input_pointer]
  MOV EBX,1
  while (is_alphanumeric(get_next_character())) { INC EBX }
  MOV D[identifier],string_create(EBX,ESI-1,0c)
  POP EBX
  POP ESI
}



function search_string_list(string_list)
{
  PUSH ESI
  PUSH EDI
  PUSH EBX
  MOV ESI,[string_list]
  MOV EDX,0
  MOV EBX,[identifier]

  looptop:
  PUSH EDX
  MOV EDI,EBX+010
  POP EDX
  MOV ECX,[EBX+0c]

  compare:
  MOV AL,[EDI]
  INC EDI
  PUSH ECX
  upper_case(AL)
  POP ECX
  MOV AH,AL
  LODSB

  CMP AL,AH
  JNE nomatch
  LOOP compare
  LODSB
  CMP AL,'$'
  JNE nomatch
  PUSH EDX
  free([identifier])
  POP [token_arg]
  MOV EAX,true
  JMP end

  nomatch:
  CMP AL,'$'
  JE next
  LODSB
  JMP nomatch

  next:
  INC EDX
  CMP B[ESI],0
  JNE looptop

  XOR EAX,EAX
  end:
  POP EBX
  POP EDI
  POP ESI
}


; Returns true (and reg number in [token_arg]) if identifier is a register.

reg_table:
  DB "EAX$","ECX$","EDX$","EBX$","ESP$","EBP$","ESI$","EDI$"
  DB "AL$","CL$","DL$","BL$","AH$","CH$","DH$","BH$"
  DB 0

function is_identifier_register()
{
  search_string_list(reg_table)
}



; Returns true (and mnemonic number in [token_arg]) if identifier is a mnemonic.

mnemonic_table:
DB "ADC$","ADD$","AND$","CALL$","CBW$","CDQ$","CLC$","CLD$","CLI$","CMC$"        ;  0
DB "CMP$","CMPSB$","CMPSD$","CWD$","CWDE$","DB$","DD$","DEC$","DIV$","DW$"       ; 10
DB "IDIV$","IMUL$","INC$","INT$","JA$","JAE$","JB$","JBE$","JC$","JCXZ$"         ; 20
DB "JE$","JG$","JGE$","JL$","JLE$","JMP$","JNA$","JNAE$","JNB$","JNBE$"          ; 30
DB "JNC$","JNE$","JNG$","JNGE$","JNL$","JNLE$","JNO$","JNP$","JNS$","JNZ$"       ; 40
DB "JO$","JP$","JS$","JZ$","LAHF$","LODSB$","LODSD$","LOOP$","LOOPE$","LOOPNE$"  ; 50
DB "MOV$","MOVSB$","MOVSD$","MUL$","NEG$","NOP$","NOT$","OR$","POP$","POPFD$"    ; 60
DB "PUSH$","PUSHFD$","RCL$","RCR$","REP$","REPNE$","RET$","RETF$","ROL$","ROR$"  ; 70
DB "SAHF$","SALC$","SAR$","SBB$","SCASB$","SCASD$","SHL$","SHR$","STC$","STD$"   ; 80
DB "STI$","STOSB$","STOSD$","SUB$","TEST$","XCHG$","XLATB$","XOR$"               ; 90
DB 0

function is_identifier_mnemonic()
{
  search_string_list(mnemonic_table)
}



; Returns true (and "B" or "D" in [token_arg]) if identifier is "B" or "D"
function is_identifier_size()
{
  MOV ECX,[identifier]
  if ([ECX+0c]==1) {
    MOV ECX,upper_case(B[ECX+010])
    if (ECX=='B' | ECX=='D') {
      MOV [token_arg],ECX
      MOV EAX,true
      JMP end
    }
  }
  MOV EAX,false
  end:
}



; Return CF=1 (and keyword number in AH) if identifier is a keyword

keyword_table:
  DB "auto$","break$","case$","default$","do$"
  DB "done$","else$","false$","from$","function$"
  DB "if$","return$","switch$","true$","while$"
  DB 0
keyword_table2:
  DB "ABCDONE0MFIRS1W"

function is_identifier_keyword()
{
  PUSH ESI
  PUSH EDI
  PUSH EBX
  MOV ESI,keyword_table
  MOV EDX,0
  MOV EBX,[identifier]

  looptop:
  PUSH EDX
  MOV EDI,EBX+010
  POP EDX
  MOV ECX,[EBX+0c]

  compare:
  LODSB
  MOV AH,[EDI]
  INC EDI
  CMP AL,AH
  JNE nomatch
  LOOP compare
  LODSB
  CMP AL,'$'
  JNE nomatch
  XOR EAX,EAX
  MOV AL,[keyword_table2+EDX]
  MOV [token_arg],EAX
  MOV EAX,true
  JMP end

  nomatch:
  CMP AL,'$'
  JE next
  LODSB
  JMP nomatch

  next:
  INC EDX
  CMP B[ESI],0
  JNE looptop

  XOR EAX,EAX
  end:
  POP EBX
  POP EDI
  POP ESI
}



; Gets the next token from the input. Return CF=1 on EOF.
; Ignores
;   Return token in B[token]:
;     + = "+"
;     - = "-"
;     [ = "["
;     ] = "]"
;     , = ","
;     : = ":"
;     ( = "("
;     ) = ")"
;     & = "&"
;     ^ = "^"
;     | = "|"
;     ~ = "~"
;     ! = "!"
;     < = "<"
;     > = ">"
;     = = "="
;     * = "*"
;     / = "/"
;     % = "%"
;     @ = "@"
;     { = "{"
;     } = "}"
;     l = "<<"
;     r = ">>"
;     L = "<="
;     G = ">="
;     e = "=="
;     n = "!="
;     S = "B" or "D" (size operand, [token_arg] = "B" or "D")
;     " = string ([token_arg] = start of string, [token_arg_high] = length of string)
;     0 = number ([token_arg] = number)
;     R = register ([token_arg] = register number)
;     M = mnemonic ([token_arg] = mnemonic number)
;     I = identifier (returned in identifier)
;     K = keyword ([token_arg] = keyword number)
;   NUL = EOF

token:          DD 0
token_arg:      DD 0
token_arg_high: DD 0

bad_string_character_msg: DD 25 DB "Bad character in string ("
bad_literal_character_msg: DD 26 DB "Bad character in literal ("
literal_too_long_msg: DD 17 DB "Literal too long",0a
unexpected_character_msg: DD 22 DB "Unexpected character ("

function get_next_token()
{
  PUSH EBX
  PUSH ESI
  PUSH EDI

  try:
  switch([character]) {
    case 0
      XOR EAX,EAX
    case ';' {
      do
        get_next_character()
      while ([character]!=0a & [character]!=0)
      get_next_character()
      JMP try
    }
    case ' '
    case 0c
    case 0a
    case 9 {
      get_next_character()
      JMP try
    }
    case '&'
    case '^'
    case '|'
    case '~'
    case '*'
    case '/'
    case '%'
    case '+'
    case '-'
    case '['
    case ']'
    case ','
    case ':'
    case '('
    case ')'
    case '{'
    case '}'
    case '@' {
      PUSH [character]
      get_next_character()
      POP EAX
    }
    case '!' {
      MOV ESI,get_next_character()
      if (ESI == '=') {
        get_next_character()
        MOV EAX,'n'
      }
      else
        MOV EAX,'!'
    }
    case '=' {
      MOV ESI,get_next_character()
      if (ESI == '=') {
        get_next_character()
        MOV EAX,'e'
      }
      else
        MOV EAX,'='
    }
    case '<' {
      MOV ESI,get_next_character()
      if (ESI == '<') {
        get_next_character()
        MOV EAX,'l'
      }
      else if (ESI == '=') {
        get_next_character()
        MOV EAX,'L'
      }
      else
        MOV EAX,'<'
    }
    case '>' {
      MOV ESI,get_next_character()
      if (ESI == '>') {
        get_next_character()
        MOV EAX,'r'
      }
      else if (ESI == '=') {
        get_next_character()
        MOV EAX,'G'
      }
      else
        MOV EAX,'>'
    }
    case '"' {
      MOV D[token_arg],[input_pointer]
      MOV EDI,-1
      do {
        MOV ESI,get_next_character()
        INC EDI
        if (ESI==9 | ESI==0c | ESI==0a | ESI==0) {
          print_source_context()
          print_str(bad_string_character_msg)
          print_hex(ESI,2)
          print_str(bad_character_msg_2)
          exit()
        }
      } while (ESI!='"')
      get_next_character()

      MOV D[token_arg_high],EDI
      MOV EAX,'"'
    }
    case '0' {
      lex_hexnumber()
      MOV EAX,'0'
    }
    case '1' case '2' case '3' case '4' case '5' case '6' case '7' case '8' case '9' {
      lex_decnumber()
      MOV EAX,'0'
    }
    case 027 {
      MOV ESI,get_next_character()
      if (ESI==9 | ESI==0c | ESI==0a | ESI==0) {
        print_source_context()
        print_str(bad_literal_character_msg)
        print_hex(ESI,2)
        print_str(bad_character_msg_2)
        exit()
      }
      MOV [token_arg],ESI
      if (get_next_character()!=027) {
        print_source_context()
        print_str(literal_too_long_msg)
        exit()
      }
      get_next_character()
      MOV EAX,'0'
    }
    default {
      MOV ESI,[character]
      if (~is_alphabetic(ESI)) {
        print_source_context()
        print_str(unexpected_character_msg)
        print_hex(ESI,2)
        print_str(bad_character_msg_2)
        exit()
      }
      lex_identifier()

      if (is_identifier_register())
        MOV EAX,'R'
      else if (is_identifier_mnemonic())
        MOV EAX,'M'
      else if (is_identifier_size())
        MOV EAX,'S'
      else if (is_identifier_keyword())
        MOV EAX,'K'
      else
        MOV EAX,'I'
    }
  }
  MOV [token],EAX
  POP EDI
  POP ESI
  POP EBX
}
