; This is the bootstrapping compiler step 15 (written in step 14 language)
; This file contains the code for symbol tables and structural programming elements


; Format of symbol BX:
;   W[BX]      subscope     Scope pointer
;   W[BX+2]    dest         Destination
;   W[BX+4]    next         Next entry pointer (0 if this is the last)
;   W[BX+6]    frame        true if symbol is on stack rather than being static, then dest is offset from BP
;   W[BX+8]    case_type    0 = normal named or anonymous  1 = case label (name contains value)  2 = default case label
;   W[BX+0a]   length       Symbol length (0 for anonymous labels)
;   BX+0c      name         Symbol string

; Format of symbol table BX
;   W[BX]      current      Pointer to last symbol returned by add_label
;   W[BX+2]    parent       Pointer to parent symbol table
;   W[BX+4]    first        Pointer to first entry
;   W[BX+6]    break_dest   Symbol for break or return destination
;   W[BX+8]    max_stack    Number of bytes to pop off stack at end of function
;   W[BX+0a]   cur_stack    Offset from BP of next stack variable to allocate
;   W[BX+0c]   stack        Number of bytes to add to function's cur_stack when leaving this scope

global_table: DW 0   ; Pointer to global symbol table
func_table:   DW 0   ; Pointer to current function's symbol table
loop_table:   DW 0   ; Pointer to current loop's symbol table (for breaks)
scope_table:  DW 0   ; Pointer to current scope's symbol table



; This function assembles a block of statements.
; It stops when the next token is not the start of a statement (i.e. '}' or 0)
; statements := |
;               statement statements

assemble_statements:
  parse_statement()
  TEST AX,AX
  JZ assemble_statements
  RET



; This function assembles a statement and returns false
; If there is no statement, it returns true
; statement := mnemonic <args> |
;              identifier: |
;              identifier(expr) |
;              { statements } |
;              function identifier(arg_list) statement |
;              if (expr) statement |
;              if (expr) statement else statement |
;              while (expr) statement |
;              do statement while (expr) |
;              auto identifier |
;              break |
;              return expr |
;              switch(expr) { case_blocks }

parse_statement:
  CMP B[token],'I'
  JNE parse_statement_not_identifier

  ; Identifier

  get_next_token()                          ; Slurp the identifier
  CMP B[token],':'
  JE parse_statement_label
  CMP B[token],'('
  JE parse_statement_fncall
  syntax_error()

  ; Function call

  parse_statement_fncall:
  parse_fncall()
  JMP parse_statement_ok

  ; Label

  parse_statement_label:
  parse_label()
  JMP parse_statement_ok


  parse_statement_not_identifier:
  CMP B[token],'M'
  JNE parse_statement_not_mnemonic

  ; Mnemonic

  parse_mnemonic()
  JMP parse_statement_ok


  parse_statement_not_mnemonic:
  CMP B[token],'R'
  JNE parse_statement_not_register

  ; Register

  parse_register()
  JMP parse_statement_ok


  parse_statement_not_register:
  CMP B[token],'{'
  JNE parse_statement_not_scope

  ; Scope

  parse_scope()
  JMP parse_statement_ok


  parse_statement_not_scope:
  CMP B[token],'K'
  JE parse_statement_keyword

  parse_statement_fail:
  MOV AX,-1
  JMP parse_statement_done

  parse_statement_keyword:
  MOV AL,[token+1]
  CMP AL,'F'
  JNE parse_statement_not_function

  ; Function definition

  parse_function()
  JMP parse_statement_ok


  parse_statement_not_function:
  CMP AL,'I'
  JNE parse_statement_not_if

  ; if statement

  parse_if()
  JMP parse_statement_ok


  parse_statement_not_if:
  CMP AL,'W'
  JNE parse_statement_not_while

  ; while statement

  parse_while()
  JMP parse_statement_ok


  parse_statement_not_while:
  CMP AL,'O'
  JNE parse_statement_not_do

  ; do statement

  parse_do()
  JMP parse_statement_ok


  parse_statement_not_do:
  CMP AL,'A'
  JNE parse_statement_not_auto

  ; auto statement

  parse_auto()
  JMP parse_statement_ok


  parse_statement_not_auto:
  CMP AL,'B'
  JNE parse_statement_not_break

  ; break statement

  parse_break()
  JMP parse_statement_ok


  parse_statement_not_break:
  CMP AL,'R'
  JNE parse_statement_not_return

  ; return statement

  parse_return()
  JMP parse_statement_ok


  parse_statement_not_return:
  CMP AL,'S'
  JNE parse_statement_fail

  ; switch statement

  parse_switch()

  parse_statement_ok:
  XOR AX,AX
  parse_statement_done:
  RET



; This function parses a function call statement
;             identifier(expr)

parse_fncall:
  MOV BX,malloc(4)
  MOV B[BX],'N'
  MOV B[BX+1],1
  PUSH BX
  find_label()
  POP BX
  MOV [BX+2],AX
  parse_expr0p()
  simplify()
  gen_fncall(BX)
  free_ast(BX)
  RET



; This function parses a label statement
;             identifier:

parse_label:
  add_named_label()
  get_next_token()                          ; Slurp the :
  RET



; This function parses a register (segment override) statement

parse_register:
  CMP B[token_arg],010
  JGE parse_register_segreg
  parse_register_error:
  syntax_error()
  parse_register_segreg:
  PUSH W[token_arg]
  get_next_token()                          ; Slurp the reg
  CMP B[token],':'
  JNE parse_register_error

;   26             ES:
;   2E             CS:
;   36             SS:
;   3E             DS:

  POP DX
  MOV CL,3
  SHL DX,CL
  SUB DX,05a
  asm_byte(DX)
  get_next_token()                          ; Slurp the :
  RET



; This function parses a scope statement (block)
;             { statements }

parse_scope:
  get_next_token()                          ; Slurp the {
  enter_scope()
  assemble_statements()
  leave_scope()
  CMP B[token],'}'
  JE parse_scope_ok

  error_exit("Expected } on line: $")

  parse_scope_ok:
  get_next_token()                          ; Slurp the }
  RET



; Parse (and ignore) a '(' - error if it isnt there.

parse_open:
  CMP B[token],'('
  JE parse_open_succeed
  error_exit("Expected ( on line: $")
  parse_open_succeed:
  get_next_token()                          ; Slurp the (
  RET



; Parse (and ignore) a ')' - error if it isnt there.

parse_close:
  CMP B[token],')'
  JE parse_close_succeed
  error_exit("Expected ) on line: $")
  parse_close_succeed:
  get_next_token()                          ; Slurp the )
  RET



; This function parses a function definition statement
;             function identifier(arg_list) statement
; arg_list := |
;             args
; args := identifier |
;         identifier,args
;
; [BP-2] = outer_func
; [BP-4] = arg_offset

parse_function:
  PUSH BP
  MOV BP,SP
  SUB SP,4

  get_next_token()                          ; Slurp the function
  CMP B[token],'I'
  JE parse_function_gotname

  error_exit("Expected a function name on line: $")

  parse_function_gotname:
  add_named_label()

  MOV W[BP-2],[func_table]
  enter_scope()
  MOV W[func_table],[scope_table]


  MOV W[BP-4],4
  get_next_token()                          ; Slurp the identifier
  parse_open()

  CMP B[token],')'
  JE parse_function_args_done

  parse_function_need_identifier:
  CMP B[token],'I'
  JE parse_function_got_arg

  error_exit("Argument expected on line: $")

  parse_function_got_arg:
  add_auto([BP-4])
  ADD W[BP-4],2

  CMP B[token],','
  JNE parse_function_args_done
  get_next_token()                          ; Slurp the comma
  JMP parse_function_need_identifier
  parse_function_args_done:


  CMP B[first_phase],0
  JE parse_function_noinitmaxstack
  MOV W[[func_table]+8],0        ; func_table->max_stack = 0
  parse_function_noinitmaxstack:
  MOV W[[func_table]+0a],-2      ; func_table->cur_stack = -2

  CMP W[[func_table]+8],0
  JNE parse_function_prolog
  CMP W[BP-4],4
  JE parse_function_skip_prolog

  parse_function_prolog:
  asm_byte(055)                  ; assemble "PUSH BP"
  asm_byte(089)
  asm_byte(0e5)                  ; assemble "MOV BP,SP"
  parse_function_skip_prolog:

  MOV DX,W[[func_table]+8]       ; func_table->max_stack
  CMP DX,0
  JE parse_function_no_stack_vars
  MOV AX,DX
  CBW
  CMP AX,DX
  JNE parse_function_large_stack
  PUSH AX
  asm_byte(083)
  asm_byte(0ec)
  POP AX
  asm_byte(AX)                   ; assemble "SUB SP,func_table->max_stack"
  JMP parse_function_no_stack_vars
  parse_function_large_stack:
  PUSH DX
  asm_byte(081)
  asm_byte(0ec)
  POP AX
  asm_word(AX)                   ; assemble "SUB SP,func_table->max_stack"
  parse_function_no_stack_vars:


  parse_close()
  parse_statement()

  MOV DX,[[func_table]+6]        ; func_table->break_dest
  CMP DX,0
  JE parse_function_no_return
  set_label(DX)
  parse_function_no_return:

  CMP W[[func_table]+8],0        ; func_table->max_stack
  JE parse_function_no_stack_fixup

  asm_byte(089)
  asm_byte(0ec)                  ; assemble "MOV SP,BP"
  JMP parse_function_epilog
  parse_function_no_stack_fixup:

  CMP W[BP-4],4
  JE parse_function_skip_epilog

  parse_function_epilog:
  asm_byte(05d)                  ; assemble "POP BP"
  parse_function_skip_epilog:
  asm_byte(0c3)                  ; assemble "RET"
  leave_scope()
  MOV W[func_table],[BP-2]       ; func_table = outer_func

  MOV SP,BP
  POP BP
  RET



; This function parses an "if" statement
;             if (expr) statement
;             if (expr) statement else statement
; [BP-2] = skip
; [BP-4] = skip2

parse_if:
  PUSH BP
  MOV BP,SP
  SUB SP,4

  get_next_token()                          ; Slurp the if
  parse_open()
  parse_expr()
  simplify()
  gen_ea(BX,08b,0,2,1)           ; generate "MOV AX,expr"
  free_ast(BX)
  parse_close()
  asm_byte(085)
  asm_byte(0c0)                  ; assemble "TEST AX,AX"
  MOV W[BP-2],add_anon_label()   ; skip = add_anon_label()
  gen_jcond(074,get_label([BP-2])) ; assemble "JZ skip"
  parse_statement()

  CMP B[token],'K'
  JNE parse_if_not_else
  CMP B[token+1],'E'
  JNE parse_if_not_else

  get_next_token()                          ; Slurp the else

  MOV W[BP-4],add_anon_label()   ; skip2 = add_anon_label()
  gen_jmp(get_label([BP-4]))     ; assemble "JMP skip2"
  JMP parse_if_done_else

  parse_if_not_else:
  MOV W[BP-4],0                  ; skip2 = 0

  parse_if_done_else:
  set_label([BP-2])              ; set_label(skip)

  CMP W[BP-4],0                  ; skip2
  JE parse_if_done

  parse_statement()
  set_label([BP-4])              ; set_label(skip2)

  parse_if_done:
  MOV SP,BP
  POP BP
  RET



; This function parses a "while" statement
;             while (expr) statement
;             while (expr) statement done statement
;  [BP-2] = loop_test
;  [BP-4] = outer_loop
;  [BP-6] = loop_top

parse_while:
  PUSH BP
  MOV BP,SP
  SUB SP,6

  get_next_token()                          ; Slurp the while
  parse_open()
  MOV W[BP-2],add_anon_label()   ; loop_test = add_anon_label()
  gen_jmp(get_label([BP-2]))     ; assemble "JMP loop_test"
  MOV W[BP-4],[loop_table]       ; outer_loop = loop_table
  enter_scope()
  MOV W[loop_table],[scope_table]
  MOV W[BP-6],add_anon_label()   ; loop_top = add_anon_label()
  set_label([BP-6])              ; set_label(loop_top)

  parse_expr()
  simplify()
  PUSH BX
  parse_close()
  parse_statement()
  set_label([BP-2])              ; set_label(loop_test)

  POP BX
  gen_ea(BX,08b,0,2,1)           ; generate "MOV AX,expr"
  free_ast(BX)
  asm_byte(085)
  asm_byte(0c0)                  ; assemble "TEST AX,AX"
  gen_jcond(075,get_label([BP-6])) ; assemble "JNZ loop_top"

  CMP B[token],'K'
  JNE parse_while_no_done
  CMP B[token+1],'N'
  JNE parse_while_no_done

  get_next_token()                          ; Slurp the done
  parse_statement()

  parse_while_no_done:
  MOV DX,[[scope_table]+6]       ; scope_table->break_dest
  CMP DX,0
  JE parse_while_no_break

  set_label(DX)                  ; set_label(scope_table->break_dest)

  parse_while_no_break:
  leave_scope()
  MOV W[loop_table],[BP-4]       ; loop_table = outer_loop

  MOV SP,BP
  POP BP
  RET



; This function parses a "do" statement
;             do statement while (expr)
;  [BP-2] = outer_loop
;  [BP-4] = loop_top

parse_do:
  PUSH BP
  MOV BP,SP
  SUB SP,4

  get_next_token()                          ; Slurp the do

  MOV W[BP-2],[loop_table]       ; outer_loop = loop_table
  enter_scope()
  MOV W[loop_table],[scope_table]
  MOV W[BP-4],add_anon_label()   ; loop_top = add_anon_label()
  set_label([BP-4])              ; set_label(loop_top)
  parse_statement()

  CMP B[token],'K'
  JE parse_do_keyword

  parse_do_no_while:
  error_exit("Expected while on line: $")

  parse_do_keyword:
  CMP B[token+1],'W'
  JNE parse_do_no_while

  get_next_token()                          ; Slurp the while
  parse_open()
  parse_expr()
  simplify()
  gen_ea(BX,08b,0,2,1)           ; generate "MOV AX,expr"
  free_ast(BX)
  asm_byte(085)
  asm_byte(0c0)                  ; assemble "TEST AX,AX"
  gen_jcond(075,get_label([BP-4])) ; assemble "JNZ loop_top"
  parse_close()

  CMP B[token],'K'
  JNE parse_do_no_done
  CMP B[token+1],'N'
  JNE parse_do_no_done

  get_next_token()                          ; Slurp the done
  parse_statement()

  parse_do_no_done:
  MOV DX,[[scope_table]+6]       ; scope_table->break_dest
  CMP DX,0
  JE parse_do_no_break

  set_label(DX)                  ; set_label(scope_table->break_dest)

  parse_do_no_break:
  leave_scope()
  MOV W[loop_table],[BP-2]       ; loop_table = outer_loop

  MOV SP,BP
  POP BP
  RET



; This function parses an "auto" statement (stack variable definition)
;             auto identifier

parse_auto:
  get_next_token()                          ; Slurp the auto
  MOV BX,[func_table]
  CMP BX,0
  JNE parse_auto_in_func

  error_exit("auto variables only possible in a function on line: $")

  parse_auto_in_func:
  MOV DX,[BX+0a]                 ; func_table->cur_stack
  PUSH DX
  PUSH BX
  add_auto(DX)
  POP BX
  MOV AX,[BX+8]                  ; func_table->max_stack
  POP DX
  NEG DX
  CMP DX,AX
  JLE parse_auto_no_bump         ; if (-func_table->cur_stack >= func_table->max_stack) {

  ADD W[BX+8],2                  ;   func_table->max_stack += 2
  MOV B[last_phase],0            ;   last_phase = 0

  parse_auto_no_bump:            ; }
  SUB W[BX+0a],2                 ; func_table->cur_stack -= 2
  ADD W[[scope_table]+0c],2      ; scope_table->stack += 2

  RET



; This function parses a "break" statemnet
;             break

parse_break:
  get_next_token()                          ; Slurp the break
  PUSH SI
  MOV SI,[loop_table]
  CMP W[SI+6],0                  ; loop_table->break_dest
  JNE parse_break_got_label

  MOV W[SI+6],add_anon_label()   ; loop_table->break_dest = add_anon_label()

  parse_break_got_label:
  gen_jmp(get_label([SI+6]))     ; assemble "JMP loop_table->break_dest"
  POP SI
  RET



; This function parses a "return" statement
;             return expr

parse_return:
  get_next_token()                          ; Slurp the return
  parse_expr()
  simplify()
  gen_ea(BX,08b,0,2,1)           ; generate "MOV AX,expr"
  free_ast(BX)
  PUSH SI
  MOV SI,[func_table]
  CMP W[SI+6],0                  ; func_table->break_dest
  JNE parse_return_got_label

  MOV W[SI+6],add_anon_label()   ; func_table->break_dest = add_anon_label()

  parse_return_got_label:
  gen_jmp(get_label([SI+6]))     ; assemble "JMP func_table->break_dest"
  POP SI
  RET



; This function parses a "switch" statement
;             switch(expr) { case_blocks }
; case_blocks := case_block |
;                case_blocks case_block
; case_block := case_labels statement
; case_labels := case_label |
;                case_labels case_label
; case_label := case expr |
;               default
;
; [BP-2] = switch_data
; [BP-4] = switch_end
; [BP-6] = default_label
; [BP-8] = num_cases
; [BP-0a] = num_defaults

parse_switch:
  PUSH BP
  MOV BP,SP
  SUB SP,0a

  enter_scope()
  get_next_token()                          ; Slurp the switch
  parse_open()
  parse_expr()
  simplify()
  gen_ea(BX,08b,2,2,1)           ; assemble "MOV DX,expr"
  free_ast(BX)
  parse_close()
  CMP B[token],'{'
  JE parse_switch_got_openc

  error_exit("Expected { on line: $")

  parse_switch_got_openc:
  get_next_token()                          ; Slurp the {

  MOV W[BP-8],0                  ; num_cases = 0
  MOV W[BP-0a],0                 ; num_defaults = 0
  MOV BX,[[scope_table]+4]       ; current = scope_table->first
  parse_switch_count_cases:
  CMP BX,0
  JE parse_switch_count_cases_done ; while (current != 0)

  CMP W[BX+8],1                  ; current->case_type
  JNE parse_switch_not_case
  INC W[BP-8]                    ; ++num_cases
  JMP parse_switch_count_next
  parse_switch_not_case:
  CMP W[BX+8],2                  ; current->case_type
  JNE parse_switch_count_next
  INC W[BP-0a]                   ; ++num_defaults

  parse_switch_count_next:
  MOV BX,[BX+4]                  ; current = current->next
  JMP parse_switch_count_cases
  parse_switch_count_cases_done:

  CMP W[BP-0a],1
  JLE parse_switch_defaults_ok
  error_exit("Only one default label allowed on line: $")
  parse_switch_defaults_ok:

  asm_byte(0b9)
  asm_word(W[BP-8]+1)            ; assemble "MOV CX,num_cases+1"
  asm_byte(056)                  ; assemble "PUSH SI"
  MOV W[BP-2],add_anon_label()   ; switch_data = add_anon_label()
  asm_byte(0be)
  asm_word(get_label([BP-2]))    ; assemble "MOV SI,switch_data"
  asm_byte(0ad)                  ; assemble "switch_looptop: LODSW"
  asm_byte(089)
  asm_byte(0c3)                  ; assemble "MOV BX,AX"
  asm_byte(0ad)                  ; assemble "LODSW"
  asm_byte(039)
  asm_byte(0d0)                  ; assemble "CMP AX,DX"
  asm_byte(0e0)
  asm_byte(0f8)                  ; assemble "LOOPNE switch_looptop"
  asm_byte(05e)                  ; assemble "POP SI"
  asm_byte(0ff)
  asm_byte(0e3)                  ; assemble "JMP BX"
  set_label([BP-2])              ; set_label(switch_data)
  MOV W[BP-4],add_anon_label()   ; switch_end = add_anon_label()
  MOV W[BP-6],[BP-4]             ; default_label = switch_end

  MOV BX,[[scope_table]+4]       ; current = scope_table->first
  parse_switch_emit_data:
  CMP BX,0
  JE parse_switch_emit_data_done
  CMP W[BX+8],1                  ; current->case_type
  JNE parse_switch_default
  PUSH BX
  asm_word([BX+2])               ; assemble current->dest
  POP BX
  PUSH BX
  asm_word([BX+0c])              ; assemble current->value
  POP BX
  JMP parse_switch_emitted_data
  parse_switch_default:
  CMP W[BX+8],2                  ; current->case_type
  JNE parse_switch_emitted_data
  MOV W[BP-6],BX                 ; default_label = current
  parse_switch_emitted_data:
  MOV BX,[BX+4]                  ; current = current->next
  JMP parse_switch_emit_data

  parse_switch_emit_data_done:
  asm_word([[BP-6]+2])           ; assemble default_label->dest
  asm_word(0)                    ; assemble 0 ("value" of default case - will be ignored)

  ADD W[BP-8],[BP-0a]            ; num_cases += num_labels

  ; State 1 - need a case or default label

  parse_switch_state1:
  CMP B[token],'K'
  JNE parse_switch_need_case
  CMP B[token+1],'C'
  JE parse_switch_got_case
  CMP B[token+1],'D'
  JNE parse_switch_need_case

  set_label(add_case_label(2,0)) ; add default label
  get_next_token()                          ; Slurp the default
  JMP parse_switch_state2

  parse_switch_need_number:
  error_exit("Expected a number at line: $")
  parse_switch_need_case:
  error_exit("Expected a case or default at line: $")

  parse_switch_got_case:
  get_next_token()                          ; Slurp the case
  CMP B[token],'0'
  JNE parse_switch_need_number

  set_label(add_case_label(1,[token_arg])) ; add case label
  get_next_token()                          ; Slurp the number

  ; State 2 - need a statement or case or default label

  parse_switch_state2:
  parse_statement()              ; assemble statement
  TEST AX,AX
  JNZ parse_switch_state1

  DEC W[BP-8]                    ; --num_cases
  CMP W[BP-8],0
  JE parse_switch_state3

  gen_jmp(get_label([BP-4]))     ; assemble "JMP switch_end"

  ; State 3 - need a } or case or default label

  parse_switch_state3:
  CMP B[token],'}'
  JNE parse_switch_state1

  get_next_token()                          ; Slurp the }
  set_label([BP-4])              ; set_label(switch_end)
  leave_scope()

  MOV SP,BP
  POP BP
  RET



; This function adds a label to the current scope
; arg1 [BP+0e] label
; arg2 [BP+0c] subscope
; arg3 [BP+0a] dest
; arg4 [BP+8]  frame
; arg5 [BP+6]  cast_type
; arg6 [BP+4]  value

add_label:
  PUSH BP
  MOV BP,SP

  MOV BX,[BP+0e]                 ; label

  CMP B[first_phase],0
  JE add_label_not_first_phase


  CMP BX,0
  JNE add_label_got

  CMP W[BP+6],1                  ; case_type
  JNE add_label_alloc_not_case

  MOV BX,malloc(0e)              ; label = malloc(14)
  JMP add_label_alloc_done

  add_label_alloc_not_case:
  MOV BX,malloc(0c)              ; label = malloc(12)

  add_label_alloc_done:
  MOV [BP+0e],BX
  MOV W[BX+0a],0                 ; label->length = 0

  add_label_got:
  MOV W[BX],[BP+0c]              ; label->subscope = subscope
  MOV W[BX+2],[BP+0a]            ; label->dest = dest
  MOV W[BX+4],0                  ; label->next = 0
  MOV W[BX+6],[BP+8]             ; label->frame = frame
  MOV W[BX+8],[BP+6]             ; label->case_type = case_type
  CMP W[BX+8],1
  JNE add_label_not_case
  MOV W[BX+0c],[BP+4]            ; label->value = value
  add_label_not_case:

  MOV AX,BX                      ; label
  MOV BX,[scope_table]
  CMP W[BX+4],0                  ; if (scope_table->first == 0)
  JNE add_label_not_first
  MOV [BX+4],AX                  ;   scope_table->first = label
  JMP add_label_got_label
  add_label_not_first:           ; else {
  PUSH BX
  MOV BX,[BX]                    ;   scope_table->current
  MOV [BX+4],AX                  ;   scope_table->current->next = label
  POP BX
  JMP add_label_got_label        ; }


  add_label_not_first_phase:
  CMP BX,0                       ; label
  JE add_label_no_free
  free(BX)                       ; free(label)
  add_label_no_free:

  MOV BX,[scope_table]
  CMP W[BX],0                    ; if (scope_table->current == 0)
  JNE add_label_got_current
  MOV AX,[BX+4]                  ;   label = scope_table->first
  JMP add_label_got_label        ; else
  add_label_got_current:
  PUSH BX
  MOV BX,[BX]
  MOV AX,[BX+4]                  ;   label = scope_table->current->next
  POP BX
  add_label_got_label:

  MOV [BX],AX                    ; scope_table->current = label
  POP BP                         ; return label
  RET



; This function creates a new subscope and makes it the active scope

enter_scope:
  PUSH SI
  XOR BX,BX
  CMP B[first_phase],0
  JE enter_scope_not_first_phase

  MOV BX,malloc(14)              ; subscope = malloc(14)
  MOV W[BX+2],[scope_table]      ; subscope->parent = scope_table
  MOV W[BX+4],0                  ; subscope->first = 0
  MOV W[BX+6],0                  ; subscope->break_dest = 0

  enter_scope_not_first_phase:
  PUSH BX
  MOV SI,add_label(0,BX,0,0,0,0) ; label = add_label(0,subscope,0,false,0,0)
  POP BX
  CMP B[first_phase],0
  JNE enter_scope_first_phase
  MOV BX,[SI]                    ; subscope = label->subscope
  enter_scope_first_phase:
  MOV [scope_table],BX           ; scope_table = subscope
  MOV W[BX],0                    ; scope_table->current = 0
  MOV W[BX+0c],0                 ; scope_table->stack = 0
  POP SI
  RET



; This function leaves the current outermost scope and returns to its parent

leave_scope:
  MOV CX,[[scope_table]+0c]
  ADD W[[func_table]+0a],CX             ; func_table->cur_stack += scope_table->stack
  MOV W[scope_table],[[scope_table]+2]  ; scope_table = scope_table->parent
  RET



; This function adds an anonymous label to the current scope

add_anon_label:
  add_label(0,0,0,0,0,0)         ; add_label(0,0,0,false,0,0)
  RET



; This function adds a named label to the current scope

add_named_label:
  add_label([identifier],0,[ip],0,0,0) ; label = add_label(identifier,0,ip,false,0,0)
  PUSH AX
  set_label(AX)                  ; set_label(label)
  POP AX                         ; return label
  RET



; This fnuction adds a stack variable (auto or function argument) to the current scope
; arg1 = offset

add_auto:
  PUSH BP
  MOV BP,SP
  add_label([identifier],0,[BP+4],-1,0,0) ; return add_label(identifier,0,offset,true,0,0)
  get_next_token()                          ; Slurp the variable name
  POP BP
  RET



; This function adds a case label to the current scope
; arg1 [BP+6] case_type
; arg2 [BP+4] value

add_case_label:
  PUSH BP
  MOV BP,SP
  add_label(0,0,0,0,[BP+6],[BP+4]) ; return add_label(0,0,0,false,case_type,value)
  POP BP
  RET



; This function sets the destination of a label to be the current destination
; arg1 [BP+4] label

set_label:
  PUSH BP
  MOV BP,SP
  MOV BX,[BP+4]
  CMP W[BX+2],[ip]     ; if (label->dest != ip)
  JE set_label_done
  MOV W[BX+2],[ip]     ;    label->dest = ip
  MOV B[last_phase],0  ;    last_phase = false
  set_label_done:
  POP BP
  RET



; This function returns the destination of a label as an expr
; arg1 [BP+4] label

get_var:
  PUSH BP
  MOV BP,SP
  PUSH SI

  MOV BX,malloc(4)               ; expr = malloc(4)
  MOV B[BX],'N'                  ; B[expr] = 'N'
  MOV SI,[BP+4]
  CMP SI,0                       ; label
  JE get_var_label_null
  MOV W[BX+2],[SI+2]             ; W[expr+2] = label->dest
  JMP get_var_label_filled
  get_var_label_null:
  MOV W[BX+2],0                  ; W[expr+2] = 0
  get_var_label_filled:

  CMP SI,0
  JE get_var_label
  CMP W[SI+6],0                  ; label->frame
  JE get_var_label

  MOV B[BX+1],0                  ; B[expr+1] = 0
  PUSH BX
  MOV BX,malloc(2)               ; reg_bp = malloc(2)
  MOV B[BX],'R'                  ; B[reg_bp] = 'R'
  MOV B[BX+1],5                  ; B[reg_bp+1] = 5 (BP)
  PUSH BX
  MOV BX,malloc(6)               ; sum = malloc(6)
  MOV B[BX],'+'                  ; B[sum] = '+'
  POP [BX+2]                     ; W[sum+2] = reg_bp
  POP [BX+4]                     ; W[sum+4] = expr
  JMP get_var_done               ; expr = sum

  get_var_label:
  MOV B[BX+1],1                  ; B[expr+1] = 1

  get_var_done:
  MOV AX,BX                      ; return expr

  POP SI
  POP BP
  RET



; This function finds a symbol in the current scope and parent scopes, and returns it

find_symbol:
  PUSH SI

  MOV SI,[scope_table]           ; table = scope_table
  find_symbol_scope_loop:        ; do {
  MOV BX,[SI+4]                  ;   current = table->first
  find_symbol_loop:              ;   while (current != 0) {
  CMP BX,0
  JE find_symbol_endloop
  PUSH BX
  string_equals([identifier]+0a,BX+0a)
  POP BX
  TEST AX,AX
  JZ find_symbol_next            ;     if (string_equals(identifier+0a,current+0a))
  MOV AX,BX
  JMP find_symbol_done           ;       break 2

  find_symbol_next:              ;     }
  MOV BX,[BX+4]                  ;     current = current->next
  JMP find_symbol_loop
  find_symbol_endloop:           ;   }
  MOV SI,[SI+2]                  ;   table = table->parent
  CMP SI,0
  JNE find_symbol_scope_loop     ; } while (table != 0)
  CMP B[first_phase],0           ; done
  JNE find_symbol_missing_ok     ;   if (!first_phase)
  label_error("Label not found: $") ;  label_error()
  find_symbol_missing_ok:        ;   else {
  MOV B[last_phase],0
  XOR AX,AX                      ;     current = 0
  find_symbol_done:              ;   }
  PUSH AX
  free([identifier])             ; free(identifier)
  POP AX                         ; return current;
  POP SI
  RET



; This function finds a label in the current scope and returns its destination.

find_label:
  find_symbol()
  CMP AX,0
  JE find_label_done
  MOV BX,AX
  CMP W[BX+6],0
  JE find_label_not_frame
  error_exit("Expected constant label on line: $")
  find_label_not_frame:
  get_label(AX)
  find_label_done:
  RET



; This function returns the destination of a label

get_label:
  PUSH BP
  MOV BP,SP
  MOV AX,[[BP+4]+2]  ; return label->dest
  POP BP
  RET



; Initialize the symbol tables at the start of the program

init_tables:
  MOV BX,malloc(0e)
  MOV W[global_table],BX
  MOV W[scope_table],BX
  XOR AX,AX
  MOV W[func_table],AX
  MOV W[loop_table],AX
  MOV W[BX],AX               ; scope_table->next = 0
  MOV W[BX+2],AX             ; scope_table->parent = 0
  MOV W[BX+4],AX             ; scope_table->first = 0
  MOV W[BX+6],AX             ; scope_table->break_dest = 0
  MOV W[BX+8],AX             ; scope_table->max_stack = 0
  MOV W[BX+0a],AX            ; scope_table->cur_stack = 0
  MOV W[BX+0c],AX            ; scope_table->stack = 0
  RET



; Initialize the symbol tables at the start of a phase

restart_tables:
  MOV BX,[global_table]
  MOV W[BX],0               ; scope_table->current = 0
  RET
